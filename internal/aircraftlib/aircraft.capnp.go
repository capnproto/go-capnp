// Code generated by capnpc-go. DO NOT EDIT.

package aircraftlib

import (
	context "context"
	math "math"
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

// Constants defined in aircraft.capnp.
const (
	ConstEnum = Airport_jfk
)

// Constants defined in aircraft.capnp.
var (
	ConstDate = Zdate{Struct: capnp.MustUnmarshalRoot(x_832bcc6686a26d56[0:24]).Struct()}
	ConstList = Zdate_List{List: capnp.MustUnmarshalRoot(x_832bcc6686a26d56[24:64]).List()}
)

type Zdate struct{ capnp.Struct }

// Zdate_TypeID is the unique identifier for the type Zdate.
const Zdate_TypeID = 0xde50aebbad57549d

func NewZdate(s *capnp.Segment) (Zdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Zdate{st}, err
}

func NewRootZdate(s *capnp.Segment) (Zdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Zdate{st}, err
}

func ReadRootZdate(msg *capnp.Message) (Zdate, error) {
	root, err := msg.Root()
	return Zdate{root.Struct()}, err
}

func (s Zdate) String() string {
	str, _ := text.Marshal(0xde50aebbad57549d, s.Struct)
	return str
}

func (s Zdate) Year() int16 {
	return int16(s.Struct.Uint16(0))
}

func (s Zdate) SetYear(v int16) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Zdate) Month() uint8 {
	return s.Struct.Uint8(2)
}

func (s Zdate) SetMonth(v uint8) {
	s.Struct.SetUint8(2, v)
}

func (s Zdate) Day() uint8 {
	return s.Struct.Uint8(3)
}

func (s Zdate) SetDay(v uint8) {
	s.Struct.SetUint8(3, v)
}

// Zdate_List is a list of Zdate.
type Zdate_List struct{ capnp.List }

// NewZdate creates a new list of Zdate.
func NewZdate_List(s *capnp.Segment, sz int32) (Zdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Zdate_List{l}, err
}

func (s Zdate_List) At(i int) Zdate { return Zdate{s.List.Struct(i)} }

func (s Zdate_List) Set(i int, v Zdate) error { return s.List.SetStruct(i, v.Struct) }

func (s Zdate_List) String() string {
	str, _ := text.MarshalList(0xde50aebbad57549d, s.List)
	return str
}

// Zdate_Future is a wrapper for a Zdate promised by a client call.
type Zdate_Future struct{ *capnp.Future }

func (p Zdate_Future) Struct() (Zdate, error) {
	s, err := p.Future.Struct()
	return Zdate{s}, err
}

type Zdata struct{ capnp.Struct }

// Zdata_TypeID is the unique identifier for the type Zdata.
const Zdata_TypeID = 0xc7da65f9a2f20ba2

func NewZdata(s *capnp.Segment) (Zdata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Zdata{st}, err
}

func NewRootZdata(s *capnp.Segment) (Zdata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Zdata{st}, err
}

func ReadRootZdata(msg *capnp.Message) (Zdata, error) {
	root, err := msg.Root()
	return Zdata{root.Struct()}, err
}

func (s Zdata) String() string {
	str, _ := text.Marshal(0xc7da65f9a2f20ba2, s.Struct)
	return str
}

func (s Zdata) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Zdata) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Zdata) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Zdata_List is a list of Zdata.
type Zdata_List struct{ capnp.List }

// NewZdata creates a new list of Zdata.
func NewZdata_List(s *capnp.Segment, sz int32) (Zdata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Zdata_List{l}, err
}

func (s Zdata_List) At(i int) Zdata { return Zdata{s.List.Struct(i)} }

func (s Zdata_List) Set(i int, v Zdata) error { return s.List.SetStruct(i, v.Struct) }

func (s Zdata_List) String() string {
	str, _ := text.MarshalList(0xc7da65f9a2f20ba2, s.List)
	return str
}

// Zdata_Future is a wrapper for a Zdata promised by a client call.
type Zdata_Future struct{ *capnp.Future }

func (p Zdata_Future) Struct() (Zdata, error) {
	s, err := p.Future.Struct()
	return Zdata{s}, err
}

type Airport uint16

// Airport_TypeID is the unique identifier for the type Airport.
const Airport_TypeID = 0xe55d85fc1bf82f21

// Values of Airport.
const (
	Airport_none Airport = 0
	Airport_jfk  Airport = 1
	Airport_lax  Airport = 2
	Airport_sfo  Airport = 3
	Airport_luv  Airport = 4
	Airport_dfw  Airport = 5
	Airport_test Airport = 6
)

// String returns the enum's constant name.
func (c Airport) String() string {
	switch c {
	case Airport_none:
		return "none"
	case Airport_jfk:
		return "jfk"
	case Airport_lax:
		return "lax"
	case Airport_sfo:
		return "sfo"
	case Airport_luv:
		return "luv"
	case Airport_dfw:
		return "dfw"
	case Airport_test:
		return "test"

	default:
		return ""
	}
}

// AirportFromString returns the enum value with a name,
// or the zero value if there's no such value.
func AirportFromString(c string) Airport {
	switch c {
	case "none":
		return Airport_none
	case "jfk":
		return Airport_jfk
	case "lax":
		return Airport_lax
	case "sfo":
		return Airport_sfo
	case "luv":
		return Airport_luv
	case "dfw":
		return Airport_dfw
	case "test":
		return Airport_test

	default:
		return 0
	}
}

type Airport_List struct{ capnp.List }

func NewAirport_List(s *capnp.Segment, sz int32) (Airport_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Airport_List{l.List}, err
}

func (l Airport_List) At(i int) Airport {
	ul := capnp.UInt16List{List: l.List}
	return Airport(ul.At(i))
}

func (l Airport_List) Set(i int, v Airport) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type PlaneBase struct{ capnp.Struct }

// PlaneBase_TypeID is the unique identifier for the type PlaneBase.
const PlaneBase_TypeID = 0xd8bccf6e60a73791

func NewPlaneBase(s *capnp.Segment) (PlaneBase, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return PlaneBase{st}, err
}

func NewRootPlaneBase(s *capnp.Segment) (PlaneBase, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return PlaneBase{st}, err
}

func ReadRootPlaneBase(msg *capnp.Message) (PlaneBase, error) {
	root, err := msg.Root()
	return PlaneBase{root.Struct()}, err
}

func (s PlaneBase) String() string {
	str, _ := text.Marshal(0xd8bccf6e60a73791, s.Struct)
	return str
}

func (s PlaneBase) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PlaneBase) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s PlaneBase) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PlaneBase) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PlaneBase) Homes() (Airport_List, error) {
	p, err := s.Struct.Ptr(1)
	return Airport_List{List: p.List()}, err
}

func (s PlaneBase) HasHomes() bool {
	return s.Struct.HasPtr(1)
}

func (s PlaneBase) SetHomes(v Airport_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewHomes sets the homes field to a newly
// allocated Airport_List, preferring placement in s's segment.
func (s PlaneBase) NewHomes(n int32) (Airport_List, error) {
	l, err := NewAirport_List(s.Struct.Segment(), n)
	if err != nil {
		return Airport_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s PlaneBase) Rating() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s PlaneBase) SetRating(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s PlaneBase) CanFly() bool {
	return s.Struct.Bit(64)
}

func (s PlaneBase) SetCanFly(v bool) {
	s.Struct.SetBit(64, v)
}

func (s PlaneBase) Capacity() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s PlaneBase) SetCapacity(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

func (s PlaneBase) MaxSpeed() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s PlaneBase) SetMaxSpeed(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

// PlaneBase_List is a list of PlaneBase.
type PlaneBase_List struct{ capnp.List }

// NewPlaneBase creates a new list of PlaneBase.
func NewPlaneBase_List(s *capnp.Segment, sz int32) (PlaneBase_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2}, sz)
	return PlaneBase_List{l}, err
}

func (s PlaneBase_List) At(i int) PlaneBase { return PlaneBase{s.List.Struct(i)} }

func (s PlaneBase_List) Set(i int, v PlaneBase) error { return s.List.SetStruct(i, v.Struct) }

func (s PlaneBase_List) String() string {
	str, _ := text.MarshalList(0xd8bccf6e60a73791, s.List)
	return str
}

// PlaneBase_Future is a wrapper for a PlaneBase promised by a client call.
type PlaneBase_Future struct{ *capnp.Future }

func (p PlaneBase_Future) Struct() (PlaneBase, error) {
	s, err := p.Future.Struct()
	return PlaneBase{s}, err
}

type B737 struct{ capnp.Struct }

// B737_TypeID is the unique identifier for the type B737.
const B737_TypeID = 0xccb3b2e3603826e0

func NewB737(s *capnp.Segment) (B737, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return B737{st}, err
}

func NewRootB737(s *capnp.Segment) (B737, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return B737{st}, err
}

func ReadRootB737(msg *capnp.Message) (B737, error) {
	root, err := msg.Root()
	return B737{root.Struct()}, err
}

func (s B737) String() string {
	str, _ := text.Marshal(0xccb3b2e3603826e0, s.Struct)
	return str
}

func (s B737) Base() (PlaneBase, error) {
	p, err := s.Struct.Ptr(0)
	return PlaneBase{Struct: p.Struct()}, err
}

func (s B737) HasBase() bool {
	return s.Struct.HasPtr(0)
}

func (s B737) SetBase(v PlaneBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated PlaneBase struct, preferring placement in s's segment.
func (s B737) NewBase() (PlaneBase, error) {
	ss, err := NewPlaneBase(s.Struct.Segment())
	if err != nil {
		return PlaneBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// B737_List is a list of B737.
type B737_List struct{ capnp.List }

// NewB737 creates a new list of B737.
func NewB737_List(s *capnp.Segment, sz int32) (B737_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return B737_List{l}, err
}

func (s B737_List) At(i int) B737 { return B737{s.List.Struct(i)} }

func (s B737_List) Set(i int, v B737) error { return s.List.SetStruct(i, v.Struct) }

func (s B737_List) String() string {
	str, _ := text.MarshalList(0xccb3b2e3603826e0, s.List)
	return str
}

// B737_Future is a wrapper for a B737 promised by a client call.
type B737_Future struct{ *capnp.Future }

func (p B737_Future) Struct() (B737, error) {
	s, err := p.Future.Struct()
	return B737{s}, err
}

func (p B737_Future) Base() PlaneBase_Future {
	return PlaneBase_Future{Future: p.Future.Field(0, nil)}
}

type A320 struct{ capnp.Struct }

// A320_TypeID is the unique identifier for the type A320.
const A320_TypeID = 0xd98c608877d9cb8d

func NewA320(s *capnp.Segment) (A320, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return A320{st}, err
}

func NewRootA320(s *capnp.Segment) (A320, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return A320{st}, err
}

func ReadRootA320(msg *capnp.Message) (A320, error) {
	root, err := msg.Root()
	return A320{root.Struct()}, err
}

func (s A320) String() string {
	str, _ := text.Marshal(0xd98c608877d9cb8d, s.Struct)
	return str
}

func (s A320) Base() (PlaneBase, error) {
	p, err := s.Struct.Ptr(0)
	return PlaneBase{Struct: p.Struct()}, err
}

func (s A320) HasBase() bool {
	return s.Struct.HasPtr(0)
}

func (s A320) SetBase(v PlaneBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated PlaneBase struct, preferring placement in s's segment.
func (s A320) NewBase() (PlaneBase, error) {
	ss, err := NewPlaneBase(s.Struct.Segment())
	if err != nil {
		return PlaneBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// A320_List is a list of A320.
type A320_List struct{ capnp.List }

// NewA320 creates a new list of A320.
func NewA320_List(s *capnp.Segment, sz int32) (A320_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return A320_List{l}, err
}

func (s A320_List) At(i int) A320 { return A320{s.List.Struct(i)} }

func (s A320_List) Set(i int, v A320) error { return s.List.SetStruct(i, v.Struct) }

func (s A320_List) String() string {
	str, _ := text.MarshalList(0xd98c608877d9cb8d, s.List)
	return str
}

// A320_Future is a wrapper for a A320 promised by a client call.
type A320_Future struct{ *capnp.Future }

func (p A320_Future) Struct() (A320, error) {
	s, err := p.Future.Struct()
	return A320{s}, err
}

func (p A320_Future) Base() PlaneBase_Future {
	return PlaneBase_Future{Future: p.Future.Field(0, nil)}
}

type F16 struct{ capnp.Struct }

// F16_TypeID is the unique identifier for the type F16.
const F16_TypeID = 0xe1c9eac512335361

func NewF16(s *capnp.Segment) (F16, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return F16{st}, err
}

func NewRootF16(s *capnp.Segment) (F16, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return F16{st}, err
}

func ReadRootF16(msg *capnp.Message) (F16, error) {
	root, err := msg.Root()
	return F16{root.Struct()}, err
}

func (s F16) String() string {
	str, _ := text.Marshal(0xe1c9eac512335361, s.Struct)
	return str
}

func (s F16) Base() (PlaneBase, error) {
	p, err := s.Struct.Ptr(0)
	return PlaneBase{Struct: p.Struct()}, err
}

func (s F16) HasBase() bool {
	return s.Struct.HasPtr(0)
}

func (s F16) SetBase(v PlaneBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated PlaneBase struct, preferring placement in s's segment.
func (s F16) NewBase() (PlaneBase, error) {
	ss, err := NewPlaneBase(s.Struct.Segment())
	if err != nil {
		return PlaneBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// F16_List is a list of F16.
type F16_List struct{ capnp.List }

// NewF16 creates a new list of F16.
func NewF16_List(s *capnp.Segment, sz int32) (F16_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return F16_List{l}, err
}

func (s F16_List) At(i int) F16 { return F16{s.List.Struct(i)} }

func (s F16_List) Set(i int, v F16) error { return s.List.SetStruct(i, v.Struct) }

func (s F16_List) String() string {
	str, _ := text.MarshalList(0xe1c9eac512335361, s.List)
	return str
}

// F16_Future is a wrapper for a F16 promised by a client call.
type F16_Future struct{ *capnp.Future }

func (p F16_Future) Struct() (F16, error) {
	s, err := p.Future.Struct()
	return F16{s}, err
}

func (p F16_Future) Base() PlaneBase_Future {
	return PlaneBase_Future{Future: p.Future.Field(0, nil)}
}

type Regression struct{ capnp.Struct }

// Regression_TypeID is the unique identifier for the type Regression.
const Regression_TypeID = 0xb1f0385d845e367f

func NewRegression(s *capnp.Segment) (Regression, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return Regression{st}, err
}

func NewRootRegression(s *capnp.Segment) (Regression, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return Regression{st}, err
}

func ReadRootRegression(msg *capnp.Message) (Regression, error) {
	root, err := msg.Root()
	return Regression{root.Struct()}, err
}

func (s Regression) String() string {
	str, _ := text.Marshal(0xb1f0385d845e367f, s.Struct)
	return str
}

func (s Regression) Base() (PlaneBase, error) {
	p, err := s.Struct.Ptr(0)
	return PlaneBase{Struct: p.Struct()}, err
}

func (s Regression) HasBase() bool {
	return s.Struct.HasPtr(0)
}

func (s Regression) SetBase(v PlaneBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated PlaneBase struct, preferring placement in s's segment.
func (s Regression) NewBase() (PlaneBase, error) {
	ss, err := NewPlaneBase(s.Struct.Segment())
	if err != nil {
		return PlaneBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Regression) B0() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Regression) SetB0(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Regression) Beta() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.Float64List{List: p.List()}, err
}

func (s Regression) HasBeta() bool {
	return s.Struct.HasPtr(1)
}

func (s Regression) SetBeta(v capnp.Float64List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewBeta sets the beta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Regression) NewBeta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Regression) Planes() (Aircraft_List, error) {
	p, err := s.Struct.Ptr(2)
	return Aircraft_List{List: p.List()}, err
}

func (s Regression) HasPlanes() bool {
	return s.Struct.HasPtr(2)
}

func (s Regression) SetPlanes(v Aircraft_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewPlanes sets the planes field to a newly
// allocated Aircraft_List, preferring placement in s's segment.
func (s Regression) NewPlanes(n int32) (Aircraft_List, error) {
	l, err := NewAircraft_List(s.Struct.Segment(), n)
	if err != nil {
		return Aircraft_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s Regression) Ymu() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Regression) SetYmu(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Regression) Ysd() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s Regression) SetYsd(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

// Regression_List is a list of Regression.
type Regression_List struct{ capnp.List }

// NewRegression creates a new list of Regression.
func NewRegression_List(s *capnp.Segment, sz int32) (Regression_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3}, sz)
	return Regression_List{l}, err
}

func (s Regression_List) At(i int) Regression { return Regression{s.List.Struct(i)} }

func (s Regression_List) Set(i int, v Regression) error { return s.List.SetStruct(i, v.Struct) }

func (s Regression_List) String() string {
	str, _ := text.MarshalList(0xb1f0385d845e367f, s.List)
	return str
}

// Regression_Future is a wrapper for a Regression promised by a client call.
type Regression_Future struct{ *capnp.Future }

func (p Regression_Future) Struct() (Regression, error) {
	s, err := p.Future.Struct()
	return Regression{s}, err
}

func (p Regression_Future) Base() PlaneBase_Future {
	return PlaneBase_Future{Future: p.Future.Field(0, nil)}
}

type Aircraft struct{ capnp.Struct }
type Aircraft_Which uint16

const (
	Aircraft_Which_void Aircraft_Which = 0
	Aircraft_Which_b737 Aircraft_Which = 1
	Aircraft_Which_a320 Aircraft_Which = 2
	Aircraft_Which_f16  Aircraft_Which = 3
)

func (w Aircraft_Which) String() string {
	const s = "voidb737a320f16"
	switch w {
	case Aircraft_Which_void:
		return s[0:4]
	case Aircraft_Which_b737:
		return s[4:8]
	case Aircraft_Which_a320:
		return s[8:12]
	case Aircraft_Which_f16:
		return s[12:15]

	}
	return "Aircraft_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Aircraft_TypeID is the unique identifier for the type Aircraft.
const Aircraft_TypeID = 0xe54e10aede55c7b1

func NewAircraft(s *capnp.Segment) (Aircraft, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Aircraft{st}, err
}

func NewRootAircraft(s *capnp.Segment) (Aircraft, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Aircraft{st}, err
}

func ReadRootAircraft(msg *capnp.Message) (Aircraft, error) {
	root, err := msg.Root()
	return Aircraft{root.Struct()}, err
}

func (s Aircraft) String() string {
	str, _ := text.Marshal(0xe54e10aede55c7b1, s.Struct)
	return str
}

func (s Aircraft) Which() Aircraft_Which {
	return Aircraft_Which(s.Struct.Uint16(0))
}
func (s Aircraft) SetVoid() {
	s.Struct.SetUint16(0, 0)

}

func (s Aircraft) B737() (B737, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != b737")
	}
	p, err := s.Struct.Ptr(0)
	return B737{Struct: p.Struct()}, err
}

func (s Aircraft) HasB737() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Aircraft) SetB737(v B737) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewB737 sets the b737 field to a newly
// allocated B737 struct, preferring placement in s's segment.
func (s Aircraft) NewB737() (B737, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewB737(s.Struct.Segment())
	if err != nil {
		return B737{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Aircraft) A320() (A320, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != a320")
	}
	p, err := s.Struct.Ptr(0)
	return A320{Struct: p.Struct()}, err
}

func (s Aircraft) HasA320() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Aircraft) SetA320(v A320) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewA320 sets the a320 field to a newly
// allocated A320 struct, preferring placement in s's segment.
func (s Aircraft) NewA320() (A320, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewA320(s.Struct.Segment())
	if err != nil {
		return A320{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Aircraft) F16() (F16, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != f16")
	}
	p, err := s.Struct.Ptr(0)
	return F16{Struct: p.Struct()}, err
}

func (s Aircraft) HasF16() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Aircraft) SetF16(v F16) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewF16 sets the f16 field to a newly
// allocated F16 struct, preferring placement in s's segment.
func (s Aircraft) NewF16() (F16, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewF16(s.Struct.Segment())
	if err != nil {
		return F16{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Aircraft_List is a list of Aircraft.
type Aircraft_List struct{ capnp.List }

// NewAircraft creates a new list of Aircraft.
func NewAircraft_List(s *capnp.Segment, sz int32) (Aircraft_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Aircraft_List{l}, err
}

func (s Aircraft_List) At(i int) Aircraft { return Aircraft{s.List.Struct(i)} }

func (s Aircraft_List) Set(i int, v Aircraft) error { return s.List.SetStruct(i, v.Struct) }

func (s Aircraft_List) String() string {
	str, _ := text.MarshalList(0xe54e10aede55c7b1, s.List)
	return str
}

// Aircraft_Future is a wrapper for a Aircraft promised by a client call.
type Aircraft_Future struct{ *capnp.Future }

func (p Aircraft_Future) Struct() (Aircraft, error) {
	s, err := p.Future.Struct()
	return Aircraft{s}, err
}

func (p Aircraft_Future) B737() B737_Future {
	return B737_Future{Future: p.Future.Field(0, nil)}
}

func (p Aircraft_Future) A320() A320_Future {
	return A320_Future{Future: p.Future.Field(0, nil)}
}

func (p Aircraft_Future) F16() F16_Future {
	return F16_Future{Future: p.Future.Field(0, nil)}
}

type Z struct{ capnp.Struct }
type Z_grp Z
type Z_Which uint16

const (
	Z_Which_void          Z_Which = 0
	Z_Which_zz            Z_Which = 1
	Z_Which_f64           Z_Which = 2
	Z_Which_f32           Z_Which = 3
	Z_Which_i64           Z_Which = 4
	Z_Which_i32           Z_Which = 5
	Z_Which_i16           Z_Which = 6
	Z_Which_i8            Z_Which = 7
	Z_Which_u64           Z_Which = 8
	Z_Which_u32           Z_Which = 9
	Z_Which_u16           Z_Which = 10
	Z_Which_u8            Z_Which = 11
	Z_Which_bool          Z_Which = 12
	Z_Which_text          Z_Which = 13
	Z_Which_blob          Z_Which = 14
	Z_Which_f64vec        Z_Which = 15
	Z_Which_f32vec        Z_Which = 16
	Z_Which_i64vec        Z_Which = 17
	Z_Which_i32vec        Z_Which = 18
	Z_Which_i16vec        Z_Which = 19
	Z_Which_i8vec         Z_Which = 20
	Z_Which_u64vec        Z_Which = 21
	Z_Which_u32vec        Z_Which = 22
	Z_Which_u16vec        Z_Which = 23
	Z_Which_u8vec         Z_Which = 24
	Z_Which_boolvec       Z_Which = 39
	Z_Which_datavec       Z_Which = 40
	Z_Which_textvec       Z_Which = 41
	Z_Which_zvec          Z_Which = 25
	Z_Which_zvecvec       Z_Which = 26
	Z_Which_zdate         Z_Which = 27
	Z_Which_zdata         Z_Which = 28
	Z_Which_aircraftvec   Z_Which = 29
	Z_Which_aircraft      Z_Which = 30
	Z_Which_regression    Z_Which = 31
	Z_Which_planebase     Z_Which = 32
	Z_Which_airport       Z_Which = 33
	Z_Which_b737          Z_Which = 34
	Z_Which_a320          Z_Which = 35
	Z_Which_f16           Z_Which = 36
	Z_Which_zdatevec      Z_Which = 37
	Z_Which_zdatavec      Z_Which = 38
	Z_Which_grp           Z_Which = 42
	Z_Which_echo          Z_Which = 43
	Z_Which_echoes        Z_Which = 44
	Z_Which_anyPtr        Z_Which = 45
	Z_Which_anyStruct     Z_Which = 46
	Z_Which_anyList       Z_Which = 47
	Z_Which_anyCapability Z_Which = 48
)

func (w Z_Which) String() string {
	const s = "voidzzf64f32i64i32i16i8u64u32u16u8booltextblobf64vecf32veci64veci32veci16veci8vecu64vecu32vecu16vecu8vecboolvecdatavectextveczveczvecveczdatezdataaircraftvecaircraftregressionplanebaseairportb737a320f16zdateveczdatavecgrpechoechoesanyPtranyStructanyListanyCapability"
	switch w {
	case Z_Which_void:
		return s[0:4]
	case Z_Which_zz:
		return s[4:6]
	case Z_Which_f64:
		return s[6:9]
	case Z_Which_f32:
		return s[9:12]
	case Z_Which_i64:
		return s[12:15]
	case Z_Which_i32:
		return s[15:18]
	case Z_Which_i16:
		return s[18:21]
	case Z_Which_i8:
		return s[21:23]
	case Z_Which_u64:
		return s[23:26]
	case Z_Which_u32:
		return s[26:29]
	case Z_Which_u16:
		return s[29:32]
	case Z_Which_u8:
		return s[32:34]
	case Z_Which_bool:
		return s[34:38]
	case Z_Which_text:
		return s[38:42]
	case Z_Which_blob:
		return s[42:46]
	case Z_Which_f64vec:
		return s[46:52]
	case Z_Which_f32vec:
		return s[52:58]
	case Z_Which_i64vec:
		return s[58:64]
	case Z_Which_i32vec:
		return s[64:70]
	case Z_Which_i16vec:
		return s[70:76]
	case Z_Which_i8vec:
		return s[76:81]
	case Z_Which_u64vec:
		return s[81:87]
	case Z_Which_u32vec:
		return s[87:93]
	case Z_Which_u16vec:
		return s[93:99]
	case Z_Which_u8vec:
		return s[99:104]
	case Z_Which_boolvec:
		return s[104:111]
	case Z_Which_datavec:
		return s[111:118]
	case Z_Which_textvec:
		return s[118:125]
	case Z_Which_zvec:
		return s[125:129]
	case Z_Which_zvecvec:
		return s[129:136]
	case Z_Which_zdate:
		return s[136:141]
	case Z_Which_zdata:
		return s[141:146]
	case Z_Which_aircraftvec:
		return s[146:157]
	case Z_Which_aircraft:
		return s[157:165]
	case Z_Which_regression:
		return s[165:175]
	case Z_Which_planebase:
		return s[175:184]
	case Z_Which_airport:
		return s[184:191]
	case Z_Which_b737:
		return s[191:195]
	case Z_Which_a320:
		return s[195:199]
	case Z_Which_f16:
		return s[199:202]
	case Z_Which_zdatevec:
		return s[202:210]
	case Z_Which_zdatavec:
		return s[210:218]
	case Z_Which_grp:
		return s[218:221]
	case Z_Which_echo:
		return s[221:225]
	case Z_Which_echoes:
		return s[225:231]
	case Z_Which_anyPtr:
		return s[231:237]
	case Z_Which_anyStruct:
		return s[237:246]
	case Z_Which_anyList:
		return s[246:253]
	case Z_Which_anyCapability:
		return s[253:266]

	}
	return "Z_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Z_TypeID is the unique identifier for the type Z.
const Z_TypeID = 0xea26e9973bd6a0d9

func NewZ(s *capnp.Segment) (Z, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Z{st}, err
}

func NewRootZ(s *capnp.Segment) (Z, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Z{st}, err
}

func ReadRootZ(msg *capnp.Message) (Z, error) {
	root, err := msg.Root()
	return Z{root.Struct()}, err
}

func (s Z) String() string {
	str, _ := text.Marshal(0xea26e9973bd6a0d9, s.Struct)
	return str
}

func (s Z) Which() Z_Which {
	return Z_Which(s.Struct.Uint16(0))
}
func (s Z) SetVoid() {
	s.Struct.SetUint16(0, 0)

}

func (s Z) Zz() (Z, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != zz")
	}
	p, err := s.Struct.Ptr(0)
	return Z{Struct: p.Struct()}, err
}

func (s Z) HasZz() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetZz(v Z) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewZz sets the zz field to a newly
// allocated Z struct, preferring placement in s's segment.
func (s Z) NewZz() (Z, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewZ(s.Struct.Segment())
	if err != nil {
		return Z{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) F64() float64 {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != f64")
	}
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Z) SetF64(v float64) {
	s.Struct.SetUint16(0, 2)
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Z) F32() float32 {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != f32")
	}
	return math.Float32frombits(s.Struct.Uint32(8))
}

func (s Z) SetF32(v float32) {
	s.Struct.SetUint16(0, 3)
	s.Struct.SetUint32(8, math.Float32bits(v))
}

func (s Z) I64() int64 {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != i64")
	}
	return int64(s.Struct.Uint64(8))
}

func (s Z) SetI64(v int64) {
	s.Struct.SetUint16(0, 4)
	s.Struct.SetUint64(8, uint64(v))
}

func (s Z) I32() int32 {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != i32")
	}
	return int32(s.Struct.Uint32(8))
}

func (s Z) SetI32(v int32) {
	s.Struct.SetUint16(0, 5)
	s.Struct.SetUint32(8, uint32(v))
}

func (s Z) I16() int16 {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != i16")
	}
	return int16(s.Struct.Uint16(8))
}

func (s Z) SetI16(v int16) {
	s.Struct.SetUint16(0, 6)
	s.Struct.SetUint16(8, uint16(v))
}

func (s Z) I8() int8 {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != i8")
	}
	return int8(s.Struct.Uint8(8))
}

func (s Z) SetI8(v int8) {
	s.Struct.SetUint16(0, 7)
	s.Struct.SetUint8(8, uint8(v))
}

func (s Z) U64() uint64 {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != u64")
	}
	return s.Struct.Uint64(8)
}

func (s Z) SetU64(v uint64) {
	s.Struct.SetUint16(0, 8)
	s.Struct.SetUint64(8, v)
}

func (s Z) U32() uint32 {
	if s.Struct.Uint16(0) != 9 {
		panic("Which() != u32")
	}
	return s.Struct.Uint32(8)
}

func (s Z) SetU32(v uint32) {
	s.Struct.SetUint16(0, 9)
	s.Struct.SetUint32(8, v)
}

func (s Z) U16() uint16 {
	if s.Struct.Uint16(0) != 10 {
		panic("Which() != u16")
	}
	return s.Struct.Uint16(8)
}

func (s Z) SetU16(v uint16) {
	s.Struct.SetUint16(0, 10)
	s.Struct.SetUint16(8, v)
}

func (s Z) U8() uint8 {
	if s.Struct.Uint16(0) != 11 {
		panic("Which() != u8")
	}
	return s.Struct.Uint8(8)
}

func (s Z) SetU8(v uint8) {
	s.Struct.SetUint16(0, 11)
	s.Struct.SetUint8(8, v)
}

func (s Z) Bool() bool {
	if s.Struct.Uint16(0) != 12 {
		panic("Which() != bool")
	}
	return s.Struct.Bit(64)
}

func (s Z) SetBool(v bool) {
	s.Struct.SetUint16(0, 12)
	s.Struct.SetBit(64, v)
}

func (s Z) Text() (string, error) {
	if s.Struct.Uint16(0) != 13 {
		panic("Which() != text")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Z) HasText() bool {
	if s.Struct.Uint16(0) != 13 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) TextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Z) SetText(v string) error {
	s.Struct.SetUint16(0, 13)
	return s.Struct.SetText(0, v)
}

func (s Z) Blob() ([]byte, error) {
	if s.Struct.Uint16(0) != 14 {
		panic("Which() != blob")
	}
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Z) HasBlob() bool {
	if s.Struct.Uint16(0) != 14 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetBlob(v []byte) error {
	s.Struct.SetUint16(0, 14)
	return s.Struct.SetData(0, v)
}

func (s Z) F64vec() (capnp.Float64List, error) {
	if s.Struct.Uint16(0) != 15 {
		panic("Which() != f64vec")
	}
	p, err := s.Struct.Ptr(0)
	return capnp.Float64List{List: p.List()}, err
}

func (s Z) HasF64vec() bool {
	if s.Struct.Uint16(0) != 15 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetF64vec(v capnp.Float64List) error {
	s.Struct.SetUint16(0, 15)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewF64vec sets the f64vec field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Z) NewF64vec(n int32) (capnp.Float64List, error) {
	s.Struct.SetUint16(0, 15)
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) F32vec() (capnp.Float32List, error) {
	if s.Struct.Uint16(0) != 16 {
		panic("Which() != f32vec")
	}
	p, err := s.Struct.Ptr(0)
	return capnp.Float32List{List: p.List()}, err
}

func (s Z) HasF32vec() bool {
	if s.Struct.Uint16(0) != 16 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetF32vec(v capnp.Float32List) error {
	s.Struct.SetUint16(0, 16)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewF32vec sets the f32vec field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s Z) NewF32vec(n int32) (capnp.Float32List, error) {
	s.Struct.SetUint16(0, 16)
	l, err := capnp.NewFloat32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) I64vec() (capnp.Int64List, error) {
	if s.Struct.Uint16(0) != 17 {
		panic("Which() != i64vec")
	}
	p, err := s.Struct.Ptr(0)
	return capnp.Int64List{List: p.List()}, err
}

func (s Z) HasI64vec() bool {
	if s.Struct.Uint16(0) != 17 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetI64vec(v capnp.Int64List) error {
	s.Struct.SetUint16(0, 17)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewI64vec sets the i64vec field to a newly
// allocated capnp.Int64List, preferring placement in s's segment.
func (s Z) NewI64vec(n int32) (capnp.Int64List, error) {
	s.Struct.SetUint16(0, 17)
	l, err := capnp.NewInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) I32vec() (capnp.Int32List, error) {
	if s.Struct.Uint16(0) != 18 {
		panic("Which() != i32vec")
	}
	p, err := s.Struct.Ptr(0)
	return capnp.Int32List{List: p.List()}, err
}

func (s Z) HasI32vec() bool {
	if s.Struct.Uint16(0) != 18 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetI32vec(v capnp.Int32List) error {
	s.Struct.SetUint16(0, 18)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewI32vec sets the i32vec field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Z) NewI32vec(n int32) (capnp.Int32List, error) {
	s.Struct.SetUint16(0, 18)
	l, err := capnp.NewInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) I16vec() (capnp.Int16List, error) {
	if s.Struct.Uint16(0) != 19 {
		panic("Which() != i16vec")
	}
	p, err := s.Struct.Ptr(0)
	return capnp.Int16List{List: p.List()}, err
}

func (s Z) HasI16vec() bool {
	if s.Struct.Uint16(0) != 19 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetI16vec(v capnp.Int16List) error {
	s.Struct.SetUint16(0, 19)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewI16vec sets the i16vec field to a newly
// allocated capnp.Int16List, preferring placement in s's segment.
func (s Z) NewI16vec(n int32) (capnp.Int16List, error) {
	s.Struct.SetUint16(0, 19)
	l, err := capnp.NewInt16List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int16List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) I8vec() (capnp.Int8List, error) {
	if s.Struct.Uint16(0) != 20 {
		panic("Which() != i8vec")
	}
	p, err := s.Struct.Ptr(0)
	return capnp.Int8List{List: p.List()}, err
}

func (s Z) HasI8vec() bool {
	if s.Struct.Uint16(0) != 20 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetI8vec(v capnp.Int8List) error {
	s.Struct.SetUint16(0, 20)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewI8vec sets the i8vec field to a newly
// allocated capnp.Int8List, preferring placement in s's segment.
func (s Z) NewI8vec(n int32) (capnp.Int8List, error) {
	s.Struct.SetUint16(0, 20)
	l, err := capnp.NewInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int8List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) U64vec() (capnp.UInt64List, error) {
	if s.Struct.Uint16(0) != 21 {
		panic("Which() != u64vec")
	}
	p, err := s.Struct.Ptr(0)
	return capnp.UInt64List{List: p.List()}, err
}

func (s Z) HasU64vec() bool {
	if s.Struct.Uint16(0) != 21 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetU64vec(v capnp.UInt64List) error {
	s.Struct.SetUint16(0, 21)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewU64vec sets the u64vec field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s Z) NewU64vec(n int32) (capnp.UInt64List, error) {
	s.Struct.SetUint16(0, 21)
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) U32vec() (capnp.UInt32List, error) {
	if s.Struct.Uint16(0) != 22 {
		panic("Which() != u32vec")
	}
	p, err := s.Struct.Ptr(0)
	return capnp.UInt32List{List: p.List()}, err
}

func (s Z) HasU32vec() bool {
	if s.Struct.Uint16(0) != 22 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetU32vec(v capnp.UInt32List) error {
	s.Struct.SetUint16(0, 22)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewU32vec sets the u32vec field to a newly
// allocated capnp.UInt32List, preferring placement in s's segment.
func (s Z) NewU32vec(n int32) (capnp.UInt32List, error) {
	s.Struct.SetUint16(0, 22)
	l, err := capnp.NewUInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt32List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) U16vec() (capnp.UInt16List, error) {
	if s.Struct.Uint16(0) != 23 {
		panic("Which() != u16vec")
	}
	p, err := s.Struct.Ptr(0)
	return capnp.UInt16List{List: p.List()}, err
}

func (s Z) HasU16vec() bool {
	if s.Struct.Uint16(0) != 23 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetU16vec(v capnp.UInt16List) error {
	s.Struct.SetUint16(0, 23)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewU16vec sets the u16vec field to a newly
// allocated capnp.UInt16List, preferring placement in s's segment.
func (s Z) NewU16vec(n int32) (capnp.UInt16List, error) {
	s.Struct.SetUint16(0, 23)
	l, err := capnp.NewUInt16List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt16List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) U8vec() (capnp.UInt8List, error) {
	if s.Struct.Uint16(0) != 24 {
		panic("Which() != u8vec")
	}
	p, err := s.Struct.Ptr(0)
	return capnp.UInt8List{List: p.List()}, err
}

func (s Z) HasU8vec() bool {
	if s.Struct.Uint16(0) != 24 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetU8vec(v capnp.UInt8List) error {
	s.Struct.SetUint16(0, 24)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewU8vec sets the u8vec field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Z) NewU8vec(n int32) (capnp.UInt8List, error) {
	s.Struct.SetUint16(0, 24)
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) Boolvec() (capnp.BitList, error) {
	if s.Struct.Uint16(0) != 39 {
		panic("Which() != boolvec")
	}
	p, err := s.Struct.Ptr(0)
	return capnp.BitList{List: p.List()}, err
}

func (s Z) HasBoolvec() bool {
	if s.Struct.Uint16(0) != 39 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetBoolvec(v capnp.BitList) error {
	s.Struct.SetUint16(0, 39)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewBoolvec sets the boolvec field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s Z) NewBoolvec(n int32) (capnp.BitList, error) {
	s.Struct.SetUint16(0, 39)
	l, err := capnp.NewBitList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) Datavec() (capnp.DataList, error) {
	if s.Struct.Uint16(0) != 40 {
		panic("Which() != datavec")
	}
	p, err := s.Struct.Ptr(0)
	return capnp.DataList{List: p.List()}, err
}

func (s Z) HasDatavec() bool {
	if s.Struct.Uint16(0) != 40 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetDatavec(v capnp.DataList) error {
	s.Struct.SetUint16(0, 40)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewDatavec sets the datavec field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Z) NewDatavec(n int32) (capnp.DataList, error) {
	s.Struct.SetUint16(0, 40)
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) Textvec() (capnp.TextList, error) {
	if s.Struct.Uint16(0) != 41 {
		panic("Which() != textvec")
	}
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Z) HasTextvec() bool {
	if s.Struct.Uint16(0) != 41 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetTextvec(v capnp.TextList) error {
	s.Struct.SetUint16(0, 41)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewTextvec sets the textvec field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Z) NewTextvec(n int32) (capnp.TextList, error) {
	s.Struct.SetUint16(0, 41)
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) Zvec() (Z_List, error) {
	if s.Struct.Uint16(0) != 25 {
		panic("Which() != zvec")
	}
	p, err := s.Struct.Ptr(0)
	return Z_List{List: p.List()}, err
}

func (s Z) HasZvec() bool {
	if s.Struct.Uint16(0) != 25 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetZvec(v Z_List) error {
	s.Struct.SetUint16(0, 25)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewZvec sets the zvec field to a newly
// allocated Z_List, preferring placement in s's segment.
func (s Z) NewZvec(n int32) (Z_List, error) {
	s.Struct.SetUint16(0, 25)
	l, err := NewZ_List(s.Struct.Segment(), n)
	if err != nil {
		return Z_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) Zvecvec() (capnp.PointerList, error) {
	if s.Struct.Uint16(0) != 26 {
		panic("Which() != zvecvec")
	}
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s Z) HasZvecvec() bool {
	if s.Struct.Uint16(0) != 26 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetZvecvec(v capnp.PointerList) error {
	s.Struct.SetUint16(0, 26)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewZvecvec sets the zvecvec field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s Z) NewZvecvec(n int32) (capnp.PointerList, error) {
	s.Struct.SetUint16(0, 26)
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) Zdate() (Zdate, error) {
	if s.Struct.Uint16(0) != 27 {
		panic("Which() != zdate")
	}
	p, err := s.Struct.Ptr(0)
	return Zdate{Struct: p.Struct()}, err
}

func (s Z) HasZdate() bool {
	if s.Struct.Uint16(0) != 27 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetZdate(v Zdate) error {
	s.Struct.SetUint16(0, 27)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewZdate sets the zdate field to a newly
// allocated Zdate struct, preferring placement in s's segment.
func (s Z) NewZdate() (Zdate, error) {
	s.Struct.SetUint16(0, 27)
	ss, err := NewZdate(s.Struct.Segment())
	if err != nil {
		return Zdate{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Zdata() (Zdata, error) {
	if s.Struct.Uint16(0) != 28 {
		panic("Which() != zdata")
	}
	p, err := s.Struct.Ptr(0)
	return Zdata{Struct: p.Struct()}, err
}

func (s Z) HasZdata() bool {
	if s.Struct.Uint16(0) != 28 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetZdata(v Zdata) error {
	s.Struct.SetUint16(0, 28)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewZdata sets the zdata field to a newly
// allocated Zdata struct, preferring placement in s's segment.
func (s Z) NewZdata() (Zdata, error) {
	s.Struct.SetUint16(0, 28)
	ss, err := NewZdata(s.Struct.Segment())
	if err != nil {
		return Zdata{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Aircraftvec() (Aircraft_List, error) {
	if s.Struct.Uint16(0) != 29 {
		panic("Which() != aircraftvec")
	}
	p, err := s.Struct.Ptr(0)
	return Aircraft_List{List: p.List()}, err
}

func (s Z) HasAircraftvec() bool {
	if s.Struct.Uint16(0) != 29 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetAircraftvec(v Aircraft_List) error {
	s.Struct.SetUint16(0, 29)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewAircraftvec sets the aircraftvec field to a newly
// allocated Aircraft_List, preferring placement in s's segment.
func (s Z) NewAircraftvec(n int32) (Aircraft_List, error) {
	s.Struct.SetUint16(0, 29)
	l, err := NewAircraft_List(s.Struct.Segment(), n)
	if err != nil {
		return Aircraft_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) Aircraft() (Aircraft, error) {
	if s.Struct.Uint16(0) != 30 {
		panic("Which() != aircraft")
	}
	p, err := s.Struct.Ptr(0)
	return Aircraft{Struct: p.Struct()}, err
}

func (s Z) HasAircraft() bool {
	if s.Struct.Uint16(0) != 30 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetAircraft(v Aircraft) error {
	s.Struct.SetUint16(0, 30)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAircraft sets the aircraft field to a newly
// allocated Aircraft struct, preferring placement in s's segment.
func (s Z) NewAircraft() (Aircraft, error) {
	s.Struct.SetUint16(0, 30)
	ss, err := NewAircraft(s.Struct.Segment())
	if err != nil {
		return Aircraft{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Regression() (Regression, error) {
	if s.Struct.Uint16(0) != 31 {
		panic("Which() != regression")
	}
	p, err := s.Struct.Ptr(0)
	return Regression{Struct: p.Struct()}, err
}

func (s Z) HasRegression() bool {
	if s.Struct.Uint16(0) != 31 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetRegression(v Regression) error {
	s.Struct.SetUint16(0, 31)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRegression sets the regression field to a newly
// allocated Regression struct, preferring placement in s's segment.
func (s Z) NewRegression() (Regression, error) {
	s.Struct.SetUint16(0, 31)
	ss, err := NewRegression(s.Struct.Segment())
	if err != nil {
		return Regression{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Planebase() (PlaneBase, error) {
	if s.Struct.Uint16(0) != 32 {
		panic("Which() != planebase")
	}
	p, err := s.Struct.Ptr(0)
	return PlaneBase{Struct: p.Struct()}, err
}

func (s Z) HasPlanebase() bool {
	if s.Struct.Uint16(0) != 32 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetPlanebase(v PlaneBase) error {
	s.Struct.SetUint16(0, 32)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPlanebase sets the planebase field to a newly
// allocated PlaneBase struct, preferring placement in s's segment.
func (s Z) NewPlanebase() (PlaneBase, error) {
	s.Struct.SetUint16(0, 32)
	ss, err := NewPlaneBase(s.Struct.Segment())
	if err != nil {
		return PlaneBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Airport() Airport {
	if s.Struct.Uint16(0) != 33 {
		panic("Which() != airport")
	}
	return Airport(s.Struct.Uint16(8))
}

func (s Z) SetAirport(v Airport) {
	s.Struct.SetUint16(0, 33)
	s.Struct.SetUint16(8, uint16(v))
}

func (s Z) B737() (B737, error) {
	if s.Struct.Uint16(0) != 34 {
		panic("Which() != b737")
	}
	p, err := s.Struct.Ptr(0)
	return B737{Struct: p.Struct()}, err
}

func (s Z) HasB737() bool {
	if s.Struct.Uint16(0) != 34 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetB737(v B737) error {
	s.Struct.SetUint16(0, 34)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewB737 sets the b737 field to a newly
// allocated B737 struct, preferring placement in s's segment.
func (s Z) NewB737() (B737, error) {
	s.Struct.SetUint16(0, 34)
	ss, err := NewB737(s.Struct.Segment())
	if err != nil {
		return B737{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) A320() (A320, error) {
	if s.Struct.Uint16(0) != 35 {
		panic("Which() != a320")
	}
	p, err := s.Struct.Ptr(0)
	return A320{Struct: p.Struct()}, err
}

func (s Z) HasA320() bool {
	if s.Struct.Uint16(0) != 35 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetA320(v A320) error {
	s.Struct.SetUint16(0, 35)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewA320 sets the a320 field to a newly
// allocated A320 struct, preferring placement in s's segment.
func (s Z) NewA320() (A320, error) {
	s.Struct.SetUint16(0, 35)
	ss, err := NewA320(s.Struct.Segment())
	if err != nil {
		return A320{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) F16() (F16, error) {
	if s.Struct.Uint16(0) != 36 {
		panic("Which() != f16")
	}
	p, err := s.Struct.Ptr(0)
	return F16{Struct: p.Struct()}, err
}

func (s Z) HasF16() bool {
	if s.Struct.Uint16(0) != 36 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetF16(v F16) error {
	s.Struct.SetUint16(0, 36)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewF16 sets the f16 field to a newly
// allocated F16 struct, preferring placement in s's segment.
func (s Z) NewF16() (F16, error) {
	s.Struct.SetUint16(0, 36)
	ss, err := NewF16(s.Struct.Segment())
	if err != nil {
		return F16{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Zdatevec() (Zdate_List, error) {
	if s.Struct.Uint16(0) != 37 {
		panic("Which() != zdatevec")
	}
	p, err := s.Struct.Ptr(0)
	return Zdate_List{List: p.List()}, err
}

func (s Z) HasZdatevec() bool {
	if s.Struct.Uint16(0) != 37 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetZdatevec(v Zdate_List) error {
	s.Struct.SetUint16(0, 37)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewZdatevec sets the zdatevec field to a newly
// allocated Zdate_List, preferring placement in s's segment.
func (s Z) NewZdatevec(n int32) (Zdate_List, error) {
	s.Struct.SetUint16(0, 37)
	l, err := NewZdate_List(s.Struct.Segment(), n)
	if err != nil {
		return Zdate_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) Zdatavec() (Zdata_List, error) {
	if s.Struct.Uint16(0) != 38 {
		panic("Which() != zdatavec")
	}
	p, err := s.Struct.Ptr(0)
	return Zdata_List{List: p.List()}, err
}

func (s Z) HasZdatavec() bool {
	if s.Struct.Uint16(0) != 38 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetZdatavec(v Zdata_List) error {
	s.Struct.SetUint16(0, 38)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewZdatavec sets the zdatavec field to a newly
// allocated Zdata_List, preferring placement in s's segment.
func (s Z) NewZdatavec(n int32) (Zdata_List, error) {
	s.Struct.SetUint16(0, 38)
	l, err := NewZdata_List(s.Struct.Segment(), n)
	if err != nil {
		return Zdata_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) Grp() Z_grp { return Z_grp(s) }

func (s Z) SetGrp() {
	s.Struct.SetUint16(0, 42)
}

func (s Z_grp) First() uint64 {
	return s.Struct.Uint64(8)
}

func (s Z_grp) SetFirst(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s Z_grp) Second() uint64 {
	return s.Struct.Uint64(16)
}

func (s Z_grp) SetSecond(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s Z) Echo() Echo {
	if s.Struct.Uint16(0) != 43 {
		panic("Which() != echo")
	}
	p, _ := s.Struct.Ptr(0)
	return Echo{Client: p.Interface().Client()}
}

func (s Z) HasEcho() bool {
	if s.Struct.Uint16(0) != 43 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetEcho(v Echo) error {
	s.Struct.SetUint16(0, 43)
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Z) Echoes() (capnp.PointerList, error) {
	if s.Struct.Uint16(0) != 44 {
		panic("Which() != echoes")
	}
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s Z) HasEchoes() bool {
	if s.Struct.Uint16(0) != 44 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetEchoes(v capnp.PointerList) error {
	s.Struct.SetUint16(0, 44)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEchoes sets the echoes field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s Z) NewEchoes(n int32) (capnp.PointerList, error) {
	s.Struct.SetUint16(0, 44)
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) AnyPtr() (capnp.Ptr, error) {
	if s.Struct.Uint16(0) != 45 {
		panic("Which() != anyPtr")
	}
	return s.Struct.Ptr(0)
}

func (s Z) HasAnyPtr() bool {
	if s.Struct.Uint16(0) != 45 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetAnyPtr(v capnp.Ptr) error {
	s.Struct.SetUint16(0, 45)
	return s.Struct.SetPtr(0, v)
}

func (s Z) AnyStruct() (capnp.Ptr, error) {
	if s.Struct.Uint16(0) != 46 {
		panic("Which() != anyStruct")
	}
	return s.Struct.Ptr(0)
}

func (s Z) HasAnyStruct() bool {
	if s.Struct.Uint16(0) != 46 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetAnyStruct(v capnp.Ptr) error {
	s.Struct.SetUint16(0, 46)
	return s.Struct.SetPtr(0, v)
}

func (s Z) AnyList() (capnp.Ptr, error) {
	if s.Struct.Uint16(0) != 47 {
		panic("Which() != anyList")
	}
	return s.Struct.Ptr(0)
}

func (s Z) HasAnyList() bool {
	if s.Struct.Uint16(0) != 47 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetAnyList(v capnp.Ptr) error {
	s.Struct.SetUint16(0, 47)
	return s.Struct.SetPtr(0, v)
}

func (s Z) AnyCapability() (capnp.Ptr, error) {
	if s.Struct.Uint16(0) != 48 {
		panic("Which() != anyCapability")
	}
	return s.Struct.Ptr(0)
}

func (s Z) HasAnyCapability() bool {
	if s.Struct.Uint16(0) != 48 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetAnyCapability(v capnp.Ptr) error {
	s.Struct.SetUint16(0, 48)
	return s.Struct.SetPtr(0, v)
}

// Z_List is a list of Z.
type Z_List struct{ capnp.List }

// NewZ creates a new list of Z.
func NewZ_List(s *capnp.Segment, sz int32) (Z_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return Z_List{l}, err
}

func (s Z_List) At(i int) Z { return Z{s.List.Struct(i)} }

func (s Z_List) Set(i int, v Z) error { return s.List.SetStruct(i, v.Struct) }

func (s Z_List) String() string {
	str, _ := text.MarshalList(0xea26e9973bd6a0d9, s.List)
	return str
}

// Z_Future is a wrapper for a Z promised by a client call.
type Z_Future struct{ *capnp.Future }

func (p Z_Future) Struct() (Z, error) {
	s, err := p.Future.Struct()
	return Z{s}, err
}

func (p Z_Future) Zz() Z_Future {
	return Z_Future{Future: p.Future.Field(0, nil)}
}

func (p Z_Future) Zdate() Zdate_Future {
	return Zdate_Future{Future: p.Future.Field(0, nil)}
}

func (p Z_Future) Zdata() Zdata_Future {
	return Zdata_Future{Future: p.Future.Field(0, nil)}
}

func (p Z_Future) Aircraft() Aircraft_Future {
	return Aircraft_Future{Future: p.Future.Field(0, nil)}
}

func (p Z_Future) Regression() Regression_Future {
	return Regression_Future{Future: p.Future.Field(0, nil)}
}

func (p Z_Future) Planebase() PlaneBase_Future {
	return PlaneBase_Future{Future: p.Future.Field(0, nil)}
}

func (p Z_Future) B737() B737_Future {
	return B737_Future{Future: p.Future.Field(0, nil)}
}

func (p Z_Future) A320() A320_Future {
	return A320_Future{Future: p.Future.Field(0, nil)}
}

func (p Z_Future) F16() F16_Future {
	return F16_Future{Future: p.Future.Field(0, nil)}
}

func (p Z_Future) Grp() Z_grp_Future { return Z_grp_Future{p.Future} }

// Z_grp_Future is a wrapper for a Z_grp promised by a client call.
type Z_grp_Future struct{ *capnp.Future }

func (p Z_grp_Future) Struct() (Z_grp, error) {
	s, err := p.Future.Struct()
	return Z_grp{s}, err
}

func (p Z_Future) Echo() Echo {
	return Echo{Client: p.Future.Field(0, nil).Client()}
}

func (p Z_Future) AnyPtr() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p Z_Future) AnyStruct() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p Z_Future) AnyList() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p Z_Future) AnyCapability() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Counter struct{ capnp.Struct }

// Counter_TypeID is the unique identifier for the type Counter.
const Counter_TypeID = 0x8748bc095e10cb5d

func NewCounter(s *capnp.Segment) (Counter, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Counter{st}, err
}

func NewRootCounter(s *capnp.Segment) (Counter, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Counter{st}, err
}

func ReadRootCounter(msg *capnp.Message) (Counter, error) {
	root, err := msg.Root()
	return Counter{root.Struct()}, err
}

func (s Counter) String() string {
	str, _ := text.Marshal(0x8748bc095e10cb5d, s.Struct)
	return str
}

func (s Counter) Size() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Counter) SetSize(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Counter) Words() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Counter) HasWords() bool {
	return s.Struct.HasPtr(0)
}

func (s Counter) WordsBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Counter) SetWords(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Counter) Wordlist() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s Counter) HasWordlist() bool {
	return s.Struct.HasPtr(1)
}

func (s Counter) SetWordlist(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewWordlist sets the wordlist field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Counter) NewWordlist(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Counter) Bitlist() (capnp.BitList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.BitList{List: p.List()}, err
}

func (s Counter) HasBitlist() bool {
	return s.Struct.HasPtr(2)
}

func (s Counter) SetBitlist(v capnp.BitList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewBitlist sets the bitlist field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s Counter) NewBitlist(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// Counter_List is a list of Counter.
type Counter_List struct{ capnp.List }

// NewCounter creates a new list of Counter.
func NewCounter_List(s *capnp.Segment, sz int32) (Counter_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return Counter_List{l}, err
}

func (s Counter_List) At(i int) Counter { return Counter{s.List.Struct(i)} }

func (s Counter_List) Set(i int, v Counter) error { return s.List.SetStruct(i, v.Struct) }

func (s Counter_List) String() string {
	str, _ := text.MarshalList(0x8748bc095e10cb5d, s.List)
	return str
}

// Counter_Future is a wrapper for a Counter promised by a client call.
type Counter_Future struct{ *capnp.Future }

func (p Counter_Future) Struct() (Counter, error) {
	s, err := p.Future.Struct()
	return Counter{s}, err
}

type Bag struct{ capnp.Struct }

// Bag_TypeID is the unique identifier for the type Bag.
const Bag_TypeID = 0xd636fba4f188dabe

func NewBag(s *capnp.Segment) (Bag, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Bag{st}, err
}

func NewRootBag(s *capnp.Segment) (Bag, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Bag{st}, err
}

func ReadRootBag(msg *capnp.Message) (Bag, error) {
	root, err := msg.Root()
	return Bag{root.Struct()}, err
}

func (s Bag) String() string {
	str, _ := text.Marshal(0xd636fba4f188dabe, s.Struct)
	return str
}

func (s Bag) Counter() (Counter, error) {
	p, err := s.Struct.Ptr(0)
	return Counter{Struct: p.Struct()}, err
}

func (s Bag) HasCounter() bool {
	return s.Struct.HasPtr(0)
}

func (s Bag) SetCounter(v Counter) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCounter sets the counter field to a newly
// allocated Counter struct, preferring placement in s's segment.
func (s Bag) NewCounter() (Counter, error) {
	ss, err := NewCounter(s.Struct.Segment())
	if err != nil {
		return Counter{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Bag_List is a list of Bag.
type Bag_List struct{ capnp.List }

// NewBag creates a new list of Bag.
func NewBag_List(s *capnp.Segment, sz int32) (Bag_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Bag_List{l}, err
}

func (s Bag_List) At(i int) Bag { return Bag{s.List.Struct(i)} }

func (s Bag_List) Set(i int, v Bag) error { return s.List.SetStruct(i, v.Struct) }

func (s Bag_List) String() string {
	str, _ := text.MarshalList(0xd636fba4f188dabe, s.List)
	return str
}

// Bag_Future is a wrapper for a Bag promised by a client call.
type Bag_Future struct{ *capnp.Future }

func (p Bag_Future) Struct() (Bag, error) {
	s, err := p.Future.Struct()
	return Bag{s}, err
}

func (p Bag_Future) Counter() Counter_Future {
	return Counter_Future{Future: p.Future.Field(0, nil)}
}

type Zserver struct{ capnp.Struct }

// Zserver_TypeID is the unique identifier for the type Zserver.
const Zserver_TypeID = 0xcc4411e60ba9c498

func NewZserver(s *capnp.Segment) (Zserver, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Zserver{st}, err
}

func NewRootZserver(s *capnp.Segment) (Zserver, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Zserver{st}, err
}

func ReadRootZserver(msg *capnp.Message) (Zserver, error) {
	root, err := msg.Root()
	return Zserver{root.Struct()}, err
}

func (s Zserver) String() string {
	str, _ := text.Marshal(0xcc4411e60ba9c498, s.Struct)
	return str
}

func (s Zserver) Waitingjobs() (Zjob_List, error) {
	p, err := s.Struct.Ptr(0)
	return Zjob_List{List: p.List()}, err
}

func (s Zserver) HasWaitingjobs() bool {
	return s.Struct.HasPtr(0)
}

func (s Zserver) SetWaitingjobs(v Zjob_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewWaitingjobs sets the waitingjobs field to a newly
// allocated Zjob_List, preferring placement in s's segment.
func (s Zserver) NewWaitingjobs(n int32) (Zjob_List, error) {
	l, err := NewZjob_List(s.Struct.Segment(), n)
	if err != nil {
		return Zjob_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Zserver_List is a list of Zserver.
type Zserver_List struct{ capnp.List }

// NewZserver creates a new list of Zserver.
func NewZserver_List(s *capnp.Segment, sz int32) (Zserver_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Zserver_List{l}, err
}

func (s Zserver_List) At(i int) Zserver { return Zserver{s.List.Struct(i)} }

func (s Zserver_List) Set(i int, v Zserver) error { return s.List.SetStruct(i, v.Struct) }

func (s Zserver_List) String() string {
	str, _ := text.MarshalList(0xcc4411e60ba9c498, s.List)
	return str
}

// Zserver_Future is a wrapper for a Zserver promised by a client call.
type Zserver_Future struct{ *capnp.Future }

func (p Zserver_Future) Struct() (Zserver, error) {
	s, err := p.Future.Struct()
	return Zserver{s}, err
}

type Zjob struct{ capnp.Struct }

// Zjob_TypeID is the unique identifier for the type Zjob.
const Zjob_TypeID = 0xddd1416669fb7613

func NewZjob(s *capnp.Segment) (Zjob, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Zjob{st}, err
}

func NewRootZjob(s *capnp.Segment) (Zjob, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Zjob{st}, err
}

func ReadRootZjob(msg *capnp.Message) (Zjob, error) {
	root, err := msg.Root()
	return Zjob{root.Struct()}, err
}

func (s Zjob) String() string {
	str, _ := text.Marshal(0xddd1416669fb7613, s.Struct)
	return str
}

func (s Zjob) Cmd() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Zjob) HasCmd() bool {
	return s.Struct.HasPtr(0)
}

func (s Zjob) CmdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Zjob) SetCmd(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Zjob) Args() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s Zjob) HasArgs() bool {
	return s.Struct.HasPtr(1)
}

func (s Zjob) SetArgs(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Zjob) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Zjob_List is a list of Zjob.
type Zjob_List struct{ capnp.List }

// NewZjob creates a new list of Zjob.
func NewZjob_List(s *capnp.Segment, sz int32) (Zjob_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Zjob_List{l}, err
}

func (s Zjob_List) At(i int) Zjob { return Zjob{s.List.Struct(i)} }

func (s Zjob_List) Set(i int, v Zjob) error { return s.List.SetStruct(i, v.Struct) }

func (s Zjob_List) String() string {
	str, _ := text.MarshalList(0xddd1416669fb7613, s.List)
	return str
}

// Zjob_Future is a wrapper for a Zjob promised by a client call.
type Zjob_Future struct{ *capnp.Future }

func (p Zjob_Future) Struct() (Zjob, error) {
	s, err := p.Future.Struct()
	return Zjob{s}, err
}

type VerEmpty struct{ capnp.Struct }

// VerEmpty_TypeID is the unique identifier for the type VerEmpty.
const VerEmpty_TypeID = 0x93c99951eacc72ff

func NewVerEmpty(s *capnp.Segment) (VerEmpty, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VerEmpty{st}, err
}

func NewRootVerEmpty(s *capnp.Segment) (VerEmpty, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VerEmpty{st}, err
}

func ReadRootVerEmpty(msg *capnp.Message) (VerEmpty, error) {
	root, err := msg.Root()
	return VerEmpty{root.Struct()}, err
}

func (s VerEmpty) String() string {
	str, _ := text.Marshal(0x93c99951eacc72ff, s.Struct)
	return str
}

// VerEmpty_List is a list of VerEmpty.
type VerEmpty_List struct{ capnp.List }

// NewVerEmpty creates a new list of VerEmpty.
func NewVerEmpty_List(s *capnp.Segment, sz int32) (VerEmpty_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VerEmpty_List{l}, err
}

func (s VerEmpty_List) At(i int) VerEmpty { return VerEmpty{s.List.Struct(i)} }

func (s VerEmpty_List) Set(i int, v VerEmpty) error { return s.List.SetStruct(i, v.Struct) }

func (s VerEmpty_List) String() string {
	str, _ := text.MarshalList(0x93c99951eacc72ff, s.List)
	return str
}

// VerEmpty_Future is a wrapper for a VerEmpty promised by a client call.
type VerEmpty_Future struct{ *capnp.Future }

func (p VerEmpty_Future) Struct() (VerEmpty, error) {
	s, err := p.Future.Struct()
	return VerEmpty{s}, err
}

type VerOneData struct{ capnp.Struct }

// VerOneData_TypeID is the unique identifier for the type VerOneData.
const VerOneData_TypeID = 0xfca3742893be4cde

func NewVerOneData(s *capnp.Segment) (VerOneData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return VerOneData{st}, err
}

func NewRootVerOneData(s *capnp.Segment) (VerOneData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return VerOneData{st}, err
}

func ReadRootVerOneData(msg *capnp.Message) (VerOneData, error) {
	root, err := msg.Root()
	return VerOneData{root.Struct()}, err
}

func (s VerOneData) String() string {
	str, _ := text.Marshal(0xfca3742893be4cde, s.Struct)
	return str
}

func (s VerOneData) Val() int16 {
	return int16(s.Struct.Uint16(0))
}

func (s VerOneData) SetVal(v int16) {
	s.Struct.SetUint16(0, uint16(v))
}

// VerOneData_List is a list of VerOneData.
type VerOneData_List struct{ capnp.List }

// NewVerOneData creates a new list of VerOneData.
func NewVerOneData_List(s *capnp.Segment, sz int32) (VerOneData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return VerOneData_List{l}, err
}

func (s VerOneData_List) At(i int) VerOneData { return VerOneData{s.List.Struct(i)} }

func (s VerOneData_List) Set(i int, v VerOneData) error { return s.List.SetStruct(i, v.Struct) }

func (s VerOneData_List) String() string {
	str, _ := text.MarshalList(0xfca3742893be4cde, s.List)
	return str
}

// VerOneData_Future is a wrapper for a VerOneData promised by a client call.
type VerOneData_Future struct{ *capnp.Future }

func (p VerOneData_Future) Struct() (VerOneData, error) {
	s, err := p.Future.Struct()
	return VerOneData{s}, err
}

type VerTwoData struct{ capnp.Struct }

// VerTwoData_TypeID is the unique identifier for the type VerTwoData.
const VerTwoData_TypeID = 0xf705dc45c94766fd

func NewVerTwoData(s *capnp.Segment) (VerTwoData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return VerTwoData{st}, err
}

func NewRootVerTwoData(s *capnp.Segment) (VerTwoData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return VerTwoData{st}, err
}

func ReadRootVerTwoData(msg *capnp.Message) (VerTwoData, error) {
	root, err := msg.Root()
	return VerTwoData{root.Struct()}, err
}

func (s VerTwoData) String() string {
	str, _ := text.Marshal(0xf705dc45c94766fd, s.Struct)
	return str
}

func (s VerTwoData) Val() int16 {
	return int16(s.Struct.Uint16(0))
}

func (s VerTwoData) SetVal(v int16) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s VerTwoData) Duo() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s VerTwoData) SetDuo(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

// VerTwoData_List is a list of VerTwoData.
type VerTwoData_List struct{ capnp.List }

// NewVerTwoData creates a new list of VerTwoData.
func NewVerTwoData_List(s *capnp.Segment, sz int32) (VerTwoData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return VerTwoData_List{l}, err
}

func (s VerTwoData_List) At(i int) VerTwoData { return VerTwoData{s.List.Struct(i)} }

func (s VerTwoData_List) Set(i int, v VerTwoData) error { return s.List.SetStruct(i, v.Struct) }

func (s VerTwoData_List) String() string {
	str, _ := text.MarshalList(0xf705dc45c94766fd, s.List)
	return str
}

// VerTwoData_Future is a wrapper for a VerTwoData promised by a client call.
type VerTwoData_Future struct{ *capnp.Future }

func (p VerTwoData_Future) Struct() (VerTwoData, error) {
	s, err := p.Future.Struct()
	return VerTwoData{s}, err
}

type VerOnePtr struct{ capnp.Struct }

// VerOnePtr_TypeID is the unique identifier for the type VerOnePtr.
const VerOnePtr_TypeID = 0x94bf7df83408218d

func NewVerOnePtr(s *capnp.Segment) (VerOnePtr, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VerOnePtr{st}, err
}

func NewRootVerOnePtr(s *capnp.Segment) (VerOnePtr, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VerOnePtr{st}, err
}

func ReadRootVerOnePtr(msg *capnp.Message) (VerOnePtr, error) {
	root, err := msg.Root()
	return VerOnePtr{root.Struct()}, err
}

func (s VerOnePtr) String() string {
	str, _ := text.Marshal(0x94bf7df83408218d, s.Struct)
	return str
}

func (s VerOnePtr) Ptr() (VerOneData, error) {
	p, err := s.Struct.Ptr(0)
	return VerOneData{Struct: p.Struct()}, err
}

func (s VerOnePtr) HasPtr() bool {
	return s.Struct.HasPtr(0)
}

func (s VerOnePtr) SetPtr(v VerOneData) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPtr sets the ptr field to a newly
// allocated VerOneData struct, preferring placement in s's segment.
func (s VerOnePtr) NewPtr() (VerOneData, error) {
	ss, err := NewVerOneData(s.Struct.Segment())
	if err != nil {
		return VerOneData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// VerOnePtr_List is a list of VerOnePtr.
type VerOnePtr_List struct{ capnp.List }

// NewVerOnePtr creates a new list of VerOnePtr.
func NewVerOnePtr_List(s *capnp.Segment, sz int32) (VerOnePtr_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VerOnePtr_List{l}, err
}

func (s VerOnePtr_List) At(i int) VerOnePtr { return VerOnePtr{s.List.Struct(i)} }

func (s VerOnePtr_List) Set(i int, v VerOnePtr) error { return s.List.SetStruct(i, v.Struct) }

func (s VerOnePtr_List) String() string {
	str, _ := text.MarshalList(0x94bf7df83408218d, s.List)
	return str
}

// VerOnePtr_Future is a wrapper for a VerOnePtr promised by a client call.
type VerOnePtr_Future struct{ *capnp.Future }

func (p VerOnePtr_Future) Struct() (VerOnePtr, error) {
	s, err := p.Future.Struct()
	return VerOnePtr{s}, err
}

func (p VerOnePtr_Future) Ptr() VerOneData_Future {
	return VerOneData_Future{Future: p.Future.Field(0, nil)}
}

type VerTwoPtr struct{ capnp.Struct }

// VerTwoPtr_TypeID is the unique identifier for the type VerTwoPtr.
const VerTwoPtr_TypeID = 0xc95babe3bd394d2d

func NewVerTwoPtr(s *capnp.Segment) (VerTwoPtr, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VerTwoPtr{st}, err
}

func NewRootVerTwoPtr(s *capnp.Segment) (VerTwoPtr, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VerTwoPtr{st}, err
}

func ReadRootVerTwoPtr(msg *capnp.Message) (VerTwoPtr, error) {
	root, err := msg.Root()
	return VerTwoPtr{root.Struct()}, err
}

func (s VerTwoPtr) String() string {
	str, _ := text.Marshal(0xc95babe3bd394d2d, s.Struct)
	return str
}

func (s VerTwoPtr) Ptr1() (VerOneData, error) {
	p, err := s.Struct.Ptr(0)
	return VerOneData{Struct: p.Struct()}, err
}

func (s VerTwoPtr) HasPtr1() bool {
	return s.Struct.HasPtr(0)
}

func (s VerTwoPtr) SetPtr1(v VerOneData) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPtr1 sets the ptr1 field to a newly
// allocated VerOneData struct, preferring placement in s's segment.
func (s VerTwoPtr) NewPtr1() (VerOneData, error) {
	ss, err := NewVerOneData(s.Struct.Segment())
	if err != nil {
		return VerOneData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s VerTwoPtr) Ptr2() (VerOneData, error) {
	p, err := s.Struct.Ptr(1)
	return VerOneData{Struct: p.Struct()}, err
}

func (s VerTwoPtr) HasPtr2() bool {
	return s.Struct.HasPtr(1)
}

func (s VerTwoPtr) SetPtr2(v VerOneData) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewPtr2 sets the ptr2 field to a newly
// allocated VerOneData struct, preferring placement in s's segment.
func (s VerTwoPtr) NewPtr2() (VerOneData, error) {
	ss, err := NewVerOneData(s.Struct.Segment())
	if err != nil {
		return VerOneData{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// VerTwoPtr_List is a list of VerTwoPtr.
type VerTwoPtr_List struct{ capnp.List }

// NewVerTwoPtr creates a new list of VerTwoPtr.
func NewVerTwoPtr_List(s *capnp.Segment, sz int32) (VerTwoPtr_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return VerTwoPtr_List{l}, err
}

func (s VerTwoPtr_List) At(i int) VerTwoPtr { return VerTwoPtr{s.List.Struct(i)} }

func (s VerTwoPtr_List) Set(i int, v VerTwoPtr) error { return s.List.SetStruct(i, v.Struct) }

func (s VerTwoPtr_List) String() string {
	str, _ := text.MarshalList(0xc95babe3bd394d2d, s.List)
	return str
}

// VerTwoPtr_Future is a wrapper for a VerTwoPtr promised by a client call.
type VerTwoPtr_Future struct{ *capnp.Future }

func (p VerTwoPtr_Future) Struct() (VerTwoPtr, error) {
	s, err := p.Future.Struct()
	return VerTwoPtr{s}, err
}

func (p VerTwoPtr_Future) Ptr1() VerOneData_Future {
	return VerOneData_Future{Future: p.Future.Field(0, nil)}
}

func (p VerTwoPtr_Future) Ptr2() VerOneData_Future {
	return VerOneData_Future{Future: p.Future.Field(1, nil)}
}

type VerTwoDataTwoPtr struct{ capnp.Struct }

// VerTwoDataTwoPtr_TypeID is the unique identifier for the type VerTwoDataTwoPtr.
const VerTwoDataTwoPtr_TypeID = 0xb61ee2ecff34ca73

func NewVerTwoDataTwoPtr(s *capnp.Segment) (VerTwoDataTwoPtr, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return VerTwoDataTwoPtr{st}, err
}

func NewRootVerTwoDataTwoPtr(s *capnp.Segment) (VerTwoDataTwoPtr, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return VerTwoDataTwoPtr{st}, err
}

func ReadRootVerTwoDataTwoPtr(msg *capnp.Message) (VerTwoDataTwoPtr, error) {
	root, err := msg.Root()
	return VerTwoDataTwoPtr{root.Struct()}, err
}

func (s VerTwoDataTwoPtr) String() string {
	str, _ := text.Marshal(0xb61ee2ecff34ca73, s.Struct)
	return str
}

func (s VerTwoDataTwoPtr) Val() int16 {
	return int16(s.Struct.Uint16(0))
}

func (s VerTwoDataTwoPtr) SetVal(v int16) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s VerTwoDataTwoPtr) Duo() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s VerTwoDataTwoPtr) SetDuo(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s VerTwoDataTwoPtr) Ptr1() (VerOneData, error) {
	p, err := s.Struct.Ptr(0)
	return VerOneData{Struct: p.Struct()}, err
}

func (s VerTwoDataTwoPtr) HasPtr1() bool {
	return s.Struct.HasPtr(0)
}

func (s VerTwoDataTwoPtr) SetPtr1(v VerOneData) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPtr1 sets the ptr1 field to a newly
// allocated VerOneData struct, preferring placement in s's segment.
func (s VerTwoDataTwoPtr) NewPtr1() (VerOneData, error) {
	ss, err := NewVerOneData(s.Struct.Segment())
	if err != nil {
		return VerOneData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s VerTwoDataTwoPtr) Ptr2() (VerOneData, error) {
	p, err := s.Struct.Ptr(1)
	return VerOneData{Struct: p.Struct()}, err
}

func (s VerTwoDataTwoPtr) HasPtr2() bool {
	return s.Struct.HasPtr(1)
}

func (s VerTwoDataTwoPtr) SetPtr2(v VerOneData) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewPtr2 sets the ptr2 field to a newly
// allocated VerOneData struct, preferring placement in s's segment.
func (s VerTwoDataTwoPtr) NewPtr2() (VerOneData, error) {
	ss, err := NewVerOneData(s.Struct.Segment())
	if err != nil {
		return VerOneData{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// VerTwoDataTwoPtr_List is a list of VerTwoDataTwoPtr.
type VerTwoDataTwoPtr_List struct{ capnp.List }

// NewVerTwoDataTwoPtr creates a new list of VerTwoDataTwoPtr.
func NewVerTwoDataTwoPtr_List(s *capnp.Segment, sz int32) (VerTwoDataTwoPtr_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return VerTwoDataTwoPtr_List{l}, err
}

func (s VerTwoDataTwoPtr_List) At(i int) VerTwoDataTwoPtr { return VerTwoDataTwoPtr{s.List.Struct(i)} }

func (s VerTwoDataTwoPtr_List) Set(i int, v VerTwoDataTwoPtr) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VerTwoDataTwoPtr_List) String() string {
	str, _ := text.MarshalList(0xb61ee2ecff34ca73, s.List)
	return str
}

// VerTwoDataTwoPtr_Future is a wrapper for a VerTwoDataTwoPtr promised by a client call.
type VerTwoDataTwoPtr_Future struct{ *capnp.Future }

func (p VerTwoDataTwoPtr_Future) Struct() (VerTwoDataTwoPtr, error) {
	s, err := p.Future.Struct()
	return VerTwoDataTwoPtr{s}, err
}

func (p VerTwoDataTwoPtr_Future) Ptr1() VerOneData_Future {
	return VerOneData_Future{Future: p.Future.Field(0, nil)}
}

func (p VerTwoDataTwoPtr_Future) Ptr2() VerOneData_Future {
	return VerOneData_Future{Future: p.Future.Field(1, nil)}
}

type HoldsVerEmptyList struct{ capnp.Struct }

// HoldsVerEmptyList_TypeID is the unique identifier for the type HoldsVerEmptyList.
const HoldsVerEmptyList_TypeID = 0xde9ed43cfaa83093

func NewHoldsVerEmptyList(s *capnp.Segment) (HoldsVerEmptyList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerEmptyList{st}, err
}

func NewRootHoldsVerEmptyList(s *capnp.Segment) (HoldsVerEmptyList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerEmptyList{st}, err
}

func ReadRootHoldsVerEmptyList(msg *capnp.Message) (HoldsVerEmptyList, error) {
	root, err := msg.Root()
	return HoldsVerEmptyList{root.Struct()}, err
}

func (s HoldsVerEmptyList) String() string {
	str, _ := text.Marshal(0xde9ed43cfaa83093, s.Struct)
	return str
}

func (s HoldsVerEmptyList) Mylist() (VerEmpty_List, error) {
	p, err := s.Struct.Ptr(0)
	return VerEmpty_List{List: p.List()}, err
}

func (s HoldsVerEmptyList) HasMylist() bool {
	return s.Struct.HasPtr(0)
}

func (s HoldsVerEmptyList) SetMylist(v VerEmpty_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMylist sets the mylist field to a newly
// allocated VerEmpty_List, preferring placement in s's segment.
func (s HoldsVerEmptyList) NewMylist(n int32) (VerEmpty_List, error) {
	l, err := NewVerEmpty_List(s.Struct.Segment(), n)
	if err != nil {
		return VerEmpty_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// HoldsVerEmptyList_List is a list of HoldsVerEmptyList.
type HoldsVerEmptyList_List struct{ capnp.List }

// NewHoldsVerEmptyList creates a new list of HoldsVerEmptyList.
func NewHoldsVerEmptyList_List(s *capnp.Segment, sz int32) (HoldsVerEmptyList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return HoldsVerEmptyList_List{l}, err
}

func (s HoldsVerEmptyList_List) At(i int) HoldsVerEmptyList {
	return HoldsVerEmptyList{s.List.Struct(i)}
}

func (s HoldsVerEmptyList_List) Set(i int, v HoldsVerEmptyList) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HoldsVerEmptyList_List) String() string {
	str, _ := text.MarshalList(0xde9ed43cfaa83093, s.List)
	return str
}

// HoldsVerEmptyList_Future is a wrapper for a HoldsVerEmptyList promised by a client call.
type HoldsVerEmptyList_Future struct{ *capnp.Future }

func (p HoldsVerEmptyList_Future) Struct() (HoldsVerEmptyList, error) {
	s, err := p.Future.Struct()
	return HoldsVerEmptyList{s}, err
}

type HoldsVerOneDataList struct{ capnp.Struct }

// HoldsVerOneDataList_TypeID is the unique identifier for the type HoldsVerOneDataList.
const HoldsVerOneDataList_TypeID = 0xabd055422a4d7df1

func NewHoldsVerOneDataList(s *capnp.Segment) (HoldsVerOneDataList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerOneDataList{st}, err
}

func NewRootHoldsVerOneDataList(s *capnp.Segment) (HoldsVerOneDataList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerOneDataList{st}, err
}

func ReadRootHoldsVerOneDataList(msg *capnp.Message) (HoldsVerOneDataList, error) {
	root, err := msg.Root()
	return HoldsVerOneDataList{root.Struct()}, err
}

func (s HoldsVerOneDataList) String() string {
	str, _ := text.Marshal(0xabd055422a4d7df1, s.Struct)
	return str
}

func (s HoldsVerOneDataList) Mylist() (VerOneData_List, error) {
	p, err := s.Struct.Ptr(0)
	return VerOneData_List{List: p.List()}, err
}

func (s HoldsVerOneDataList) HasMylist() bool {
	return s.Struct.HasPtr(0)
}

func (s HoldsVerOneDataList) SetMylist(v VerOneData_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMylist sets the mylist field to a newly
// allocated VerOneData_List, preferring placement in s's segment.
func (s HoldsVerOneDataList) NewMylist(n int32) (VerOneData_List, error) {
	l, err := NewVerOneData_List(s.Struct.Segment(), n)
	if err != nil {
		return VerOneData_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// HoldsVerOneDataList_List is a list of HoldsVerOneDataList.
type HoldsVerOneDataList_List struct{ capnp.List }

// NewHoldsVerOneDataList creates a new list of HoldsVerOneDataList.
func NewHoldsVerOneDataList_List(s *capnp.Segment, sz int32) (HoldsVerOneDataList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return HoldsVerOneDataList_List{l}, err
}

func (s HoldsVerOneDataList_List) At(i int) HoldsVerOneDataList {
	return HoldsVerOneDataList{s.List.Struct(i)}
}

func (s HoldsVerOneDataList_List) Set(i int, v HoldsVerOneDataList) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HoldsVerOneDataList_List) String() string {
	str, _ := text.MarshalList(0xabd055422a4d7df1, s.List)
	return str
}

// HoldsVerOneDataList_Future is a wrapper for a HoldsVerOneDataList promised by a client call.
type HoldsVerOneDataList_Future struct{ *capnp.Future }

func (p HoldsVerOneDataList_Future) Struct() (HoldsVerOneDataList, error) {
	s, err := p.Future.Struct()
	return HoldsVerOneDataList{s}, err
}

type HoldsVerTwoDataList struct{ capnp.Struct }

// HoldsVerTwoDataList_TypeID is the unique identifier for the type HoldsVerTwoDataList.
const HoldsVerTwoDataList_TypeID = 0xcbdc765fd5dff7ba

func NewHoldsVerTwoDataList(s *capnp.Segment) (HoldsVerTwoDataList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerTwoDataList{st}, err
}

func NewRootHoldsVerTwoDataList(s *capnp.Segment) (HoldsVerTwoDataList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerTwoDataList{st}, err
}

func ReadRootHoldsVerTwoDataList(msg *capnp.Message) (HoldsVerTwoDataList, error) {
	root, err := msg.Root()
	return HoldsVerTwoDataList{root.Struct()}, err
}

func (s HoldsVerTwoDataList) String() string {
	str, _ := text.Marshal(0xcbdc765fd5dff7ba, s.Struct)
	return str
}

func (s HoldsVerTwoDataList) Mylist() (VerTwoData_List, error) {
	p, err := s.Struct.Ptr(0)
	return VerTwoData_List{List: p.List()}, err
}

func (s HoldsVerTwoDataList) HasMylist() bool {
	return s.Struct.HasPtr(0)
}

func (s HoldsVerTwoDataList) SetMylist(v VerTwoData_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMylist sets the mylist field to a newly
// allocated VerTwoData_List, preferring placement in s's segment.
func (s HoldsVerTwoDataList) NewMylist(n int32) (VerTwoData_List, error) {
	l, err := NewVerTwoData_List(s.Struct.Segment(), n)
	if err != nil {
		return VerTwoData_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// HoldsVerTwoDataList_List is a list of HoldsVerTwoDataList.
type HoldsVerTwoDataList_List struct{ capnp.List }

// NewHoldsVerTwoDataList creates a new list of HoldsVerTwoDataList.
func NewHoldsVerTwoDataList_List(s *capnp.Segment, sz int32) (HoldsVerTwoDataList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return HoldsVerTwoDataList_List{l}, err
}

func (s HoldsVerTwoDataList_List) At(i int) HoldsVerTwoDataList {
	return HoldsVerTwoDataList{s.List.Struct(i)}
}

func (s HoldsVerTwoDataList_List) Set(i int, v HoldsVerTwoDataList) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HoldsVerTwoDataList_List) String() string {
	str, _ := text.MarshalList(0xcbdc765fd5dff7ba, s.List)
	return str
}

// HoldsVerTwoDataList_Future is a wrapper for a HoldsVerTwoDataList promised by a client call.
type HoldsVerTwoDataList_Future struct{ *capnp.Future }

func (p HoldsVerTwoDataList_Future) Struct() (HoldsVerTwoDataList, error) {
	s, err := p.Future.Struct()
	return HoldsVerTwoDataList{s}, err
}

type HoldsVerOnePtrList struct{ capnp.Struct }

// HoldsVerOnePtrList_TypeID is the unique identifier for the type HoldsVerOnePtrList.
const HoldsVerOnePtrList_TypeID = 0xe508a29c83a059f8

func NewHoldsVerOnePtrList(s *capnp.Segment) (HoldsVerOnePtrList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerOnePtrList{st}, err
}

func NewRootHoldsVerOnePtrList(s *capnp.Segment) (HoldsVerOnePtrList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerOnePtrList{st}, err
}

func ReadRootHoldsVerOnePtrList(msg *capnp.Message) (HoldsVerOnePtrList, error) {
	root, err := msg.Root()
	return HoldsVerOnePtrList{root.Struct()}, err
}

func (s HoldsVerOnePtrList) String() string {
	str, _ := text.Marshal(0xe508a29c83a059f8, s.Struct)
	return str
}

func (s HoldsVerOnePtrList) Mylist() (VerOnePtr_List, error) {
	p, err := s.Struct.Ptr(0)
	return VerOnePtr_List{List: p.List()}, err
}

func (s HoldsVerOnePtrList) HasMylist() bool {
	return s.Struct.HasPtr(0)
}

func (s HoldsVerOnePtrList) SetMylist(v VerOnePtr_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMylist sets the mylist field to a newly
// allocated VerOnePtr_List, preferring placement in s's segment.
func (s HoldsVerOnePtrList) NewMylist(n int32) (VerOnePtr_List, error) {
	l, err := NewVerOnePtr_List(s.Struct.Segment(), n)
	if err != nil {
		return VerOnePtr_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// HoldsVerOnePtrList_List is a list of HoldsVerOnePtrList.
type HoldsVerOnePtrList_List struct{ capnp.List }

// NewHoldsVerOnePtrList creates a new list of HoldsVerOnePtrList.
func NewHoldsVerOnePtrList_List(s *capnp.Segment, sz int32) (HoldsVerOnePtrList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return HoldsVerOnePtrList_List{l}, err
}

func (s HoldsVerOnePtrList_List) At(i int) HoldsVerOnePtrList {
	return HoldsVerOnePtrList{s.List.Struct(i)}
}

func (s HoldsVerOnePtrList_List) Set(i int, v HoldsVerOnePtrList) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HoldsVerOnePtrList_List) String() string {
	str, _ := text.MarshalList(0xe508a29c83a059f8, s.List)
	return str
}

// HoldsVerOnePtrList_Future is a wrapper for a HoldsVerOnePtrList promised by a client call.
type HoldsVerOnePtrList_Future struct{ *capnp.Future }

func (p HoldsVerOnePtrList_Future) Struct() (HoldsVerOnePtrList, error) {
	s, err := p.Future.Struct()
	return HoldsVerOnePtrList{s}, err
}

type HoldsVerTwoPtrList struct{ capnp.Struct }

// HoldsVerTwoPtrList_TypeID is the unique identifier for the type HoldsVerTwoPtrList.
const HoldsVerTwoPtrList_TypeID = 0xcf9beaca1cc180c8

func NewHoldsVerTwoPtrList(s *capnp.Segment) (HoldsVerTwoPtrList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerTwoPtrList{st}, err
}

func NewRootHoldsVerTwoPtrList(s *capnp.Segment) (HoldsVerTwoPtrList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerTwoPtrList{st}, err
}

func ReadRootHoldsVerTwoPtrList(msg *capnp.Message) (HoldsVerTwoPtrList, error) {
	root, err := msg.Root()
	return HoldsVerTwoPtrList{root.Struct()}, err
}

func (s HoldsVerTwoPtrList) String() string {
	str, _ := text.Marshal(0xcf9beaca1cc180c8, s.Struct)
	return str
}

func (s HoldsVerTwoPtrList) Mylist() (VerTwoPtr_List, error) {
	p, err := s.Struct.Ptr(0)
	return VerTwoPtr_List{List: p.List()}, err
}

func (s HoldsVerTwoPtrList) HasMylist() bool {
	return s.Struct.HasPtr(0)
}

func (s HoldsVerTwoPtrList) SetMylist(v VerTwoPtr_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMylist sets the mylist field to a newly
// allocated VerTwoPtr_List, preferring placement in s's segment.
func (s HoldsVerTwoPtrList) NewMylist(n int32) (VerTwoPtr_List, error) {
	l, err := NewVerTwoPtr_List(s.Struct.Segment(), n)
	if err != nil {
		return VerTwoPtr_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// HoldsVerTwoPtrList_List is a list of HoldsVerTwoPtrList.
type HoldsVerTwoPtrList_List struct{ capnp.List }

// NewHoldsVerTwoPtrList creates a new list of HoldsVerTwoPtrList.
func NewHoldsVerTwoPtrList_List(s *capnp.Segment, sz int32) (HoldsVerTwoPtrList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return HoldsVerTwoPtrList_List{l}, err
}

func (s HoldsVerTwoPtrList_List) At(i int) HoldsVerTwoPtrList {
	return HoldsVerTwoPtrList{s.List.Struct(i)}
}

func (s HoldsVerTwoPtrList_List) Set(i int, v HoldsVerTwoPtrList) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HoldsVerTwoPtrList_List) String() string {
	str, _ := text.MarshalList(0xcf9beaca1cc180c8, s.List)
	return str
}

// HoldsVerTwoPtrList_Future is a wrapper for a HoldsVerTwoPtrList promised by a client call.
type HoldsVerTwoPtrList_Future struct{ *capnp.Future }

func (p HoldsVerTwoPtrList_Future) Struct() (HoldsVerTwoPtrList, error) {
	s, err := p.Future.Struct()
	return HoldsVerTwoPtrList{s}, err
}

type HoldsVerTwoTwoList struct{ capnp.Struct }

// HoldsVerTwoTwoList_TypeID is the unique identifier for the type HoldsVerTwoTwoList.
const HoldsVerTwoTwoList_TypeID = 0x95befe3f14606e6b

func NewHoldsVerTwoTwoList(s *capnp.Segment) (HoldsVerTwoTwoList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerTwoTwoList{st}, err
}

func NewRootHoldsVerTwoTwoList(s *capnp.Segment) (HoldsVerTwoTwoList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerTwoTwoList{st}, err
}

func ReadRootHoldsVerTwoTwoList(msg *capnp.Message) (HoldsVerTwoTwoList, error) {
	root, err := msg.Root()
	return HoldsVerTwoTwoList{root.Struct()}, err
}

func (s HoldsVerTwoTwoList) String() string {
	str, _ := text.Marshal(0x95befe3f14606e6b, s.Struct)
	return str
}

func (s HoldsVerTwoTwoList) Mylist() (VerTwoDataTwoPtr_List, error) {
	p, err := s.Struct.Ptr(0)
	return VerTwoDataTwoPtr_List{List: p.List()}, err
}

func (s HoldsVerTwoTwoList) HasMylist() bool {
	return s.Struct.HasPtr(0)
}

func (s HoldsVerTwoTwoList) SetMylist(v VerTwoDataTwoPtr_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMylist sets the mylist field to a newly
// allocated VerTwoDataTwoPtr_List, preferring placement in s's segment.
func (s HoldsVerTwoTwoList) NewMylist(n int32) (VerTwoDataTwoPtr_List, error) {
	l, err := NewVerTwoDataTwoPtr_List(s.Struct.Segment(), n)
	if err != nil {
		return VerTwoDataTwoPtr_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// HoldsVerTwoTwoList_List is a list of HoldsVerTwoTwoList.
type HoldsVerTwoTwoList_List struct{ capnp.List }

// NewHoldsVerTwoTwoList creates a new list of HoldsVerTwoTwoList.
func NewHoldsVerTwoTwoList_List(s *capnp.Segment, sz int32) (HoldsVerTwoTwoList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return HoldsVerTwoTwoList_List{l}, err
}

func (s HoldsVerTwoTwoList_List) At(i int) HoldsVerTwoTwoList {
	return HoldsVerTwoTwoList{s.List.Struct(i)}
}

func (s HoldsVerTwoTwoList_List) Set(i int, v HoldsVerTwoTwoList) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HoldsVerTwoTwoList_List) String() string {
	str, _ := text.MarshalList(0x95befe3f14606e6b, s.List)
	return str
}

// HoldsVerTwoTwoList_Future is a wrapper for a HoldsVerTwoTwoList promised by a client call.
type HoldsVerTwoTwoList_Future struct{ *capnp.Future }

func (p HoldsVerTwoTwoList_Future) Struct() (HoldsVerTwoTwoList, error) {
	s, err := p.Future.Struct()
	return HoldsVerTwoTwoList{s}, err
}

type HoldsVerTwoTwoPlus struct{ capnp.Struct }

// HoldsVerTwoTwoPlus_TypeID is the unique identifier for the type HoldsVerTwoTwoPlus.
const HoldsVerTwoTwoPlus_TypeID = 0x87c33f2330feb3d8

func NewHoldsVerTwoTwoPlus(s *capnp.Segment) (HoldsVerTwoTwoPlus, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerTwoTwoPlus{st}, err
}

func NewRootHoldsVerTwoTwoPlus(s *capnp.Segment) (HoldsVerTwoTwoPlus, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerTwoTwoPlus{st}, err
}

func ReadRootHoldsVerTwoTwoPlus(msg *capnp.Message) (HoldsVerTwoTwoPlus, error) {
	root, err := msg.Root()
	return HoldsVerTwoTwoPlus{root.Struct()}, err
}

func (s HoldsVerTwoTwoPlus) String() string {
	str, _ := text.Marshal(0x87c33f2330feb3d8, s.Struct)
	return str
}

func (s HoldsVerTwoTwoPlus) Mylist() (VerTwoTwoPlus_List, error) {
	p, err := s.Struct.Ptr(0)
	return VerTwoTwoPlus_List{List: p.List()}, err
}

func (s HoldsVerTwoTwoPlus) HasMylist() bool {
	return s.Struct.HasPtr(0)
}

func (s HoldsVerTwoTwoPlus) SetMylist(v VerTwoTwoPlus_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMylist sets the mylist field to a newly
// allocated VerTwoTwoPlus_List, preferring placement in s's segment.
func (s HoldsVerTwoTwoPlus) NewMylist(n int32) (VerTwoTwoPlus_List, error) {
	l, err := NewVerTwoTwoPlus_List(s.Struct.Segment(), n)
	if err != nil {
		return VerTwoTwoPlus_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// HoldsVerTwoTwoPlus_List is a list of HoldsVerTwoTwoPlus.
type HoldsVerTwoTwoPlus_List struct{ capnp.List }

// NewHoldsVerTwoTwoPlus creates a new list of HoldsVerTwoTwoPlus.
func NewHoldsVerTwoTwoPlus_List(s *capnp.Segment, sz int32) (HoldsVerTwoTwoPlus_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return HoldsVerTwoTwoPlus_List{l}, err
}

func (s HoldsVerTwoTwoPlus_List) At(i int) HoldsVerTwoTwoPlus {
	return HoldsVerTwoTwoPlus{s.List.Struct(i)}
}

func (s HoldsVerTwoTwoPlus_List) Set(i int, v HoldsVerTwoTwoPlus) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HoldsVerTwoTwoPlus_List) String() string {
	str, _ := text.MarshalList(0x87c33f2330feb3d8, s.List)
	return str
}

// HoldsVerTwoTwoPlus_Future is a wrapper for a HoldsVerTwoTwoPlus promised by a client call.
type HoldsVerTwoTwoPlus_Future struct{ *capnp.Future }

func (p HoldsVerTwoTwoPlus_Future) Struct() (HoldsVerTwoTwoPlus, error) {
	s, err := p.Future.Struct()
	return HoldsVerTwoTwoPlus{s}, err
}

type VerTwoTwoPlus struct{ capnp.Struct }

// VerTwoTwoPlus_TypeID is the unique identifier for the type VerTwoTwoPlus.
const VerTwoTwoPlus_TypeID = 0xce44aee2d9e25049

func NewVerTwoTwoPlus(s *capnp.Segment) (VerTwoTwoPlus, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return VerTwoTwoPlus{st}, err
}

func NewRootVerTwoTwoPlus(s *capnp.Segment) (VerTwoTwoPlus, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return VerTwoTwoPlus{st}, err
}

func ReadRootVerTwoTwoPlus(msg *capnp.Message) (VerTwoTwoPlus, error) {
	root, err := msg.Root()
	return VerTwoTwoPlus{root.Struct()}, err
}

func (s VerTwoTwoPlus) String() string {
	str, _ := text.Marshal(0xce44aee2d9e25049, s.Struct)
	return str
}

func (s VerTwoTwoPlus) Val() int16 {
	return int16(s.Struct.Uint16(0))
}

func (s VerTwoTwoPlus) SetVal(v int16) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s VerTwoTwoPlus) Duo() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s VerTwoTwoPlus) SetDuo(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s VerTwoTwoPlus) Ptr1() (VerTwoDataTwoPtr, error) {
	p, err := s.Struct.Ptr(0)
	return VerTwoDataTwoPtr{Struct: p.Struct()}, err
}

func (s VerTwoTwoPlus) HasPtr1() bool {
	return s.Struct.HasPtr(0)
}

func (s VerTwoTwoPlus) SetPtr1(v VerTwoDataTwoPtr) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPtr1 sets the ptr1 field to a newly
// allocated VerTwoDataTwoPtr struct, preferring placement in s's segment.
func (s VerTwoTwoPlus) NewPtr1() (VerTwoDataTwoPtr, error) {
	ss, err := NewVerTwoDataTwoPtr(s.Struct.Segment())
	if err != nil {
		return VerTwoDataTwoPtr{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s VerTwoTwoPlus) Ptr2() (VerTwoDataTwoPtr, error) {
	p, err := s.Struct.Ptr(1)
	return VerTwoDataTwoPtr{Struct: p.Struct()}, err
}

func (s VerTwoTwoPlus) HasPtr2() bool {
	return s.Struct.HasPtr(1)
}

func (s VerTwoTwoPlus) SetPtr2(v VerTwoDataTwoPtr) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewPtr2 sets the ptr2 field to a newly
// allocated VerTwoDataTwoPtr struct, preferring placement in s's segment.
func (s VerTwoTwoPlus) NewPtr2() (VerTwoDataTwoPtr, error) {
	ss, err := NewVerTwoDataTwoPtr(s.Struct.Segment())
	if err != nil {
		return VerTwoDataTwoPtr{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s VerTwoTwoPlus) Tre() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s VerTwoTwoPlus) SetTre(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

func (s VerTwoTwoPlus) Lst3() (capnp.Int64List, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.Int64List{List: p.List()}, err
}

func (s VerTwoTwoPlus) HasLst3() bool {
	return s.Struct.HasPtr(2)
}

func (s VerTwoTwoPlus) SetLst3(v capnp.Int64List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewLst3 sets the lst3 field to a newly
// allocated capnp.Int64List, preferring placement in s's segment.
func (s VerTwoTwoPlus) NewLst3(n int32) (capnp.Int64List, error) {
	l, err := capnp.NewInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int64List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// VerTwoTwoPlus_List is a list of VerTwoTwoPlus.
type VerTwoTwoPlus_List struct{ capnp.List }

// NewVerTwoTwoPlus creates a new list of VerTwoTwoPlus.
func NewVerTwoTwoPlus_List(s *capnp.Segment, sz int32) (VerTwoTwoPlus_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3}, sz)
	return VerTwoTwoPlus_List{l}, err
}

func (s VerTwoTwoPlus_List) At(i int) VerTwoTwoPlus { return VerTwoTwoPlus{s.List.Struct(i)} }

func (s VerTwoTwoPlus_List) Set(i int, v VerTwoTwoPlus) error { return s.List.SetStruct(i, v.Struct) }

func (s VerTwoTwoPlus_List) String() string {
	str, _ := text.MarshalList(0xce44aee2d9e25049, s.List)
	return str
}

// VerTwoTwoPlus_Future is a wrapper for a VerTwoTwoPlus promised by a client call.
type VerTwoTwoPlus_Future struct{ *capnp.Future }

func (p VerTwoTwoPlus_Future) Struct() (VerTwoTwoPlus, error) {
	s, err := p.Future.Struct()
	return VerTwoTwoPlus{s}, err
}

func (p VerTwoTwoPlus_Future) Ptr1() VerTwoDataTwoPtr_Future {
	return VerTwoDataTwoPtr_Future{Future: p.Future.Field(0, nil)}
}

func (p VerTwoTwoPlus_Future) Ptr2() VerTwoDataTwoPtr_Future {
	return VerTwoDataTwoPtr_Future{Future: p.Future.Field(1, nil)}
}

type HoldsText struct{ capnp.Struct }

// HoldsText_TypeID is the unique identifier for the type HoldsText.
const HoldsText_TypeID = 0xe5817f849ff906dc

func NewHoldsText(s *capnp.Segment) (HoldsText, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return HoldsText{st}, err
}

func NewRootHoldsText(s *capnp.Segment) (HoldsText, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return HoldsText{st}, err
}

func ReadRootHoldsText(msg *capnp.Message) (HoldsText, error) {
	root, err := msg.Root()
	return HoldsText{root.Struct()}, err
}

func (s HoldsText) String() string {
	str, _ := text.Marshal(0xe5817f849ff906dc, s.Struct)
	return str
}

func (s HoldsText) Txt() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s HoldsText) HasTxt() bool {
	return s.Struct.HasPtr(0)
}

func (s HoldsText) TxtBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s HoldsText) SetTxt(v string) error {
	return s.Struct.SetText(0, v)
}

func (s HoldsText) Lst() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s HoldsText) HasLst() bool {
	return s.Struct.HasPtr(1)
}

func (s HoldsText) SetLst(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewLst sets the lst field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s HoldsText) NewLst(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s HoldsText) Lstlst() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.PointerList{List: p.List()}, err
}

func (s HoldsText) HasLstlst() bool {
	return s.Struct.HasPtr(2)
}

func (s HoldsText) SetLstlst(v capnp.PointerList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewLstlst sets the lstlst field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s HoldsText) NewLstlst(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// HoldsText_List is a list of HoldsText.
type HoldsText_List struct{ capnp.List }

// NewHoldsText creates a new list of HoldsText.
func NewHoldsText_List(s *capnp.Segment, sz int32) (HoldsText_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return HoldsText_List{l}, err
}

func (s HoldsText_List) At(i int) HoldsText { return HoldsText{s.List.Struct(i)} }

func (s HoldsText_List) Set(i int, v HoldsText) error { return s.List.SetStruct(i, v.Struct) }

func (s HoldsText_List) String() string {
	str, _ := text.MarshalList(0xe5817f849ff906dc, s.List)
	return str
}

// HoldsText_Future is a wrapper for a HoldsText promised by a client call.
type HoldsText_Future struct{ *capnp.Future }

func (p HoldsText_Future) Struct() (HoldsText, error) {
	s, err := p.Future.Struct()
	return HoldsText{s}, err
}

type WrapEmpty struct{ capnp.Struct }

// WrapEmpty_TypeID is the unique identifier for the type WrapEmpty.
const WrapEmpty_TypeID = 0x9ab599979b02ac59

func NewWrapEmpty(s *capnp.Segment) (WrapEmpty, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WrapEmpty{st}, err
}

func NewRootWrapEmpty(s *capnp.Segment) (WrapEmpty, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WrapEmpty{st}, err
}

func ReadRootWrapEmpty(msg *capnp.Message) (WrapEmpty, error) {
	root, err := msg.Root()
	return WrapEmpty{root.Struct()}, err
}

func (s WrapEmpty) String() string {
	str, _ := text.Marshal(0x9ab599979b02ac59, s.Struct)
	return str
}

func (s WrapEmpty) MightNotBeReallyEmpty() (VerEmpty, error) {
	p, err := s.Struct.Ptr(0)
	return VerEmpty{Struct: p.Struct()}, err
}

func (s WrapEmpty) HasMightNotBeReallyEmpty() bool {
	return s.Struct.HasPtr(0)
}

func (s WrapEmpty) SetMightNotBeReallyEmpty(v VerEmpty) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMightNotBeReallyEmpty sets the mightNotBeReallyEmpty field to a newly
// allocated VerEmpty struct, preferring placement in s's segment.
func (s WrapEmpty) NewMightNotBeReallyEmpty() (VerEmpty, error) {
	ss, err := NewVerEmpty(s.Struct.Segment())
	if err != nil {
		return VerEmpty{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// WrapEmpty_List is a list of WrapEmpty.
type WrapEmpty_List struct{ capnp.List }

// NewWrapEmpty creates a new list of WrapEmpty.
func NewWrapEmpty_List(s *capnp.Segment, sz int32) (WrapEmpty_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return WrapEmpty_List{l}, err
}

func (s WrapEmpty_List) At(i int) WrapEmpty { return WrapEmpty{s.List.Struct(i)} }

func (s WrapEmpty_List) Set(i int, v WrapEmpty) error { return s.List.SetStruct(i, v.Struct) }

func (s WrapEmpty_List) String() string {
	str, _ := text.MarshalList(0x9ab599979b02ac59, s.List)
	return str
}

// WrapEmpty_Future is a wrapper for a WrapEmpty promised by a client call.
type WrapEmpty_Future struct{ *capnp.Future }

func (p WrapEmpty_Future) Struct() (WrapEmpty, error) {
	s, err := p.Future.Struct()
	return WrapEmpty{s}, err
}

func (p WrapEmpty_Future) MightNotBeReallyEmpty() VerEmpty_Future {
	return VerEmpty_Future{Future: p.Future.Field(0, nil)}
}

type Wrap2x2 struct{ capnp.Struct }

// Wrap2x2_TypeID is the unique identifier for the type Wrap2x2.
const Wrap2x2_TypeID = 0xe1a2d1d51107bead

func NewWrap2x2(s *capnp.Segment) (Wrap2x2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Wrap2x2{st}, err
}

func NewRootWrap2x2(s *capnp.Segment) (Wrap2x2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Wrap2x2{st}, err
}

func ReadRootWrap2x2(msg *capnp.Message) (Wrap2x2, error) {
	root, err := msg.Root()
	return Wrap2x2{root.Struct()}, err
}

func (s Wrap2x2) String() string {
	str, _ := text.Marshal(0xe1a2d1d51107bead, s.Struct)
	return str
}

func (s Wrap2x2) MightNotBeReallyEmpty() (VerTwoDataTwoPtr, error) {
	p, err := s.Struct.Ptr(0)
	return VerTwoDataTwoPtr{Struct: p.Struct()}, err
}

func (s Wrap2x2) HasMightNotBeReallyEmpty() bool {
	return s.Struct.HasPtr(0)
}

func (s Wrap2x2) SetMightNotBeReallyEmpty(v VerTwoDataTwoPtr) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMightNotBeReallyEmpty sets the mightNotBeReallyEmpty field to a newly
// allocated VerTwoDataTwoPtr struct, preferring placement in s's segment.
func (s Wrap2x2) NewMightNotBeReallyEmpty() (VerTwoDataTwoPtr, error) {
	ss, err := NewVerTwoDataTwoPtr(s.Struct.Segment())
	if err != nil {
		return VerTwoDataTwoPtr{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Wrap2x2_List is a list of Wrap2x2.
type Wrap2x2_List struct{ capnp.List }

// NewWrap2x2 creates a new list of Wrap2x2.
func NewWrap2x2_List(s *capnp.Segment, sz int32) (Wrap2x2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Wrap2x2_List{l}, err
}

func (s Wrap2x2_List) At(i int) Wrap2x2 { return Wrap2x2{s.List.Struct(i)} }

func (s Wrap2x2_List) Set(i int, v Wrap2x2) error { return s.List.SetStruct(i, v.Struct) }

func (s Wrap2x2_List) String() string {
	str, _ := text.MarshalList(0xe1a2d1d51107bead, s.List)
	return str
}

// Wrap2x2_Future is a wrapper for a Wrap2x2 promised by a client call.
type Wrap2x2_Future struct{ *capnp.Future }

func (p Wrap2x2_Future) Struct() (Wrap2x2, error) {
	s, err := p.Future.Struct()
	return Wrap2x2{s}, err
}

func (p Wrap2x2_Future) MightNotBeReallyEmpty() VerTwoDataTwoPtr_Future {
	return VerTwoDataTwoPtr_Future{Future: p.Future.Field(0, nil)}
}

type Wrap2x2plus struct{ capnp.Struct }

// Wrap2x2plus_TypeID is the unique identifier for the type Wrap2x2plus.
const Wrap2x2plus_TypeID = 0xe684eb3aef1a6859

func NewWrap2x2plus(s *capnp.Segment) (Wrap2x2plus, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Wrap2x2plus{st}, err
}

func NewRootWrap2x2plus(s *capnp.Segment) (Wrap2x2plus, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Wrap2x2plus{st}, err
}

func ReadRootWrap2x2plus(msg *capnp.Message) (Wrap2x2plus, error) {
	root, err := msg.Root()
	return Wrap2x2plus{root.Struct()}, err
}

func (s Wrap2x2plus) String() string {
	str, _ := text.Marshal(0xe684eb3aef1a6859, s.Struct)
	return str
}

func (s Wrap2x2plus) MightNotBeReallyEmpty() (VerTwoTwoPlus, error) {
	p, err := s.Struct.Ptr(0)
	return VerTwoTwoPlus{Struct: p.Struct()}, err
}

func (s Wrap2x2plus) HasMightNotBeReallyEmpty() bool {
	return s.Struct.HasPtr(0)
}

func (s Wrap2x2plus) SetMightNotBeReallyEmpty(v VerTwoTwoPlus) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMightNotBeReallyEmpty sets the mightNotBeReallyEmpty field to a newly
// allocated VerTwoTwoPlus struct, preferring placement in s's segment.
func (s Wrap2x2plus) NewMightNotBeReallyEmpty() (VerTwoTwoPlus, error) {
	ss, err := NewVerTwoTwoPlus(s.Struct.Segment())
	if err != nil {
		return VerTwoTwoPlus{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Wrap2x2plus_List is a list of Wrap2x2plus.
type Wrap2x2plus_List struct{ capnp.List }

// NewWrap2x2plus creates a new list of Wrap2x2plus.
func NewWrap2x2plus_List(s *capnp.Segment, sz int32) (Wrap2x2plus_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Wrap2x2plus_List{l}, err
}

func (s Wrap2x2plus_List) At(i int) Wrap2x2plus { return Wrap2x2plus{s.List.Struct(i)} }

func (s Wrap2x2plus_List) Set(i int, v Wrap2x2plus) error { return s.List.SetStruct(i, v.Struct) }

func (s Wrap2x2plus_List) String() string {
	str, _ := text.MarshalList(0xe684eb3aef1a6859, s.List)
	return str
}

// Wrap2x2plus_Future is a wrapper for a Wrap2x2plus promised by a client call.
type Wrap2x2plus_Future struct{ *capnp.Future }

func (p Wrap2x2plus_Future) Struct() (Wrap2x2plus, error) {
	s, err := p.Future.Struct()
	return Wrap2x2plus{s}, err
}

func (p Wrap2x2plus_Future) MightNotBeReallyEmpty() VerTwoTwoPlus_Future {
	return VerTwoTwoPlus_Future{Future: p.Future.Field(0, nil)}
}

type VoidUnion struct{ capnp.Struct }
type VoidUnion_Which uint16

const (
	VoidUnion_Which_a VoidUnion_Which = 0
	VoidUnion_Which_b VoidUnion_Which = 1
)

func (w VoidUnion_Which) String() string {
	const s = "ab"
	switch w {
	case VoidUnion_Which_a:
		return s[0:1]
	case VoidUnion_Which_b:
		return s[1:2]

	}
	return "VoidUnion_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// VoidUnion_TypeID is the unique identifier for the type VoidUnion.
const VoidUnion_TypeID = 0x8821cdb23640783a

func NewVoidUnion(s *capnp.Segment) (VoidUnion, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return VoidUnion{st}, err
}

func NewRootVoidUnion(s *capnp.Segment) (VoidUnion, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return VoidUnion{st}, err
}

func ReadRootVoidUnion(msg *capnp.Message) (VoidUnion, error) {
	root, err := msg.Root()
	return VoidUnion{root.Struct()}, err
}

func (s VoidUnion) String() string {
	str, _ := text.Marshal(0x8821cdb23640783a, s.Struct)
	return str
}

func (s VoidUnion) Which() VoidUnion_Which {
	return VoidUnion_Which(s.Struct.Uint16(0))
}
func (s VoidUnion) SetA() {
	s.Struct.SetUint16(0, 0)

}

func (s VoidUnion) SetB() {
	s.Struct.SetUint16(0, 1)

}

// VoidUnion_List is a list of VoidUnion.
type VoidUnion_List struct{ capnp.List }

// NewVoidUnion creates a new list of VoidUnion.
func NewVoidUnion_List(s *capnp.Segment, sz int32) (VoidUnion_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return VoidUnion_List{l}, err
}

func (s VoidUnion_List) At(i int) VoidUnion { return VoidUnion{s.List.Struct(i)} }

func (s VoidUnion_List) Set(i int, v VoidUnion) error { return s.List.SetStruct(i, v.Struct) }

func (s VoidUnion_List) String() string {
	str, _ := text.MarshalList(0x8821cdb23640783a, s.List)
	return str
}

// VoidUnion_Future is a wrapper for a VoidUnion promised by a client call.
type VoidUnion_Future struct{ *capnp.Future }

func (p VoidUnion_Future) Struct() (VoidUnion, error) {
	s, err := p.Future.Struct()
	return VoidUnion{s}, err
}

type Nester1Capn struct{ capnp.Struct }

// Nester1Capn_TypeID is the unique identifier for the type Nester1Capn.
const Nester1Capn_TypeID = 0xf14fad09425d081c

func NewNester1Capn(s *capnp.Segment) (Nester1Capn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Nester1Capn{st}, err
}

func NewRootNester1Capn(s *capnp.Segment) (Nester1Capn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Nester1Capn{st}, err
}

func ReadRootNester1Capn(msg *capnp.Message) (Nester1Capn, error) {
	root, err := msg.Root()
	return Nester1Capn{root.Struct()}, err
}

func (s Nester1Capn) String() string {
	str, _ := text.Marshal(0xf14fad09425d081c, s.Struct)
	return str
}

func (s Nester1Capn) Strs() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Nester1Capn) HasStrs() bool {
	return s.Struct.HasPtr(0)
}

func (s Nester1Capn) SetStrs(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewStrs sets the strs field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Nester1Capn) NewStrs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Nester1Capn_List is a list of Nester1Capn.
type Nester1Capn_List struct{ capnp.List }

// NewNester1Capn creates a new list of Nester1Capn.
func NewNester1Capn_List(s *capnp.Segment, sz int32) (Nester1Capn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Nester1Capn_List{l}, err
}

func (s Nester1Capn_List) At(i int) Nester1Capn { return Nester1Capn{s.List.Struct(i)} }

func (s Nester1Capn_List) Set(i int, v Nester1Capn) error { return s.List.SetStruct(i, v.Struct) }

func (s Nester1Capn_List) String() string {
	str, _ := text.MarshalList(0xf14fad09425d081c, s.List)
	return str
}

// Nester1Capn_Future is a wrapper for a Nester1Capn promised by a client call.
type Nester1Capn_Future struct{ *capnp.Future }

func (p Nester1Capn_Future) Struct() (Nester1Capn, error) {
	s, err := p.Future.Struct()
	return Nester1Capn{s}, err
}

type RWTestCapn struct{ capnp.Struct }

// RWTestCapn_TypeID is the unique identifier for the type RWTestCapn.
const RWTestCapn_TypeID = 0xf7ff4414476c186a

func NewRWTestCapn(s *capnp.Segment) (RWTestCapn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RWTestCapn{st}, err
}

func NewRootRWTestCapn(s *capnp.Segment) (RWTestCapn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RWTestCapn{st}, err
}

func ReadRootRWTestCapn(msg *capnp.Message) (RWTestCapn, error) {
	root, err := msg.Root()
	return RWTestCapn{root.Struct()}, err
}

func (s RWTestCapn) String() string {
	str, _ := text.Marshal(0xf7ff4414476c186a, s.Struct)
	return str
}

func (s RWTestCapn) NestMatrix() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s RWTestCapn) HasNestMatrix() bool {
	return s.Struct.HasPtr(0)
}

func (s RWTestCapn) SetNestMatrix(v capnp.PointerList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewNestMatrix sets the nestMatrix field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s RWTestCapn) NewNestMatrix(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// RWTestCapn_List is a list of RWTestCapn.
type RWTestCapn_List struct{ capnp.List }

// NewRWTestCapn creates a new list of RWTestCapn.
func NewRWTestCapn_List(s *capnp.Segment, sz int32) (RWTestCapn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RWTestCapn_List{l}, err
}

func (s RWTestCapn_List) At(i int) RWTestCapn { return RWTestCapn{s.List.Struct(i)} }

func (s RWTestCapn_List) Set(i int, v RWTestCapn) error { return s.List.SetStruct(i, v.Struct) }

func (s RWTestCapn_List) String() string {
	str, _ := text.MarshalList(0xf7ff4414476c186a, s.List)
	return str
}

// RWTestCapn_Future is a wrapper for a RWTestCapn promised by a client call.
type RWTestCapn_Future struct{ *capnp.Future }

func (p RWTestCapn_Future) Struct() (RWTestCapn, error) {
	s, err := p.Future.Struct()
	return RWTestCapn{s}, err
}

type ListStructCapn struct{ capnp.Struct }

// ListStructCapn_TypeID is the unique identifier for the type ListStructCapn.
const ListStructCapn_TypeID = 0xb1ac056ed7647011

func NewListStructCapn(s *capnp.Segment) (ListStructCapn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListStructCapn{st}, err
}

func NewRootListStructCapn(s *capnp.Segment) (ListStructCapn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListStructCapn{st}, err
}

func ReadRootListStructCapn(msg *capnp.Message) (ListStructCapn, error) {
	root, err := msg.Root()
	return ListStructCapn{root.Struct()}, err
}

func (s ListStructCapn) String() string {
	str, _ := text.Marshal(0xb1ac056ed7647011, s.Struct)
	return str
}

func (s ListStructCapn) Vec() (Nester1Capn_List, error) {
	p, err := s.Struct.Ptr(0)
	return Nester1Capn_List{List: p.List()}, err
}

func (s ListStructCapn) HasVec() bool {
	return s.Struct.HasPtr(0)
}

func (s ListStructCapn) SetVec(v Nester1Capn_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewVec sets the vec field to a newly
// allocated Nester1Capn_List, preferring placement in s's segment.
func (s ListStructCapn) NewVec(n int32) (Nester1Capn_List, error) {
	l, err := NewNester1Capn_List(s.Struct.Segment(), n)
	if err != nil {
		return Nester1Capn_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ListStructCapn_List is a list of ListStructCapn.
type ListStructCapn_List struct{ capnp.List }

// NewListStructCapn creates a new list of ListStructCapn.
func NewListStructCapn_List(s *capnp.Segment, sz int32) (ListStructCapn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ListStructCapn_List{l}, err
}

func (s ListStructCapn_List) At(i int) ListStructCapn { return ListStructCapn{s.List.Struct(i)} }

func (s ListStructCapn_List) Set(i int, v ListStructCapn) error { return s.List.SetStruct(i, v.Struct) }

func (s ListStructCapn_List) String() string {
	str, _ := text.MarshalList(0xb1ac056ed7647011, s.List)
	return str
}

// ListStructCapn_Future is a wrapper for a ListStructCapn promised by a client call.
type ListStructCapn_Future struct{ *capnp.Future }

func (p ListStructCapn_Future) Struct() (ListStructCapn, error) {
	s, err := p.Future.Struct()
	return ListStructCapn{s}, err
}

type Echo struct{ Client *capnp.Client }

// Echo_TypeID is the unique identifier for the type Echo.
const Echo_TypeID = 0x8e5322c1e9282534

func (c Echo) Echo(ctx context.Context, params func(Echo_echo_Params) error) (Echo_echo_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8e5322c1e9282534,
			MethodID:      0,
			InterfaceName: "aircraft.capnp:Echo",
			MethodName:    "echo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Echo_echo_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Echo_echo_Results_Future{Future: ans.Future()}, release
}

func (c Echo) AddRef() Echo {
	return Echo{
		Client: c.Client.AddRef(),
	}
}

func (c Echo) Release() {
	c.Client.Release()
}

// A Echo_Server is a Echo with a local implementation.
type Echo_Server interface {
	Echo(context.Context, Echo_echo) error
}

// Echo_NewServer creates a new Server from an implementation of Echo_Server.
func Echo_NewServer(s Echo_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Echo_Methods(nil, s), s, c, policy)
}

// Echo_ServerToClient creates a new Client from an implementation of Echo_Server.
// The caller is responsible for calling Release on the returned Client.
func Echo_ServerToClient(s Echo_Server, policy *server.Policy) Echo {
	return Echo{Client: capnp.NewClient(Echo_NewServer(s, policy))}
}

// Echo_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Echo_Methods(methods []server.Method, s Echo_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8e5322c1e9282534,
			MethodID:      0,
			InterfaceName: "aircraft.capnp:Echo",
			MethodName:    "echo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Echo(ctx, Echo_echo{call})
		},
	})

	return methods
}

// Echo_echo holds the state for a server call to Echo.echo.
// See server.Call for documentation.
type Echo_echo struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Echo_echo) Args() Echo_echo_Params {
	return Echo_echo_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Echo_echo) AllocResults() (Echo_echo_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Echo_echo_Results{Struct: r}, err
}

type Echo_echo_Params struct{ capnp.Struct }

// Echo_echo_Params_TypeID is the unique identifier for the type Echo_echo_Params.
const Echo_echo_Params_TypeID = 0x8a165fb4d71bf3a2

func NewEcho_echo_Params(s *capnp.Segment) (Echo_echo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Echo_echo_Params{st}, err
}

func NewRootEcho_echo_Params(s *capnp.Segment) (Echo_echo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Echo_echo_Params{st}, err
}

func ReadRootEcho_echo_Params(msg *capnp.Message) (Echo_echo_Params, error) {
	root, err := msg.Root()
	return Echo_echo_Params{root.Struct()}, err
}

func (s Echo_echo_Params) String() string {
	str, _ := text.Marshal(0x8a165fb4d71bf3a2, s.Struct)
	return str
}

func (s Echo_echo_Params) In() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Echo_echo_Params) HasIn() bool {
	return s.Struct.HasPtr(0)
}

func (s Echo_echo_Params) InBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Echo_echo_Params) SetIn(v string) error {
	return s.Struct.SetText(0, v)
}

// Echo_echo_Params_List is a list of Echo_echo_Params.
type Echo_echo_Params_List struct{ capnp.List }

// NewEcho_echo_Params creates a new list of Echo_echo_Params.
func NewEcho_echo_Params_List(s *capnp.Segment, sz int32) (Echo_echo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Echo_echo_Params_List{l}, err
}

func (s Echo_echo_Params_List) At(i int) Echo_echo_Params { return Echo_echo_Params{s.List.Struct(i)} }

func (s Echo_echo_Params_List) Set(i int, v Echo_echo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Echo_echo_Params_List) String() string {
	str, _ := text.MarshalList(0x8a165fb4d71bf3a2, s.List)
	return str
}

// Echo_echo_Params_Future is a wrapper for a Echo_echo_Params promised by a client call.
type Echo_echo_Params_Future struct{ *capnp.Future }

func (p Echo_echo_Params_Future) Struct() (Echo_echo_Params, error) {
	s, err := p.Future.Struct()
	return Echo_echo_Params{s}, err
}

type Echo_echo_Results struct{ capnp.Struct }

// Echo_echo_Results_TypeID is the unique identifier for the type Echo_echo_Results.
const Echo_echo_Results_TypeID = 0x9b37d729b9dd7b9d

func NewEcho_echo_Results(s *capnp.Segment) (Echo_echo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Echo_echo_Results{st}, err
}

func NewRootEcho_echo_Results(s *capnp.Segment) (Echo_echo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Echo_echo_Results{st}, err
}

func ReadRootEcho_echo_Results(msg *capnp.Message) (Echo_echo_Results, error) {
	root, err := msg.Root()
	return Echo_echo_Results{root.Struct()}, err
}

func (s Echo_echo_Results) String() string {
	str, _ := text.Marshal(0x9b37d729b9dd7b9d, s.Struct)
	return str
}

func (s Echo_echo_Results) Out() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Echo_echo_Results) HasOut() bool {
	return s.Struct.HasPtr(0)
}

func (s Echo_echo_Results) OutBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Echo_echo_Results) SetOut(v string) error {
	return s.Struct.SetText(0, v)
}

// Echo_echo_Results_List is a list of Echo_echo_Results.
type Echo_echo_Results_List struct{ capnp.List }

// NewEcho_echo_Results creates a new list of Echo_echo_Results.
func NewEcho_echo_Results_List(s *capnp.Segment, sz int32) (Echo_echo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Echo_echo_Results_List{l}, err
}

func (s Echo_echo_Results_List) At(i int) Echo_echo_Results {
	return Echo_echo_Results{s.List.Struct(i)}
}

func (s Echo_echo_Results_List) Set(i int, v Echo_echo_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Echo_echo_Results_List) String() string {
	str, _ := text.MarshalList(0x9b37d729b9dd7b9d, s.List)
	return str
}

// Echo_echo_Results_Future is a wrapper for a Echo_echo_Results promised by a client call.
type Echo_echo_Results_Future struct{ *capnp.Future }

func (p Echo_echo_Results_Future) Struct() (Echo_echo_Results, error) {
	s, err := p.Future.Struct()
	return Echo_echo_Results{s}, err
}

type Hoth struct{ capnp.Struct }

// Hoth_TypeID is the unique identifier for the type Hoth.
const Hoth_TypeID = 0xad87da456fb0ebb9

func NewHoth(s *capnp.Segment) (Hoth, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Hoth{st}, err
}

func NewRootHoth(s *capnp.Segment) (Hoth, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Hoth{st}, err
}

func ReadRootHoth(msg *capnp.Message) (Hoth, error) {
	root, err := msg.Root()
	return Hoth{root.Struct()}, err
}

func (s Hoth) String() string {
	str, _ := text.Marshal(0xad87da456fb0ebb9, s.Struct)
	return str
}

func (s Hoth) Base() (EchoBase, error) {
	p, err := s.Struct.Ptr(0)
	return EchoBase{Struct: p.Struct()}, err
}

func (s Hoth) HasBase() bool {
	return s.Struct.HasPtr(0)
}

func (s Hoth) SetBase(v EchoBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated EchoBase struct, preferring placement in s's segment.
func (s Hoth) NewBase() (EchoBase, error) {
	ss, err := NewEchoBase(s.Struct.Segment())
	if err != nil {
		return EchoBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Hoth_List is a list of Hoth.
type Hoth_List struct{ capnp.List }

// NewHoth creates a new list of Hoth.
func NewHoth_List(s *capnp.Segment, sz int32) (Hoth_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Hoth_List{l}, err
}

func (s Hoth_List) At(i int) Hoth { return Hoth{s.List.Struct(i)} }

func (s Hoth_List) Set(i int, v Hoth) error { return s.List.SetStruct(i, v.Struct) }

func (s Hoth_List) String() string {
	str, _ := text.MarshalList(0xad87da456fb0ebb9, s.List)
	return str
}

// Hoth_Future is a wrapper for a Hoth promised by a client call.
type Hoth_Future struct{ *capnp.Future }

func (p Hoth_Future) Struct() (Hoth, error) {
	s, err := p.Future.Struct()
	return Hoth{s}, err
}

func (p Hoth_Future) Base() EchoBase_Future {
	return EchoBase_Future{Future: p.Future.Field(0, nil)}
}

type EchoBase struct{ capnp.Struct }

// EchoBase_TypeID is the unique identifier for the type EchoBase.
const EchoBase_TypeID = 0xa8bf13fef2674866

func NewEchoBase(s *capnp.Segment) (EchoBase, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoBase{st}, err
}

func NewRootEchoBase(s *capnp.Segment) (EchoBase, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoBase{st}, err
}

func ReadRootEchoBase(msg *capnp.Message) (EchoBase, error) {
	root, err := msg.Root()
	return EchoBase{root.Struct()}, err
}

func (s EchoBase) String() string {
	str, _ := text.Marshal(0xa8bf13fef2674866, s.Struct)
	return str
}

func (s EchoBase) Echo() Echo {
	p, _ := s.Struct.Ptr(0)
	return Echo{Client: p.Interface().Client()}
}

func (s EchoBase) HasEcho() bool {
	return s.Struct.HasPtr(0)
}

func (s EchoBase) SetEcho(v Echo) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// EchoBase_List is a list of EchoBase.
type EchoBase_List struct{ capnp.List }

// NewEchoBase creates a new list of EchoBase.
func NewEchoBase_List(s *capnp.Segment, sz int32) (EchoBase_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EchoBase_List{l}, err
}

func (s EchoBase_List) At(i int) EchoBase { return EchoBase{s.List.Struct(i)} }

func (s EchoBase_List) Set(i int, v EchoBase) error { return s.List.SetStruct(i, v.Struct) }

func (s EchoBase_List) String() string {
	str, _ := text.MarshalList(0xa8bf13fef2674866, s.List)
	return str
}

// EchoBase_Future is a wrapper for a EchoBase promised by a client call.
type EchoBase_Future struct{ *capnp.Future }

func (p EchoBase_Future) Struct() (EchoBase, error) {
	s, err := p.Future.Struct()
	return EchoBase{s}, err
}

func (p EchoBase_Future) Echo() Echo {
	return Echo{Client: p.Future.Field(0, nil).Client()}
}

type StackingRoot struct{ capnp.Struct }

// StackingRoot_TypeID is the unique identifier for the type StackingRoot.
const StackingRoot_TypeID = 0x8fae7b41c61fc890

func NewStackingRoot(s *capnp.Segment) (StackingRoot, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return StackingRoot{st}, err
}

func NewRootStackingRoot(s *capnp.Segment) (StackingRoot, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return StackingRoot{st}, err
}

func ReadRootStackingRoot(msg *capnp.Message) (StackingRoot, error) {
	root, err := msg.Root()
	return StackingRoot{root.Struct()}, err
}

func (s StackingRoot) String() string {
	str, _ := text.Marshal(0x8fae7b41c61fc890, s.Struct)
	return str
}

func (s StackingRoot) A() (StackingA, error) {
	p, err := s.Struct.Ptr(1)
	return StackingA{Struct: p.Struct()}, err
}

func (s StackingRoot) HasA() bool {
	return s.Struct.HasPtr(1)
}

func (s StackingRoot) SetA(v StackingA) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewA sets the a field to a newly
// allocated StackingA struct, preferring placement in s's segment.
func (s StackingRoot) NewA() (StackingA, error) {
	ss, err := NewStackingA(s.Struct.Segment())
	if err != nil {
		return StackingA{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s StackingRoot) AWithDefault() (StackingA, error) {
	p, err := s.Struct.Ptr(0)
	if err != nil {
		return StackingA{}, err
	}
	ss, err := p.StructDefault(x_832bcc6686a26d56[64:96])
	return StackingA{Struct: ss}, err
}

func (s StackingRoot) HasAWithDefault() bool {
	return s.Struct.HasPtr(0)
}

func (s StackingRoot) SetAWithDefault(v StackingA) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAWithDefault sets the aWithDefault field to a newly
// allocated StackingA struct, preferring placement in s's segment.
func (s StackingRoot) NewAWithDefault() (StackingA, error) {
	ss, err := NewStackingA(s.Struct.Segment())
	if err != nil {
		return StackingA{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// StackingRoot_List is a list of StackingRoot.
type StackingRoot_List struct{ capnp.List }

// NewStackingRoot creates a new list of StackingRoot.
func NewStackingRoot_List(s *capnp.Segment, sz int32) (StackingRoot_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return StackingRoot_List{l}, err
}

func (s StackingRoot_List) At(i int) StackingRoot { return StackingRoot{s.List.Struct(i)} }

func (s StackingRoot_List) Set(i int, v StackingRoot) error { return s.List.SetStruct(i, v.Struct) }

func (s StackingRoot_List) String() string {
	str, _ := text.MarshalList(0x8fae7b41c61fc890, s.List)
	return str
}

// StackingRoot_Future is a wrapper for a StackingRoot promised by a client call.
type StackingRoot_Future struct{ *capnp.Future }

func (p StackingRoot_Future) Struct() (StackingRoot, error) {
	s, err := p.Future.Struct()
	return StackingRoot{s}, err
}

func (p StackingRoot_Future) A() StackingA_Future {
	return StackingA_Future{Future: p.Future.Field(1, nil)}
}

func (p StackingRoot_Future) AWithDefault() StackingA_Future {
	return StackingA_Future{Future: p.Future.Field(0, x_832bcc6686a26d56[96:128])}
}

type StackingA struct{ capnp.Struct }

// StackingA_TypeID is the unique identifier for the type StackingA.
const StackingA_TypeID = 0x9d3032ff86043b75

func NewStackingA(s *capnp.Segment) (StackingA, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StackingA{st}, err
}

func NewRootStackingA(s *capnp.Segment) (StackingA, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StackingA{st}, err
}

func ReadRootStackingA(msg *capnp.Message) (StackingA, error) {
	root, err := msg.Root()
	return StackingA{root.Struct()}, err
}

func (s StackingA) String() string {
	str, _ := text.Marshal(0x9d3032ff86043b75, s.Struct)
	return str
}

func (s StackingA) Num() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s StackingA) SetNum(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s StackingA) B() (StackingB, error) {
	p, err := s.Struct.Ptr(0)
	return StackingB{Struct: p.Struct()}, err
}

func (s StackingA) HasB() bool {
	return s.Struct.HasPtr(0)
}

func (s StackingA) SetB(v StackingB) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewB sets the b field to a newly
// allocated StackingB struct, preferring placement in s's segment.
func (s StackingA) NewB() (StackingB, error) {
	ss, err := NewStackingB(s.Struct.Segment())
	if err != nil {
		return StackingB{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// StackingA_List is a list of StackingA.
type StackingA_List struct{ capnp.List }

// NewStackingA creates a new list of StackingA.
func NewStackingA_List(s *capnp.Segment, sz int32) (StackingA_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return StackingA_List{l}, err
}

func (s StackingA_List) At(i int) StackingA { return StackingA{s.List.Struct(i)} }

func (s StackingA_List) Set(i int, v StackingA) error { return s.List.SetStruct(i, v.Struct) }

func (s StackingA_List) String() string {
	str, _ := text.MarshalList(0x9d3032ff86043b75, s.List)
	return str
}

// StackingA_Future is a wrapper for a StackingA promised by a client call.
type StackingA_Future struct{ *capnp.Future }

func (p StackingA_Future) Struct() (StackingA, error) {
	s, err := p.Future.Struct()
	return StackingA{s}, err
}

func (p StackingA_Future) B() StackingB_Future {
	return StackingB_Future{Future: p.Future.Field(0, nil)}
}

type StackingB struct{ capnp.Struct }

// StackingB_TypeID is the unique identifier for the type StackingB.
const StackingB_TypeID = 0x85257b30d6edf8c5

func NewStackingB(s *capnp.Segment) (StackingB, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return StackingB{st}, err
}

func NewRootStackingB(s *capnp.Segment) (StackingB, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return StackingB{st}, err
}

func ReadRootStackingB(msg *capnp.Message) (StackingB, error) {
	root, err := msg.Root()
	return StackingB{root.Struct()}, err
}

func (s StackingB) String() string {
	str, _ := text.Marshal(0x85257b30d6edf8c5, s.Struct)
	return str
}

func (s StackingB) Num() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s StackingB) SetNum(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// StackingB_List is a list of StackingB.
type StackingB_List struct{ capnp.List }

// NewStackingB creates a new list of StackingB.
func NewStackingB_List(s *capnp.Segment, sz int32) (StackingB_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return StackingB_List{l}, err
}

func (s StackingB_List) At(i int) StackingB { return StackingB{s.List.Struct(i)} }

func (s StackingB_List) Set(i int, v StackingB) error { return s.List.SetStruct(i, v.Struct) }

func (s StackingB_List) String() string {
	str, _ := text.MarshalList(0x85257b30d6edf8c5, s.List)
	return str
}

// StackingB_Future is a wrapper for a StackingB promised by a client call.
type StackingB_Future struct{ *capnp.Future }

func (p StackingB_Future) Struct() (StackingB, error) {
	s, err := p.Future.Struct()
	return StackingB{s}, err
}

type CallSequence struct{ Client *capnp.Client }

// CallSequence_TypeID is the unique identifier for the type CallSequence.
const CallSequence_TypeID = 0xabaedf5f7817c820

func (c CallSequence) GetNumber(ctx context.Context, params func(CallSequence_getNumber_Params) error) (CallSequence_getNumber_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xabaedf5f7817c820,
			MethodID:      0,
			InterfaceName: "aircraft.capnp:CallSequence",
			MethodName:    "getNumber",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CallSequence_getNumber_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return CallSequence_getNumber_Results_Future{Future: ans.Future()}, release
}

func (c CallSequence) AddRef() CallSequence {
	return CallSequence{
		Client: c.Client.AddRef(),
	}
}

func (c CallSequence) Release() {
	c.Client.Release()
}

// A CallSequence_Server is a CallSequence with a local implementation.
type CallSequence_Server interface {
	GetNumber(context.Context, CallSequence_getNumber) error
}

// CallSequence_NewServer creates a new Server from an implementation of CallSequence_Server.
func CallSequence_NewServer(s CallSequence_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CallSequence_Methods(nil, s), s, c, policy)
}

// CallSequence_ServerToClient creates a new Client from an implementation of CallSequence_Server.
// The caller is responsible for calling Release on the returned Client.
func CallSequence_ServerToClient(s CallSequence_Server, policy *server.Policy) CallSequence {
	return CallSequence{Client: capnp.NewClient(CallSequence_NewServer(s, policy))}
}

// CallSequence_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CallSequence_Methods(methods []server.Method, s CallSequence_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xabaedf5f7817c820,
			MethodID:      0,
			InterfaceName: "aircraft.capnp:CallSequence",
			MethodName:    "getNumber",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetNumber(ctx, CallSequence_getNumber{call})
		},
	})

	return methods
}

// CallSequence_getNumber holds the state for a server call to CallSequence.getNumber.
// See server.Call for documentation.
type CallSequence_getNumber struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CallSequence_getNumber) Args() CallSequence_getNumber_Params {
	return CallSequence_getNumber_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c CallSequence_getNumber) AllocResults() (CallSequence_getNumber_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CallSequence_getNumber_Results{Struct: r}, err
}

type CallSequence_getNumber_Params struct{ capnp.Struct }

// CallSequence_getNumber_Params_TypeID is the unique identifier for the type CallSequence_getNumber_Params.
const CallSequence_getNumber_Params_TypeID = 0xf58782f48a121998

func NewCallSequence_getNumber_Params(s *capnp.Segment) (CallSequence_getNumber_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CallSequence_getNumber_Params{st}, err
}

func NewRootCallSequence_getNumber_Params(s *capnp.Segment) (CallSequence_getNumber_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CallSequence_getNumber_Params{st}, err
}

func ReadRootCallSequence_getNumber_Params(msg *capnp.Message) (CallSequence_getNumber_Params, error) {
	root, err := msg.Root()
	return CallSequence_getNumber_Params{root.Struct()}, err
}

func (s CallSequence_getNumber_Params) String() string {
	str, _ := text.Marshal(0xf58782f48a121998, s.Struct)
	return str
}

// CallSequence_getNumber_Params_List is a list of CallSequence_getNumber_Params.
type CallSequence_getNumber_Params_List struct{ capnp.List }

// NewCallSequence_getNumber_Params creates a new list of CallSequence_getNumber_Params.
func NewCallSequence_getNumber_Params_List(s *capnp.Segment, sz int32) (CallSequence_getNumber_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return CallSequence_getNumber_Params_List{l}, err
}

func (s CallSequence_getNumber_Params_List) At(i int) CallSequence_getNumber_Params {
	return CallSequence_getNumber_Params{s.List.Struct(i)}
}

func (s CallSequence_getNumber_Params_List) Set(i int, v CallSequence_getNumber_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CallSequence_getNumber_Params_List) String() string {
	str, _ := text.MarshalList(0xf58782f48a121998, s.List)
	return str
}

// CallSequence_getNumber_Params_Future is a wrapper for a CallSequence_getNumber_Params promised by a client call.
type CallSequence_getNumber_Params_Future struct{ *capnp.Future }

func (p CallSequence_getNumber_Params_Future) Struct() (CallSequence_getNumber_Params, error) {
	s, err := p.Future.Struct()
	return CallSequence_getNumber_Params{s}, err
}

type CallSequence_getNumber_Results struct{ capnp.Struct }

// CallSequence_getNumber_Results_TypeID is the unique identifier for the type CallSequence_getNumber_Results.
const CallSequence_getNumber_Results_TypeID = 0xa465f9502fd11e97

func NewCallSequence_getNumber_Results(s *capnp.Segment) (CallSequence_getNumber_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CallSequence_getNumber_Results{st}, err
}

func NewRootCallSequence_getNumber_Results(s *capnp.Segment) (CallSequence_getNumber_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CallSequence_getNumber_Results{st}, err
}

func ReadRootCallSequence_getNumber_Results(msg *capnp.Message) (CallSequence_getNumber_Results, error) {
	root, err := msg.Root()
	return CallSequence_getNumber_Results{root.Struct()}, err
}

func (s CallSequence_getNumber_Results) String() string {
	str, _ := text.Marshal(0xa465f9502fd11e97, s.Struct)
	return str
}

func (s CallSequence_getNumber_Results) N() uint32 {
	return s.Struct.Uint32(0)
}

func (s CallSequence_getNumber_Results) SetN(v uint32) {
	s.Struct.SetUint32(0, v)
}

// CallSequence_getNumber_Results_List is a list of CallSequence_getNumber_Results.
type CallSequence_getNumber_Results_List struct{ capnp.List }

// NewCallSequence_getNumber_Results creates a new list of CallSequence_getNumber_Results.
func NewCallSequence_getNumber_Results_List(s *capnp.Segment, sz int32) (CallSequence_getNumber_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return CallSequence_getNumber_Results_List{l}, err
}

func (s CallSequence_getNumber_Results_List) At(i int) CallSequence_getNumber_Results {
	return CallSequence_getNumber_Results{s.List.Struct(i)}
}

func (s CallSequence_getNumber_Results_List) Set(i int, v CallSequence_getNumber_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CallSequence_getNumber_Results_List) String() string {
	str, _ := text.MarshalList(0xa465f9502fd11e97, s.List)
	return str
}

// CallSequence_getNumber_Results_Future is a wrapper for a CallSequence_getNumber_Results promised by a client call.
type CallSequence_getNumber_Results_Future struct{ *capnp.Future }

func (p CallSequence_getNumber_Results_Future) Struct() (CallSequence_getNumber_Results, error) {
	s, err := p.Future.Struct()
	return CallSequence_getNumber_Results{s}, err
}

type Pipeliner struct{ Client *capnp.Client }

// Pipeliner_TypeID is the unique identifier for the type Pipeliner.
const Pipeliner_TypeID = 0xd6514008f0f84ebc

func (c Pipeliner) NewPipeliner(ctx context.Context, params func(Pipeliner_newPipeliner_Params) error) (Pipeliner_newPipeliner_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd6514008f0f84ebc,
			MethodID:      0,
			InterfaceName: "aircraft.capnp:Pipeliner",
			MethodName:    "newPipeliner",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Pipeliner_newPipeliner_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Pipeliner_newPipeliner_Results_Future{Future: ans.Future()}, release
}
func (c Pipeliner) GetNumber(ctx context.Context, params func(CallSequence_getNumber_Params) error) (CallSequence_getNumber_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xabaedf5f7817c820,
			MethodID:      0,
			InterfaceName: "aircraft.capnp:CallSequence",
			MethodName:    "getNumber",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CallSequence_getNumber_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return CallSequence_getNumber_Results_Future{Future: ans.Future()}, release
}

func (c Pipeliner) AddRef() Pipeliner {
	return Pipeliner{
		Client: c.Client.AddRef(),
	}
}

func (c Pipeliner) Release() {
	c.Client.Release()
}

// A Pipeliner_Server is a Pipeliner with a local implementation.
type Pipeliner_Server interface {
	NewPipeliner(context.Context, Pipeliner_newPipeliner) error

	GetNumber(context.Context, CallSequence_getNumber) error
}

// Pipeliner_NewServer creates a new Server from an implementation of Pipeliner_Server.
func Pipeliner_NewServer(s Pipeliner_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Pipeliner_Methods(nil, s), s, c, policy)
}

// Pipeliner_ServerToClient creates a new Client from an implementation of Pipeliner_Server.
// The caller is responsible for calling Release on the returned Client.
func Pipeliner_ServerToClient(s Pipeliner_Server, policy *server.Policy) Pipeliner {
	return Pipeliner{Client: capnp.NewClient(Pipeliner_NewServer(s, policy))}
}

// Pipeliner_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Pipeliner_Methods(methods []server.Method, s Pipeliner_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd6514008f0f84ebc,
			MethodID:      0,
			InterfaceName: "aircraft.capnp:Pipeliner",
			MethodName:    "newPipeliner",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewPipeliner(ctx, Pipeliner_newPipeliner{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xabaedf5f7817c820,
			MethodID:      0,
			InterfaceName: "aircraft.capnp:CallSequence",
			MethodName:    "getNumber",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetNumber(ctx, CallSequence_getNumber{call})
		},
	})

	return methods
}

// Pipeliner_newPipeliner holds the state for a server call to Pipeliner.newPipeliner.
// See server.Call for documentation.
type Pipeliner_newPipeliner struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Pipeliner_newPipeliner) Args() Pipeliner_newPipeliner_Params {
	return Pipeliner_newPipeliner_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Pipeliner_newPipeliner) AllocResults() (Pipeliner_newPipeliner_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Pipeliner_newPipeliner_Results{Struct: r}, err
}

type Pipeliner_newPipeliner_Params struct{ capnp.Struct }

// Pipeliner_newPipeliner_Params_TypeID is the unique identifier for the type Pipeliner_newPipeliner_Params.
const Pipeliner_newPipeliner_Params_TypeID = 0xbaa7b3b1ca91f833

func NewPipeliner_newPipeliner_Params(s *capnp.Segment) (Pipeliner_newPipeliner_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Pipeliner_newPipeliner_Params{st}, err
}

func NewRootPipeliner_newPipeliner_Params(s *capnp.Segment) (Pipeliner_newPipeliner_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Pipeliner_newPipeliner_Params{st}, err
}

func ReadRootPipeliner_newPipeliner_Params(msg *capnp.Message) (Pipeliner_newPipeliner_Params, error) {
	root, err := msg.Root()
	return Pipeliner_newPipeliner_Params{root.Struct()}, err
}

func (s Pipeliner_newPipeliner_Params) String() string {
	str, _ := text.Marshal(0xbaa7b3b1ca91f833, s.Struct)
	return str
}

// Pipeliner_newPipeliner_Params_List is a list of Pipeliner_newPipeliner_Params.
type Pipeliner_newPipeliner_Params_List struct{ capnp.List }

// NewPipeliner_newPipeliner_Params creates a new list of Pipeliner_newPipeliner_Params.
func NewPipeliner_newPipeliner_Params_List(s *capnp.Segment, sz int32) (Pipeliner_newPipeliner_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Pipeliner_newPipeliner_Params_List{l}, err
}

func (s Pipeliner_newPipeliner_Params_List) At(i int) Pipeliner_newPipeliner_Params {
	return Pipeliner_newPipeliner_Params{s.List.Struct(i)}
}

func (s Pipeliner_newPipeliner_Params_List) Set(i int, v Pipeliner_newPipeliner_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Pipeliner_newPipeliner_Params_List) String() string {
	str, _ := text.MarshalList(0xbaa7b3b1ca91f833, s.List)
	return str
}

// Pipeliner_newPipeliner_Params_Future is a wrapper for a Pipeliner_newPipeliner_Params promised by a client call.
type Pipeliner_newPipeliner_Params_Future struct{ *capnp.Future }

func (p Pipeliner_newPipeliner_Params_Future) Struct() (Pipeliner_newPipeliner_Params, error) {
	s, err := p.Future.Struct()
	return Pipeliner_newPipeliner_Params{s}, err
}

type Pipeliner_newPipeliner_Results struct{ capnp.Struct }

// Pipeliner_newPipeliner_Results_TypeID is the unique identifier for the type Pipeliner_newPipeliner_Results.
const Pipeliner_newPipeliner_Results_TypeID = 0xbbcdbf4b4ae501fa

func NewPipeliner_newPipeliner_Results(s *capnp.Segment) (Pipeliner_newPipeliner_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Pipeliner_newPipeliner_Results{st}, err
}

func NewRootPipeliner_newPipeliner_Results(s *capnp.Segment) (Pipeliner_newPipeliner_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Pipeliner_newPipeliner_Results{st}, err
}

func ReadRootPipeliner_newPipeliner_Results(msg *capnp.Message) (Pipeliner_newPipeliner_Results, error) {
	root, err := msg.Root()
	return Pipeliner_newPipeliner_Results{root.Struct()}, err
}

func (s Pipeliner_newPipeliner_Results) String() string {
	str, _ := text.Marshal(0xbbcdbf4b4ae501fa, s.Struct)
	return str
}

func (s Pipeliner_newPipeliner_Results) Extra() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Pipeliner_newPipeliner_Results) HasExtra() bool {
	return s.Struct.HasPtr(0)
}

func (s Pipeliner_newPipeliner_Results) SetExtra(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s Pipeliner_newPipeliner_Results) Pipeliner() Pipeliner {
	p, _ := s.Struct.Ptr(1)
	return Pipeliner{Client: p.Interface().Client()}
}

func (s Pipeliner_newPipeliner_Results) HasPipeliner() bool {
	return s.Struct.HasPtr(1)
}

func (s Pipeliner_newPipeliner_Results) SetPipeliner(v Pipeliner) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Pipeliner_newPipeliner_Results_List is a list of Pipeliner_newPipeliner_Results.
type Pipeliner_newPipeliner_Results_List struct{ capnp.List }

// NewPipeliner_newPipeliner_Results creates a new list of Pipeliner_newPipeliner_Results.
func NewPipeliner_newPipeliner_Results_List(s *capnp.Segment, sz int32) (Pipeliner_newPipeliner_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Pipeliner_newPipeliner_Results_List{l}, err
}

func (s Pipeliner_newPipeliner_Results_List) At(i int) Pipeliner_newPipeliner_Results {
	return Pipeliner_newPipeliner_Results{s.List.Struct(i)}
}

func (s Pipeliner_newPipeliner_Results_List) Set(i int, v Pipeliner_newPipeliner_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Pipeliner_newPipeliner_Results_List) String() string {
	str, _ := text.MarshalList(0xbbcdbf4b4ae501fa, s.List)
	return str
}

// Pipeliner_newPipeliner_Results_Future is a wrapper for a Pipeliner_newPipeliner_Results promised by a client call.
type Pipeliner_newPipeliner_Results_Future struct{ *capnp.Future }

func (p Pipeliner_newPipeliner_Results_Future) Struct() (Pipeliner_newPipeliner_Results, error) {
	s, err := p.Future.Struct()
	return Pipeliner_newPipeliner_Results{s}, err
}

func (p Pipeliner_newPipeliner_Results_Future) Extra() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p Pipeliner_newPipeliner_Results_Future) Pipeliner() Pipeliner {
	return Pipeliner{Client: p.Future.Field(1, nil).Client()}
}

type Defaults struct{ capnp.Struct }

// Defaults_TypeID is the unique identifier for the type Defaults.
const Defaults_TypeID = 0x97e38948c61f878d

func NewDefaults(s *capnp.Segment) (Defaults, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Defaults{st}, err
}

func NewRootDefaults(s *capnp.Segment) (Defaults, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Defaults{st}, err
}

func ReadRootDefaults(msg *capnp.Message) (Defaults, error) {
	root, err := msg.Root()
	return Defaults{root.Struct()}, err
}

func (s Defaults) String() string {
	str, _ := text.Marshal(0x97e38948c61f878d, s.Struct)
	return str
}

func (s Defaults) Text() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextDefault("foo"), err
}

func (s Defaults) HasText() bool {
	return s.Struct.HasPtr(0)
}

func (s Defaults) TextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytesDefault("foo"), err
}

func (s Defaults) SetText(v string) error {
	return s.Struct.SetNewText(0, v)
}

func (s Defaults) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x62, 0x61, 0x72})), err
}

func (s Defaults) HasData() bool {
	return s.Struct.HasPtr(1)
}

func (s Defaults) SetData(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

func (s Defaults) Float() float32 {
	return math.Float32frombits(s.Struct.Uint32(0) ^ 0x4048f5c3)
}

func (s Defaults) SetFloat(v float32) {
	s.Struct.SetUint32(0, math.Float32bits(v)^0x4048f5c3)
}

func (s Defaults) Int() int32 {
	return int32(s.Struct.Uint32(4) ^ 4294967173)
}

func (s Defaults) SetInt(v int32) {
	s.Struct.SetUint32(4, uint32(v)^4294967173)
}

func (s Defaults) Uint() uint32 {
	return s.Struct.Uint32(8) ^ 42
}

func (s Defaults) SetUint(v uint32) {
	s.Struct.SetUint32(8, v^42)
}

// Defaults_List is a list of Defaults.
type Defaults_List struct{ capnp.List }

// NewDefaults creates a new list of Defaults.
func NewDefaults_List(s *capnp.Segment, sz int32) (Defaults_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return Defaults_List{l}, err
}

func (s Defaults_List) At(i int) Defaults { return Defaults{s.List.Struct(i)} }

func (s Defaults_List) Set(i int, v Defaults) error { return s.List.SetStruct(i, v.Struct) }

func (s Defaults_List) String() string {
	str, _ := text.MarshalList(0x97e38948c61f878d, s.List)
	return str
}

// Defaults_Future is a wrapper for a Defaults promised by a client call.
type Defaults_Future struct{ *capnp.Future }

func (p Defaults_Future) Struct() (Defaults, error) {
	s, err := p.Future.Struct()
	return Defaults{s}, err
}

type BenchmarkA struct{ capnp.Struct }

// BenchmarkA_TypeID is the unique identifier for the type BenchmarkA.
const BenchmarkA_TypeID = 0xde2a1a960863c11c

func NewBenchmarkA(s *capnp.Segment) (BenchmarkA, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return BenchmarkA{st}, err
}

func NewRootBenchmarkA(s *capnp.Segment) (BenchmarkA, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return BenchmarkA{st}, err
}

func ReadRootBenchmarkA(msg *capnp.Message) (BenchmarkA, error) {
	root, err := msg.Root()
	return BenchmarkA{root.Struct()}, err
}

func (s BenchmarkA) String() string {
	str, _ := text.Marshal(0xde2a1a960863c11c, s.Struct)
	return str
}

func (s BenchmarkA) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s BenchmarkA) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s BenchmarkA) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s BenchmarkA) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s BenchmarkA) BirthDay() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s BenchmarkA) SetBirthDay(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s BenchmarkA) Phone() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s BenchmarkA) HasPhone() bool {
	return s.Struct.HasPtr(1)
}

func (s BenchmarkA) PhoneBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s BenchmarkA) SetPhone(v string) error {
	return s.Struct.SetText(1, v)
}

func (s BenchmarkA) Siblings() int32 {
	return int32(s.Struct.Uint32(8))
}

func (s BenchmarkA) SetSiblings(v int32) {
	s.Struct.SetUint32(8, uint32(v))
}

func (s BenchmarkA) Spouse() bool {
	return s.Struct.Bit(96)
}

func (s BenchmarkA) SetSpouse(v bool) {
	s.Struct.SetBit(96, v)
}

func (s BenchmarkA) Money() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s BenchmarkA) SetMoney(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

// BenchmarkA_List is a list of BenchmarkA.
type BenchmarkA_List struct{ capnp.List }

// NewBenchmarkA creates a new list of BenchmarkA.
func NewBenchmarkA_List(s *capnp.Segment, sz int32) (BenchmarkA_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2}, sz)
	return BenchmarkA_List{l}, err
}

func (s BenchmarkA_List) At(i int) BenchmarkA { return BenchmarkA{s.List.Struct(i)} }

func (s BenchmarkA_List) Set(i int, v BenchmarkA) error { return s.List.SetStruct(i, v.Struct) }

func (s BenchmarkA_List) String() string {
	str, _ := text.MarshalList(0xde2a1a960863c11c, s.List)
	return str
}

// BenchmarkA_Future is a wrapper for a BenchmarkA promised by a client call.
type BenchmarkA_Future struct{ *capnp.Future }

func (p BenchmarkA_Future) Struct() (BenchmarkA, error) {
	s, err := p.Future.Struct()
	return BenchmarkA{s}, err
}

type AllocBenchmark struct{ capnp.Struct }

// AllocBenchmark_TypeID is the unique identifier for the type AllocBenchmark.
const AllocBenchmark_TypeID = 0xecea3e9ebcbe5655

func NewAllocBenchmark(s *capnp.Segment) (AllocBenchmark, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AllocBenchmark{st}, err
}

func NewRootAllocBenchmark(s *capnp.Segment) (AllocBenchmark, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AllocBenchmark{st}, err
}

func ReadRootAllocBenchmark(msg *capnp.Message) (AllocBenchmark, error) {
	root, err := msg.Root()
	return AllocBenchmark{root.Struct()}, err
}

func (s AllocBenchmark) String() string {
	str, _ := text.Marshal(0xecea3e9ebcbe5655, s.Struct)
	return str
}

func (s AllocBenchmark) Fields() (AllocBenchmark_Field_List, error) {
	p, err := s.Struct.Ptr(0)
	return AllocBenchmark_Field_List{List: p.List()}, err
}

func (s AllocBenchmark) HasFields() bool {
	return s.Struct.HasPtr(0)
}

func (s AllocBenchmark) SetFields(v AllocBenchmark_Field_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewFields sets the fields field to a newly
// allocated AllocBenchmark_Field_List, preferring placement in s's segment.
func (s AllocBenchmark) NewFields(n int32) (AllocBenchmark_Field_List, error) {
	l, err := NewAllocBenchmark_Field_List(s.Struct.Segment(), n)
	if err != nil {
		return AllocBenchmark_Field_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// AllocBenchmark_List is a list of AllocBenchmark.
type AllocBenchmark_List struct{ capnp.List }

// NewAllocBenchmark creates a new list of AllocBenchmark.
func NewAllocBenchmark_List(s *capnp.Segment, sz int32) (AllocBenchmark_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AllocBenchmark_List{l}, err
}

func (s AllocBenchmark_List) At(i int) AllocBenchmark { return AllocBenchmark{s.List.Struct(i)} }

func (s AllocBenchmark_List) Set(i int, v AllocBenchmark) error { return s.List.SetStruct(i, v.Struct) }

func (s AllocBenchmark_List) String() string {
	str, _ := text.MarshalList(0xecea3e9ebcbe5655, s.List)
	return str
}

// AllocBenchmark_Future is a wrapper for a AllocBenchmark promised by a client call.
type AllocBenchmark_Future struct{ *capnp.Future }

func (p AllocBenchmark_Future) Struct() (AllocBenchmark, error) {
	s, err := p.Future.Struct()
	return AllocBenchmark{s}, err
}

type AllocBenchmark_Field struct{ capnp.Struct }

// AllocBenchmark_Field_TypeID is the unique identifier for the type AllocBenchmark_Field.
const AllocBenchmark_Field_TypeID = 0xb8fb64b8ed846ae6

func NewAllocBenchmark_Field(s *capnp.Segment) (AllocBenchmark_Field, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AllocBenchmark_Field{st}, err
}

func NewRootAllocBenchmark_Field(s *capnp.Segment) (AllocBenchmark_Field, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AllocBenchmark_Field{st}, err
}

func ReadRootAllocBenchmark_Field(msg *capnp.Message) (AllocBenchmark_Field, error) {
	root, err := msg.Root()
	return AllocBenchmark_Field{root.Struct()}, err
}

func (s AllocBenchmark_Field) String() string {
	str, _ := text.Marshal(0xb8fb64b8ed846ae6, s.Struct)
	return str
}

func (s AllocBenchmark_Field) StringValue() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s AllocBenchmark_Field) HasStringValue() bool {
	return s.Struct.HasPtr(0)
}

func (s AllocBenchmark_Field) StringValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s AllocBenchmark_Field) SetStringValue(v string) error {
	return s.Struct.SetText(0, v)
}

// AllocBenchmark_Field_List is a list of AllocBenchmark_Field.
type AllocBenchmark_Field_List struct{ capnp.List }

// NewAllocBenchmark_Field creates a new list of AllocBenchmark_Field.
func NewAllocBenchmark_Field_List(s *capnp.Segment, sz int32) (AllocBenchmark_Field_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AllocBenchmark_Field_List{l}, err
}

func (s AllocBenchmark_Field_List) At(i int) AllocBenchmark_Field {
	return AllocBenchmark_Field{s.List.Struct(i)}
}

func (s AllocBenchmark_Field_List) Set(i int, v AllocBenchmark_Field) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AllocBenchmark_Field_List) String() string {
	str, _ := text.MarshalList(0xb8fb64b8ed846ae6, s.List)
	return str
}

// AllocBenchmark_Field_Future is a wrapper for a AllocBenchmark_Field promised by a client call.
type AllocBenchmark_Field_Future struct{ *capnp.Future }

func (p AllocBenchmark_Field_Future) Struct() (AllocBenchmark_Field, error) {
	s, err := p.Future.Struct()
	return AllocBenchmark_Field{s}, err
}

const schema_832bcc6686a26d56 = "x\xda\xacZ}t\x14U\x96\xbf\xb7\xaa;\x15\x92t" +
	"\xba+\xaf\x80\x10\x12#\x11\x14\x1a\xc1\x900\x01\x99u" +
	"\x93`\xa2\xe0\x82\xa6h\x10ue\xa4\x92T\x92\xc6N" +
	"w\xd3]\x0d\x89\xcaAv`\x04\x8f\xec\xc8QGQ" +
	"\x99uX\xdc\xf1\x03\\\xf1cW\x18Dq\xc0\x81\xa8" +
	"\xab\xb2\xf8\x01\xab\xa8\xb8\xa8\xa0\xec\x883\xae\xa0`\xed" +
	"\xb9\xaf\xbb\xba*\x9dnQ\xce\xfeC\xaa\xdf\xef\xd6}" +
	"\xf7\xdd\xefw\x8b\xea\xf9\x9e\x06a\x82{\xee`\x00\xf5" +
	"\x84;\xcf\xdcu\xe2\xd8\xdb\xd57\x8fZ\x01\xaa\x17\xd1" +
	"\xbc\xba{\xfd\xaf:^\x1d\xfbKpI\x00lMA" +
	"\x1f[W@Ok\x0b\xea\x01\xcdy\xaf\xf8~1h" +
	"\xdb\xb4\xdb2h\xdd\"\x91l)\xd8\xcavp\xe2\xe7" +
	"\x0b>\x054\xdf}\xfa\xfb\xea\xf3\xea\xffx\x1b\xc8^" +
	"'-J\x00\xb5\xcf\x16\x96 \xdbUH\xc4;\x0a\x89" +
	"\xf3\x94\x9e\x86\xba\xa7^\x1b\xb12\x83s\x93$\x00\xb0" +
	"\xe3\x85}\xec4'>Y\xb8\x18\xd0\\\xff\x97\xe1\xef" +
	"<s\xc3\x90\xdbAV\x10R\x1c\xe7\x14\x09\x08\xc8\xae" +
	"-\"n\x13G\x8d>\xb2\xa3*\xf0\x8f {E\x9b" +
	"\x19 \xeb-Z\xcf\x96\x15\x11\xa7%E\x97\xb3\x87\xe9" +
	"\xc9\xbcsw\xe5\xcb\x8d7?\xf1\xeb\x0c9\x05\xa2Z" +
	"]t\x88\xad\xe5\xf4\xf7\x14\xd1\xcef\xec\xd5\xa3\xea\xda" +
	"=w\xf5\xa7\xe5\xba:]\xf4\x12s{$\x10\xcd\xa2" +
	"}\xbf\xd9Y\xf2x\xf5\xdd {]\xfdv\xff\xa8\xa8" +
	"\x8f\x1d#n\x81\xcf\x8aD\x0c\xb8<\x02\x02\x98\xabG" +
	"\xe4O<\xb1\xe4\x85\xbb\xb3\xe8\x89\xa1\xa7\x8fy<\xf4" +
	"4\xc8C\x07\xbb1<_\xa9\xff~\xfb=\xd9t:" +
	"\xc6S\x82\xecbN\xfc3N\xbc\xfa\xb6\xca\x97\xa7\xad" +
	"\xfa\xf8^\xd2\xa9\x90y2\xdd\xf3\x12\xeb&\xe2\xda\xa0" +
	"\xa7\x12\x01\xcdk7\x0a\x0f\xdc\xbb\xf6\xd9\xfb\xb3\x89\xb1" +
	"\xac\xb8\x8f\xad.\xa6\xa7U\xc5\xc4y\xdd\xcd\xefo\x19" +
	"\xf3\xce\xa4\x07\x9c\x06\xd8\\\\@\x06\xd8\xc2\x09v\xcf" +
	"9\xe4\xdez\xc1\xaf\x1f\x18\xa0\x82\xfd\xc5}\xec0q" +
	"\x0a|X,b\xe0\x8bb\xae\x82\xc4\xcf]\xbf2k" +
	"\xaa\xd7e\xfa\x15\xdf\xfc\xfd\xe2>v\x84o~\xb8\x98" +
	"lp\xef9o^\xd4rR\xdf\x00j9\"p\xe5" +
	"\xd76zc\xb4\xf9L/m\xde1\xad\xf3\xab\xef\xd9" +
	"\x0b\x8fd;I\xb7\xf7%\x96\xf0\xd2\xd3BN{\xee" +
	"\xee\xa1=7|\xf0\xc4\xe3\x03<e\x8d\xf7\x10[\xc7" +
	"\x09\xd7z/g\xbb\xe8\xc9<\xbed\xa6\x7f\xea\x9c7" +
	"\x1e\xcf\xa6\xfdM\xde2d\xcf\xf3\x17\xb6p\xce[>" +
	"\x7f2\xd2|\xe0\xb6M\xd9\xa48\xe2]\xcf\x8es\xda" +
	"c\x9cV\x8e\xb6\xbf\x13vo\xdc\x9c\x8d\xd6\xe3\xfb\x8a" +
	"\x0d\xf3\xd1\xd3`\x1f\xd1.\xad\xfb\xc5\xf2y\x93\xbf\xdc" +
	"L\xba\x123c\xb0\xd9\xb7\x97\xa9D\\;\xd37\x97" +
	"\xac\x1a\xef\x9bh~q\xe8\x9c\x7f\xcb\xe6\x03\xb5[d" +
	"\x01\xd9.\x99G\xa1L!\xbb\xe1_\xb6\x8ez\xb9{" +
	"\xec\xbf\x83*\xa3h\xee\x7f\xe8\xed\x9f\xdf{\xe4\xfc\xa3" +
	"0\x18%\xa4\x10(y\x0c\x90\xddSBF\xf8d\xc1" +
	"\xf2c\xcf\xb5\x7f\xf7\x1c\xc8\xe7\xa09\xe7\xea\xed\xdb~" +
	"\xfb\xb7G\xbfH\xa9\xe2xI\x152d<(JH" +
	"\xe4\xda\x13k\xfa6?\xfd\xfb\xad \x0f\xb3\x0c6\x82" +
	"-@p\x99\xdf\xe2\xe1+\xfe\xee\x85\xd7\xfe\x90D\x92" +
	"Ry\x18\xb7\xe50\xc6C\xbd\xf0\xab\xf5'\xf5\x03\x7f" +
	"\xca\xa6\x99^\xf6\x18[\xc6\xb7Y\xc2h\x9bq3/" +
	"~\xfe\xe3\xc7\xff~O\xb6@^\xc7\xfa\xd8\xa3\x9c\xf6" +
	"a\xcew\xeb7\x1f\xbcu\xc3\xa2\xf7^\xc9fJT" +
	"\xca\x90\xc9\x0aW\xbeB\x8c\xef\xdb\xf9h\xe1'r\xd3" +
	"\xab\xd9\x84\xb8D\xd9\xca\x9a9m#\xa7\xfd\xf0\xfc\xc9" +
	"\xf3?~\xea\xe9\xac\xb4\x09e=[\xc2i{9\xed" +
	"\xf4\x96C\xfb\x0f=\xd1\xf4\x1fYM\xb9V9\xca\x1e" +
	"&\xe2\xda\xdf)\xdc\x94\xbbo\xddQ\xdew\xf4\x81\xd7" +
	"\xb3\x89|zp\x092\xcf\x10\x9e(\x86\x10\xeb\xed\x07" +
	"V\x1e\xdf\xf0]\xdd\xdb\xd9\xc4\xb8x\xc8\xfd\xac\x91\xd3" +
	"^\xc2i\xb7]y\xe2\xcb\xfc\x06\xf5\xed\x0110o" +
	"H\x1f\x0brB}\xc8\xe5l\xcd\x90\xa1\x00\xe6\x9aI" +
	"\xbf\x9f\x1f~}\xdb\xbb$\xb3+S\xcb\xcb\x86\xf4\xb1" +
	"\xd5\xf4B\xed\xaa!\\\xe6\xd5\xaf\xec_\xbcr\xfe\x1d" +
	"\xfb\xb3\x89ql\xe8z\xf6\xf5Pz:>\x94\xc4`" +
	"\x8b\xbe\x0bv4\xbe\xf9~6\xf3\xc9\xa5\xeb\xd9\xb0R" +
	"\x1e\x04\xa5d\xbe\xf2\x1dm\xf9\xbf)\xf3\x1f\xcc\xd4\\" +
	"R\x8a\xd2\xbdlu)\x97\xa2\x94K\xb1n\xf6\xdcM" +
	"\x7fx\xa2\xe5`\xb6\x12\xf7\xfe\xb0\xc7\xd8\xe1a\xf4\xf4" +
	"\xd1\xb0\x7f\x054\xef\xaa~\xe4\xdb\xbf\xd9\xf7\xdb\x83\xd9" +
	"\xb4\xdc[V\x80lU\x19\x11\xaf(#\x917m\x97" +
	"\xe4\xb7\xde\\\xffQ\xb6\xe3=[\xb6\x95=\xcfi\xb7" +
	"pZ-P[\xb2\xeb\xe8\x9e\xac\xb4\x1f\x95\xdd\xcf\x8e" +
	"p\xda\xc3\x9c\xf6\xc4\xb5\x0f\xfd\xf2\xc1\xf5\xf9\x87\xb3\x09" +
	"\xe1\x1e^\x82l\xf0p\xae\x95\xe1D\xbc\xf9Os\x0e" +
	">\xe1\xbb\xf2p\xc6\xe9\x9aQr\x91W\x0e\x7f\x89M" +
	"\xe7\xd4\xcd\xc3)\xc4G\\tb\xf8\xa9\x15\xf3\x88\xb5" +
	"\xd0\xcf\xd8\xc3\xca\xb7\xb2\x11\xe5DXQN\x8ax/" +
	"\xef\xe4?-_\xba,S\x06\xee\x9b\x0b\xcb\xfb\xd8\x12" +
	"N\xdb\xcbi\xaf\xed*\xfb\xf3\x94\xcf\x97\x7f\x92\xedl" +
	"\x8d\x15\x07\xd8\xcc\x0az\x9a^\xc1K\xd8[\xdb7l" +
	"*[\xf8\xe9\x80\xd2\xb0\xb0\xa2\x8f-!\xc2@O\x85" +
	"\x88\x81\xe5\x15\xbc4\xa4\x93P\x7fK7\xa34\x81\xb6" +
	"\xaf\xb8\x9d-\xa3wj\x97T\xbcP\x00\x8eT\x94E" +
	"\x92\x11\xfe\xaf\xd88\xffP\xaa\x8f~\x92\xa4<\x7f\xde" +
	"\xd4A\x9b\xae:\x9e\x8dV\xf7\x1f`\x0b\xfd\xbcbp" +
	"\xda\xfb\x86\x95\xdc\xfe\xd7\x7f\xb8\xedk\x90\xcb\xad\x14\xb6" +
	"\xce\xcfS\xd8\xe9\x8e\xcb\xf74\xbf\xe7\xfe&#\xc3r" +
	"\xe7Z\xe5\xdf\xcb\xee\xe1\\\xd6\xf8\xc9m\x17\x94\x86." +
	"W\x9a\xcco\xb2\x86\x83\x7f/;\xc9i\xbf\xe6;\x1e" +
	"\x9c\xb1\xfd\xae\xd1\xc6?\x9f\xca\xe6\xb4\x17\x8f\xdd\xcb\x9a" +
	"\xc7r\xed\x8e\xad\x87q\xa6\x16\x8c\xb5\xc5\xb4\x0eC\x18" +
	"\xdf\xa6E\xc3\xd1)\x01Ck\xbb1\x18\xee\x9c\x0a\xd0" +
	"\x82\xa8\xbaD\x17\x80\x0b\x01dO\x15\x80\x9a/\xa2\xaa" +
	"\x08(\x85\x13\xdd\xe8\x02\x01]\xe4\x9d)\x0e\x98\xe2p" +
	"i}$\x116\xf4\x18\xbd\xeeK\xbf\xae\xf9\x01\xd4\xeb" +
	"ET\xbb\x04DT\xa8\xfc\xcaz\x0d\x80:_D5" +
	"$\xa0,\xa0\x82\x02\x80\x1c\xbc\x02@\xed\x12Q]." +
	"\xa0,\x0a\x0a\x8a\x00\xf2\xb2\xa9\x00\xea-\"\xaa\xf7\x09" +
	"\xe8\x8d\x07o\xd2\xd1\x0d\x02\xba\x01+\x17Gb\xedq" +
	",\x02\x01\x8b\x00M\xfa\x15\x0a\xc6\x0d\x00\xc0b\xc0\x16" +
	"\x119T\x0c\xb8\xb45h\x10b-cr9-\xbd" +
	"\x98\x92~Z$\xd4\x1e\xbfZ\x8f\xcd^\x1c\x99\xbd8" +
	"\xd2\x12J`<C\x0fSRz\x18)`}w\xaf" +
	"\x93\xa7\xcfN\xcb\x80\xfd\xb8[\xda\xbd:\x12l\x9f\x13" +
	"\x0eF\xc2I\xed\xe6\x8b\xae\"\xd3\xe4l\xc7\x94\x00\xa8" +
	"#ET\xab\x05\xf4\xe0\xf7fRC\xe3hu\xb4\x88" +
	"\xeaD\x01Q\x83<l\x85\xbc\x01\"7\xb7uE\xc6" +
	"\xebm]\x91\x91-ZL\xeb\x8e\x83S\xda2\xdbj" +
	"b0\x9cVT\xa6\xd1\x9a\xa5\xb6\xaeH\xf2\xa0n\x80" +
	"t\x9b\x8cV\xbb&\xcb~\x10d\xb7\xe4\xa5}\x1a\xb0" +
	"\x051\xa7\xe7\xcc\x92\"\x11#u:D\x17\"\xcac" +
	"\x16\xd8\xc7\xf0\xa5\x8c\x7f1\x1dm\xa2\x88j\x83\x80\xa6" +
	"67ht5\xe9\x1d\xe0\xd5\x12!\x03}v[\x07" +
	"\x88>\xae,\xf4\x03\xa06\x00\xca\xa2c=\xd6\xdc\x1d" +
	"5z!\x9b\x90m\x91p\xdc\x98\xc1=\x84x\xa6\x0d" +
	"\x97\xce\xf3\xdcp \xe3P9\x1f\xbd\x1fH\xf9\xc3\xe9" +
	"\x9f\xf2l\x9b\\\x15\xd6[\x8c\xd8\x0f\x86I\xd4\x88\xa1" +
	"\xcf\x0e\xc7\x0c\x81\xb3\xbb\xdc\x8c`\x1c\x8d\x9f\xe0r\xe9" +
	"6-\x87\xcb5\xe9\x1d\xa4\xd38\x97SI\xf2D\x94" +
	"\x97P<\xf6\xa4\xc2\x8c\x07$\xa2\xbc\x82\x16o\x15Q" +
	"\xbdC@\x14\x14\x14\x10\xe5\xd5\x14\xa4+ET\xef\xa6" +
	"xD\x05EDy\x0d\x9d\xf2\x8ed<\xca.A!" +
	"3\xcb\xf7\xd0\xdbw\x8a\xa8>(\xa0\xd7\xd0{\x8c\x94" +
	"\xb7\x81\x8cURG$\xe2m\xd7\x0c\x0d= \xa0\x87" +
	"\xd6\xca\xa4V-V\xd9\x11\x8ah\x06\x16\x80p\xbc\xe0" +
	"\x8f_Ok\x00\x94\x82a\x83r\xcbq\xd7\x0a\xd34" +
	"\x01\xbd\x09Z\xc8\x07A\xce\xf7g9\xde\xdc\x98\x16M" +
	"\x9a;\xd3\x10O\x01\xa8>\x11\xd5r\x01\xcd\xee`g" +
	"\x97qe\xc4\xc0\xa9\xfa,]\x0b\x85z+\xf9;\xe8" +
	"\xb3\xafe9\x8cc\x07\xd7,=\xce\xf5\x08\xb9\xac\x1d" +
	"I\x18\x03\xe2\xab\x9f\xdf5\x87\x13\xddI\xbf\xf3\xda\xc5" +
	"\x14\xd0\xedE\xc8\x1dN\x8d\xe9T\x91\xdasL\x95\x9d" +
	")\xacL\xea\xcc\x13\xce\xe4\x8c\xad\xe8\xb3\xaf\xe9\x19G" +
	"tY\x09[\x0b\x85\x02\xfa\xc2\x84\x1en\xd3\xc7w\xea" +
	"\xc6\x95\x89\xeeV=6r\x96^\xc9\x0f\xec<n\x89" +
	"}\\\x0c\x93Q0?\x8b\xe8\xa4\xb3\xa9Z\\\xcf\xb4" +
	"\x88\xdf~\x9b\xe7\x11\x94\xed\xeb6 \xcaYX\xa5e" +
	"\x93\xc2m\xba\x9d\x9f\xac\x9a\x8a\xd6\x8dN\x96g\x81 " +
	"\x0f\x92LK~\xc0X\xff4\x95\x19mW\x85\xf5&" +
	"\xcd\xd0f\x04\xc5\xf8O\x097g0\x17gI\xa4\xd3" +
	"\xa4\x88\xd1\xf5\x03\xe7n\xd5\xe2:\xfa\xec\x8bf\x8e$" +
	"F)*`\xc4\x12m\x95\xc6\xa5Z4\x9c#\xc7\x8c" +
	"\x14PZ\xa4\xb7\xd9\xd2\xa5\xfb\x92\x1c\xc9`\x96\xde\x19" +
	"\xd3\xe3\xf1`\x049\xcb\xd24\xcb\xb5$\xe3\xdd\"\xaa" +
	"\x0f\xd9N\xb5\x8ej\xc7}\"\xaa\x1b\x1c\xe5\xf9wD" +
	"\xf8\xa0\x88\xeas\x8e\xf2\xfc,i\xecI\x11\xd5W)" +
	"\x1d\xa0\x82.\x00y\x0fI\xb9SD\xf5\x0d\x01e\xb7" +
	"\xa0\xa0\x1b@~\x8d\x16w\x8b\xa8\xee\xb3u\x91\xbe\x17" +
	"$u!\xb6Vc!\x08X\x08\xe8m\xd5\x0d\xcd:" +
	"]a\xb2b\xd7GCZX\x8f\xdbgN7\xb1\xc9" +
	"3K\xbd\xdd\x09\xeb}\xa97\xden=\x0fp\x84d" +
	"\xc6%\x1f\xa0Bo\xc4 \xa3a\xa9\xb2\x1b\x169\xdd" +
	"\xb1T\xd9\x1d\x0bO\x90\xd4\xb0\x90F\xdaET\xa3V" +
	"\x82\x04\x90\xbb\xfd\xa9.\xc6 \x13i!\x14A@\x11" +
	"PjOD\xac\xde\xc5\x1b5b\x13\x06\xd6\x07Z\xae" +
	"\xf9\x81\xb2ay\xdau\xde\xf1\x9d\xb1(%\x06*\xa9" +
	"~\xca\x0c5vf\x90I\xbc\xb1\x94\x1a\xa6\xd8\xa9\xa1" +
	"\xb2#\x18\x8b\x1b8\x08\x04\x1c\x04X\x1f\xd7\xdb\"\xe1" +
	"v\xeb\xe7\x00\x055\x86B\x91\xb6\xa9z\xb8\xad\xab[" +
	"\x8b\xdd8\xfe\xb2\xa0\xa4\x87\xda3<\xb1\x15@-\x12" +
	"Q-\x15\xd0\x8c\x1b\xb1`\xb8\xf3j\x0d\xa4PB\x1f" +
	"\x90\x09\xadl\xd3\x12\x8c\xea\xa1`X\x8f\x8d\x0f\xeb\x8b" +
	"\xd3?F\xb6h^\xea]~,y:99\xf2b" +
	"\xbf\xd3[\x89q\x16\x80z\xa1\x88\xead\x01+\xf5\x1e" +
	"#\xa6a\x09\x08X\x02hFS\xcc\x00c(\xdb7" +
	"\xd9\x8cDdk\x9b\xaa\xd7\x0f\x04\xb6\xa3\xb8e\xedI" +
	"RN\x96\x99\xcc\xfd\xd9\x84\xf6\xdb&;K'\xc9\xd2" +
	"[\x9cM\xb6K\xdfPrd\xbb\xeb\xea\xe3zlQ" +
	"\xb2\xd7\xcf\xe2\x15\xa3\x054\x17kA#\x18\xee\\\x00" +
	"R\xa4\xd5\x11\xb5\xe9+{\x0e\xceS\xa5I\xb5\x93\xce" +
	"\x9cG3rG\x0e\xc5\xcf^\x1c\xf1\xb6\x84\x12\xf1\x8c" +
	"\x9cWe\xe7\xbc\xb4\xee\xd7U\xd9I\xcf\x8a\xf0t\xce" +
	"{\xc4\x11\xe1\x0f\xd3\xe2C\"\xaa\x1b\xad\x16\x08@~" +
	"\x94\xde\xde \xa2\xfa\xa4#\xe7m\"\xcaGDTw" +
	"\x9e9\x178\xbb9\x87\x993\x96%#\x96\xbe\x01y" +
	"Cq\xa3\xd6\xd2\xab\xfb\xcc\xb7\x9a\x16#\xf6S[\xcc" +
	"\xf4t,\x97\xadD\xad3\x83\xddT\xdbTK\xdb\x92" +
	"\xf7A\xf4\xd9\x1f\x01rX+\x1d\xdfV3G\xb5\xde" +
	"\x1a\x01\xa25\xf1\x93\xe5\x05\xc9Zoe\x04\xf0\xd2;" +
	"\x0d\xa8\xba\xd01\x96\x05\x18\xc8\x9fJ\x07\xefL w" +
	"\xf9\xb3]\xa1&\xe5\x0a\xcf\xd8\xae\xb0\x99\xf4\xb4\xd1*" +
	"\x7f\x0d\x19\xe5o\x9b\xc3\x15\xb6\xd0=\xf6\xb9\xa4\xd5e" +
	"\xb7\x98t\x85\x1d\xb4\xf8b\xb2Pz\xc3Zw:M" +
	"VvE\xba\xed\xa2\xd6\xaf=\xe4E/\xa6Q\x10Y" +
	"6\xafo\xd3\xc2\x97\x85z\xf9%\x96z\xc76-\xaa" +
	"\xb5\x05\xa9\x07\x06\x8b\xc4\xec\xd6z\x02Q]o\xa7\xb5" +
	"\xcc\x12h\x19\xaeQ\xaa\xad\xa9>\xfb Kg\x01i" +
	"A\xa45w\x93:0\xaf5\x09(\xb5u\xb7[\x87" +
	"\xf7j\xb1\xcex\xc6}}\x80\xed\xd2\x85\x08\x1b\x7fD" +
	"\xebr\x85#b\xad\xd6\xe5\xe1\x1aG\xc4Z\xad\xcb\xa3" +
	"W\xa4\x82\xf3\x19\xb2\xdd\xfc\xa4\xed\xfaY\xd9\x0a\xe3g" +
	"kl+\xf7\xb3\x9d\xd9\x1a\x8c\x19]M\x9aS\xfd\x95" +
	"\xd1\xaeH\xd8\xa6\x88\x07[C\xc1pg\x9c(R\xad" +
	"y}<\x1aI\xc4u\xcb\x86\x95\xdd\x91\xb0\xde\x9b\xd3" +
	"R\xbc\xfc\xf0\x06\xb8(}\xf0f:x\x83\x88\xea\x8c" +
	"T\xb9\xa7\xc5\xe9$e\x93\x88j\x0b\x9d\\L\x9e|" +
	"&Yc\x9a\x88\xeal\x01\xbd\xbd\xba\x16\xb3R\x10\xed" +
	"jta\x1e\x08\x98G\x09I\xeb\xb5\x9es\xa6\x10~" +
	"qJ\xdf\xa0\x7fl\x0aq^\xb3\xb2\xa5\x90\xb9\xf51" +
	"-Z\xd3SsVw\xb8\x8c\xec8\x80\xf9e\xe2\x84" +
	"\xba\xb3\xf7\xf2,\x17\x87\xb3\xc8\xa1\xe9Ou9:\xf3" +
	"\xc6\xd4o\xab\x0b\xb5\xe6B\xce\xb9\x99=\x17\xd2\xfdv" +
	"\x1f\xea\x11N\x9b\x03;Q\x8fx\xcaL\xb5\xa2Uv" +
	"+\xea]\x14\x09\xb6C\x9e\xb7uR\xed$\xf4\xd9_" +
	"\x1cR\xd5F\xab\xad\xa9&Y\xad\xd1{\xaa\xdatL" +
	"\xa8C\x9f=\x85\xce\xa1\xe5\xc6\xfa`,\x1a\x89q\xa5" +
	"\x94'\xdd\xce\xcf\xbb\xa9\xe6*\x00\x14\xe4K\xe8\x8f(" +
	"\xff\x8c\xfe\xb8\xe4q\xf4\xc7-\x8f\xa2?yr\x85\x1f" +
	"\xc0\x1b\x8e\x84uiA\xc7\x8dRH\xeb\x91\xe2\x1d\x11" +
	")\x94X$\xb5w,\xf6\x1az\xdc\x18\xa00n\x8e" +
	"\xd9zO\xca\x0f\x1daQ\xe5\x0c\x8bTB\x98^\x95" +
	"\x0a\x8b\xf9\x14\x16\xa9d>\x8f\x0cvMr\x06\"\x19" +
	"\xe9y\x05J!\xdbr\xa9tT\x1f\x8a\x1b\x8e\xd53" +
	"\xe4\xaa\xb9Ig\x8e\x86\xc4D\xfc\xac<\xda9G\xf4" +
	"\xe5\x1a'4iF\xb2\x90e\xcc\xaf|\x00\xbe\xe4\xec" +
	"j`\x1aI*kg\xda\xbf\xd8L\xb7\x1f 0\xcd" +
	"-b`\xb6\xdb\xe1bLu\x97\x01\x04f\x10p\x8d" +
	"[\xc0\x0a\xe1\xb4\x99\xcc\xa3l\x8e\xbb\x0a \xd0B\xc8" +
	"\xf5\x84\x88\xa7\xccd2e\xd7rd6!\xf3\x09q" +
	"}g&/\x83l\x1eG\xae!\xa4\x9d\x10\xf7\xb7f" +
	"2\xad2\x8d#\xd7\x13\xd2EH\xdeI\xd3\xa5`\x1e" +
	"\x00\xd392\x9f\x90\x10!\xd2\x093_\xe1\x03\xef " +
	"\x97\xad\x9d\x90(!\xf9\xdf\xd0>\xf9\x00\xac\x9b\xbf\xd3" +
	"E\x88A\xc8\xa0\xff\xa5}\x06\x01\xb0\x85\x1c\x09\x11\xd2" +
	"CH\xc1\xd7\xb4O\x01\x00Kp$J\xc8-\x84\x14" +
	"\xfe\x95\xf6)\x04`\xbd|\x1f\x83\x90[\x09)\xfa\x8b" +
	"\xd9\xa0`\x11\x00[\xc2\xd5\xd6C\xc8rR\x9b\xe7+" +
	"SA\x0f\x00[\xc6\x81[\x08XI@\xf1qS\xc1" +
	"b\x00\xb6\x82\x03\xb7\x12p\x07\x01\xde/M\x05\xbd\x00" +
	"l\x95{\x0a@`9\x01\x0f\x11\xe0\xfb\xb3\xa9\x90\x0d" +
	"\xd9:\x0e\xdcG\xc03\x04\xc8\xffc*(\x03\xb0\xcd" +
	"\x1c\xd8H\xc0n\x02J\x8e\x99\x0a\x96\x00\xb0]\x1cx" +
	"\x91\x80\xf7\x08`_\x98\x0a2\x00\xb6\x9f\x03\xfb\x08\xf8" +
	"\x92\x00\xe5sSA\x05\x80\x1ds\xd7\x00\x04>#\xc0" +
	"\x95'\xa0g\xf0QS\xc1\xc1\x00\x0c\xf3\xe8\x8dS\x04" +
	"\x94\x120\xe4\x88\xa9\xe0\x10\x006\x98\x03\xbe<\x11\x03" +
	"\x17\x120\xf43S\xc1\xa1\x00l\x0c\x07F\x12\xd0@" +
	"@\xe9\xa7\xa6\x82\xa5\x00\xec\x92<\xdac2\x01\xb3\x09" +
	"(\xff\xc4Tp\x18\xb9X\x1e\xa9d\x06\x01]\x04T" +
	"\x1c6\x15,#\xcb\xe7M%\xcb\x13p\x07\x01\xe7\xfc" +
	"\xb7\xa9\xe0p\xd2\x15g\xb5\x9c\x80;\x09\xa8\xfc\xd8T" +
	"\xb0\x1c\x80\xad\xe6\xc0J\x02\xee&\xe0\xdcC\xa6\x82\x15" +
	"\x00lM^+@\xe0N\x026\x120\xe2#S\xc1" +
	"s\x00\xd8\xa3yW\x00\x04\x1e!\xe0\x19\x02\xaa>4" +
	"\x15\xac$\xed\xe6]\x07\x10x\x92\x80m\x04\x9c\xf7\x81" +
	"\xa9\xe0\xb9\x00lK\xde,\x80\xc0s\x04\xec\xcc\x13\xb0" +
	"b\xe4A\xf2\xa0\x11\x00l\x07\x97w\x1b!\xbb\xe9\x95" +
	"Q\xef\x9b\x0aV\x91A\xf8\x09_$\xe0U\x02\xce\x7f" +
	"\xcfT\xf0<\x00\xb6\x87\x03;\x09x\x83\x80\x0b\xfe\xcb" +
	"Tp$\x00{-\x8f\x9cq7\x01\xfb\x08\x18}\xc0" +
	"Tp\x14\x00{\x93\xcb\xfb\x06\x01_\x100f\xbf\xa9" +
	"\xe0\xf9\x00\xec\x08\x07>#\xc0%\x09\xe8\x19\xf6\xae\xa9" +
	"\xe0\x05dB\x89\xa4:E@)\x01e\xef\x98\x0a\x8e" +
	"&\x13r\xc0'\x91\x09\x09\x18\xfe\xb6\xa9\xe0\x182!" +
	"\x07F\x12\xd0@\x80\xff-\x13\x1d\x9f\xf6\xd9%R\x15" +
	"\x08\x9e\xb1\xfbL\x05/\x04`\xa3$:\xc4\xb9i>" +
	"\x17\xfe\xa7\xa9\xe08\xcegJ?>\xe3\xf6\x9a\x0a\x8e" +
	"'W\xe0\xc0d\x02\x9a\x08\x18\xff\xa6\xa9\xe0E\x00\xac" +
	"Q\"\xdd6\x100\x83\x80\x8b\xde0\x15\xac\x06`\xd3" +
	"\xb9HM\x04\xb4\x10P\xfd\xba\xa9\xe0\x04J\\R\x8c" +
	"\x9c\x87\x80k\xa4te\x13o\xba\x09}\xf6\x97?\xab" +
	"\x80\xd5ML\x8f\x84:jk\xb0\x00\x04,\x00\x94\x82" +
	"u\x13\xad\x86M\x0a\xd6\xd6X\xad\x99\x14\x9cPgu" +
	"Hbp2\x0a \xa0\x00(%\xea&Z\xc3\x12)" +
	"Q[c\xcd?\xa5\xc4\x84:\x94@@\x09PLL" +
	"\xb6:(ok$\x12\xb2\xda;\xe7<\x1c\xbd\xad\xa1" +
	"H\xab5+\xa8\xef\xa8\x9b\xe8\x98\xe1YS\xae\x8e\xda" +
	"\x1a\xc7jAj5\xd8\x8f\xd6m\xad\xf6\xa3uY\xab" +
	"\x13\xea\x1c\xabbr\xb528\xd9\xb1(\xa4H\x13\xfd" +
	"\xd8\x0e\xb2V\xfb\xb1\xcd\xb7V\xfb\xb1\x95Rl\x13N" +
	"\xb6y\xc9E\xefM\xfdf\x93N\xa3\x14\x03.%\xd4" +
	"A\x90\x8b\xae\xf2&\xea|\x07\x94\xb8\xe4\xba\x86>\xfb" +
	"\xffyd\xd4J\xe8?\x1a\xcd\x18\x13\xdad\x00\x19(" +
	"1\x89\xa5\x06\xa5 F\xc2\xe8\xb3\xff\xe7L\x0a\xe63" +
	"\xc8V-\x0e\x98\xa5s\\\xaa%\x1b\xa1\x8ck\x9c\x97" +
	"\x0c\xff\xff\xd0wq},\xd2\xdb\x1c\xdf83\xbf_" +
	"%\x89\xb4L\"\xa7\xa6\xf8'\xd1H$\xe4\xd0Q\xea" +
	"\x93\xe8\xd2\xd4\xab\xd6\xb2'\xb5L\x1e\xecXN\xf5>" +
	"Rg,\x9ac\x98_O\xcb\xf6\xa5\xb6?N\xae\xa4" +
	"\x85{[\x8cXz \xa7\x85{\xf9\xc8\x1b\xd0\xc0\x12" +
	"\x17\x02\xd2\xeaR-\xcco\x1bX\xe2\x12\x92+Dw" +
	"\xa9\x16\xd5Z\xa12\x18\x0a\x1a\xbdX\xe2\x12-$\xb3" +
	"\xa9\xb6&\x98\x95\xfc\xe6\xc8\xe7\x03\xf6\x7f?\xc2\x9a\xca" +
	"\xcb\x82z\xa8=W\x0b\xdfA\xa0cd\x95~3G" +
	"\x0b\x7f\xa5\x1e7\xf4\xd8\x84K5q\xc0\xc0\xdeo\xb3" +
	"\xf5\xc6\x8dX\xce\xcb\xee\x19>\xc9d\x0eI\x85\xccQ" +
	"6j?\xe6\x1a^\xe5\xf8X\x94c\x1e5\xf0\xcb\xc1" +
	"\xdc\xd9z\xdc\xb8T\x8bb\xe6\xd9\xaeK\x0d\xfb&\x0b" +
	"h\x86\xf5\xb81S3b \x06{\x06\x04\xf6\x99>" +
	"N\xa4?\xca\xa0\xf6\x03\xdfT\x1d\x02\xff_\x00\x00\x00" +
	"\xff\xff\x04gOJ"

func init() {
	schemas.Register(schema_832bcc6686a26d56,
		0x85257b30d6edf8c5,
		0x8748bc095e10cb5d,
		0x87c33f2330feb3d8,
		0x8821cdb23640783a,
		0x8a165fb4d71bf3a2,
		0x8e5322c1e9282534,
		0x8fae7b41c61fc890,
		0x93c99951eacc72ff,
		0x9430ab12c496d40c,
		0x94bf7df83408218d,
		0x95befe3f14606e6b,
		0x97e38948c61f878d,
		0x9ab599979b02ac59,
		0x9b37d729b9dd7b9d,
		0x9b8f27ba05e255c8,
		0x9d3032ff86043b75,
		0xa465f9502fd11e97,
		0xa8bf13fef2674866,
		0xabaedf5f7817c820,
		0xabd055422a4d7df1,
		0xad87da456fb0ebb9,
		0xb1ac056ed7647011,
		0xb1f0385d845e367f,
		0xb61ee2ecff34ca73,
		0xb72b6dc625baa6a4,
		0xb8fb64b8ed846ae6,
		0xbaa7b3b1ca91f833,
		0xbbcdbf4b4ae501fa,
		0xc7da65f9a2f20ba2,
		0xc95babe3bd394d2d,
		0xcbdc765fd5dff7ba,
		0xcc4411e60ba9c498,
		0xccb3b2e3603826e0,
		0xce44aee2d9e25049,
		0xcf9beaca1cc180c8,
		0xd636fba4f188dabe,
		0xd6514008f0f84ebc,
		0xd8bccf6e60a73791,
		0xd98c608877d9cb8d,
		0xddd1416669fb7613,
		0xde2a1a960863c11c,
		0xde50aebbad57549d,
		0xde9ed43cfaa83093,
		0xe1a2d1d51107bead,
		0xe1c9eac512335361,
		0xe508a29c83a059f8,
		0xe54e10aede55c7b1,
		0xe55d85fc1bf82f21,
		0xe5817f849ff906dc,
		0xe684eb3aef1a6859,
		0xe7711aada4bed56b,
		0xea26e9973bd6a0d9,
		0xecea3e9ebcbe5655,
		0xf14fad09425d081c,
		0xf58782f48a121998,
		0xf705dc45c94766fd,
		0xf7ff4414476c186a,
		0xfca3742893be4cde)
}

var x_832bcc6686a26d56 = []byte{
	0, 0, 0, 0, 2, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 0, 0,
	223, 7, 8, 27, 0, 0, 0, 0,
	0, 0, 0, 0, 4, 0, 0, 0,
	1, 0, 0, 0, 23, 0, 0, 0,
	8, 0, 0, 0, 1, 0, 0, 0,
	223, 7, 8, 27, 0, 0, 0, 0,
	223, 7, 8, 28, 0, 0, 0, 0,
	0, 0, 0, 0, 3, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	42, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	42, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
}
