// Code generated by capnpc-go. DO NOT EDIT.

package testcapnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	stream "capnproto.org/go/capnp/v3/std/capnp/stream"
	context "context"
)

type PingPong struct{ Client *capnp.Client }

// PingPong_TypeID is the unique identifier for the type PingPong.
const PingPong_TypeID = 0xf004c474c2f8ee7a

func (c PingPong) EchoNum(ctx context.Context, params func(PingPong_echoNum_Params) error) (PingPong_echoNum_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf004c474c2f8ee7a,
			MethodID:      0,
			InterfaceName: "test.capnp:PingPong",
			MethodName:    "echoNum",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(PingPong_echoNum_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return PingPong_echoNum_Results_Future{Future: ans.Future()}, release
}

func (c PingPong) AddRef() PingPong {
	return PingPong{
		Client: c.Client.AddRef(),
	}
}

func (c PingPong) Release() {
	c.Client.Release()
}

// A PingPong_Server is a PingPong with a local implementation.
type PingPong_Server interface {
	EchoNum(context.Context, PingPong_echoNum) error
}

// PingPong_NewServer creates a new Server from an implementation of PingPong_Server.
func PingPong_NewServer(s PingPong_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PingPong_Methods(nil, s), s, c, policy)
}

// PingPong_ServerToClient creates a new Client from an implementation of PingPong_Server.
// The caller is responsible for calling Release on the returned Client.
func PingPong_ServerToClient(s PingPong_Server, policy *server.Policy) PingPong {
	return PingPong{Client: capnp.NewClient(PingPong_NewServer(s, policy))}
}

// PingPong_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PingPong_Methods(methods []server.Method, s PingPong_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf004c474c2f8ee7a,
			MethodID:      0,
			InterfaceName: "test.capnp:PingPong",
			MethodName:    "echoNum",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.EchoNum(ctx, PingPong_echoNum{call})
		},
	})

	return methods
}

// PingPong_echoNum holds the state for a server call to PingPong.echoNum.
// See server.Call for documentation.
type PingPong_echoNum struct {
	*server.Call
}

// Args returns the call's arguments.
func (c PingPong_echoNum) Args() PingPong_echoNum_Params {
	return PingPong_echoNum_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c PingPong_echoNum) AllocResults() (PingPong_echoNum_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PingPong_echoNum_Results{Struct: r}, err
}

type PingPong_echoNum_Params struct{ capnp.Struct }

// PingPong_echoNum_Params_TypeID is the unique identifier for the type PingPong_echoNum_Params.
const PingPong_echoNum_Params_TypeID = 0xd797e0a99edf0921

func NewPingPong_echoNum_Params(s *capnp.Segment) (PingPong_echoNum_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PingPong_echoNum_Params{st}, err
}

func NewRootPingPong_echoNum_Params(s *capnp.Segment) (PingPong_echoNum_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PingPong_echoNum_Params{st}, err
}

func ReadRootPingPong_echoNum_Params(msg *capnp.Message) (PingPong_echoNum_Params, error) {
	root, err := msg.Root()
	return PingPong_echoNum_Params{root.Struct()}, err
}

func (s PingPong_echoNum_Params) String() string {
	str, _ := text.Marshal(0xd797e0a99edf0921, s.Struct)
	return str
}

func (s PingPong_echoNum_Params) N() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s PingPong_echoNum_Params) SetN(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// PingPong_echoNum_Params_List is a list of PingPong_echoNum_Params.
type PingPong_echoNum_Params_List struct{ capnp.List }

// NewPingPong_echoNum_Params creates a new list of PingPong_echoNum_Params.
func NewPingPong_echoNum_Params_List(s *capnp.Segment, sz int32) (PingPong_echoNum_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return PingPong_echoNum_Params_List{l}, err
}

func (s PingPong_echoNum_Params_List) At(i int) PingPong_echoNum_Params {
	return PingPong_echoNum_Params{s.List.Struct(i)}
}

func (s PingPong_echoNum_Params_List) Set(i int, v PingPong_echoNum_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PingPong_echoNum_Params_List) String() string {
	str, _ := text.MarshalList(0xd797e0a99edf0921, s.List)
	return str
}

// PingPong_echoNum_Params_Future is a wrapper for a PingPong_echoNum_Params promised by a client call.
type PingPong_echoNum_Params_Future struct{ *capnp.Future }

func (p PingPong_echoNum_Params_Future) Struct() (PingPong_echoNum_Params, error) {
	s, err := p.Future.Struct()
	return PingPong_echoNum_Params{s}, err
}

type PingPong_echoNum_Results struct{ capnp.Struct }

// PingPong_echoNum_Results_TypeID is the unique identifier for the type PingPong_echoNum_Results.
const PingPong_echoNum_Results_TypeID = 0x85ddfd96db252600

func NewPingPong_echoNum_Results(s *capnp.Segment) (PingPong_echoNum_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PingPong_echoNum_Results{st}, err
}

func NewRootPingPong_echoNum_Results(s *capnp.Segment) (PingPong_echoNum_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PingPong_echoNum_Results{st}, err
}

func ReadRootPingPong_echoNum_Results(msg *capnp.Message) (PingPong_echoNum_Results, error) {
	root, err := msg.Root()
	return PingPong_echoNum_Results{root.Struct()}, err
}

func (s PingPong_echoNum_Results) String() string {
	str, _ := text.Marshal(0x85ddfd96db252600, s.Struct)
	return str
}

func (s PingPong_echoNum_Results) N() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s PingPong_echoNum_Results) SetN(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// PingPong_echoNum_Results_List is a list of PingPong_echoNum_Results.
type PingPong_echoNum_Results_List struct{ capnp.List }

// NewPingPong_echoNum_Results creates a new list of PingPong_echoNum_Results.
func NewPingPong_echoNum_Results_List(s *capnp.Segment, sz int32) (PingPong_echoNum_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return PingPong_echoNum_Results_List{l}, err
}

func (s PingPong_echoNum_Results_List) At(i int) PingPong_echoNum_Results {
	return PingPong_echoNum_Results{s.List.Struct(i)}
}

func (s PingPong_echoNum_Results_List) Set(i int, v PingPong_echoNum_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PingPong_echoNum_Results_List) String() string {
	str, _ := text.MarshalList(0x85ddfd96db252600, s.List)
	return str
}

// PingPong_echoNum_Results_Future is a wrapper for a PingPong_echoNum_Results promised by a client call.
type PingPong_echoNum_Results_Future struct{ *capnp.Future }

func (p PingPong_echoNum_Results_Future) Struct() (PingPong_echoNum_Results, error) {
	s, err := p.Future.Struct()
	return PingPong_echoNum_Results{s}, err
}

type StreamTest struct{ Client *capnp.Client }

// StreamTest_TypeID is the unique identifier for the type StreamTest.
const StreamTest_TypeID = 0xbb3ca85b01eea465

func (c StreamTest) Push(ctx context.Context, params func(StreamTest_push_Params) error) (stream.StreamResult_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbb3ca85b01eea465,
			MethodID:      0,
			InterfaceName: "test.capnp:StreamTest",
			MethodName:    "push",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(StreamTest_push_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return stream.StreamResult_Future{Future: ans.Future()}, release
}

func (c StreamTest) AddRef() StreamTest {
	return StreamTest{
		Client: c.Client.AddRef(),
	}
}

func (c StreamTest) Release() {
	c.Client.Release()
}

// A StreamTest_Server is a StreamTest with a local implementation.
type StreamTest_Server interface {
	Push(context.Context, StreamTest_push) error
}

// StreamTest_NewServer creates a new Server from an implementation of StreamTest_Server.
func StreamTest_NewServer(s StreamTest_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(StreamTest_Methods(nil, s), s, c, policy)
}

// StreamTest_ServerToClient creates a new Client from an implementation of StreamTest_Server.
// The caller is responsible for calling Release on the returned Client.
func StreamTest_ServerToClient(s StreamTest_Server, policy *server.Policy) StreamTest {
	return StreamTest{Client: capnp.NewClient(StreamTest_NewServer(s, policy))}
}

// StreamTest_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func StreamTest_Methods(methods []server.Method, s StreamTest_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbb3ca85b01eea465,
			MethodID:      0,
			InterfaceName: "test.capnp:StreamTest",
			MethodName:    "push",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Push(ctx, StreamTest_push{call})
		},
	})

	return methods
}

// StreamTest_push holds the state for a server call to StreamTest.push.
// See server.Call for documentation.
type StreamTest_push struct {
	*server.Call
}

// Args returns the call's arguments.
func (c StreamTest_push) Args() StreamTest_push_Params {
	return StreamTest_push_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c StreamTest_push) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult{Struct: r}, err
}

type StreamTest_push_Params struct{ capnp.Struct }

// StreamTest_push_Params_TypeID is the unique identifier for the type StreamTest_push_Params.
const StreamTest_push_Params_TypeID = 0xf838dca6c8721bdb

func NewStreamTest_push_Params(s *capnp.Segment) (StreamTest_push_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StreamTest_push_Params{st}, err
}

func NewRootStreamTest_push_Params(s *capnp.Segment) (StreamTest_push_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StreamTest_push_Params{st}, err
}

func ReadRootStreamTest_push_Params(msg *capnp.Message) (StreamTest_push_Params, error) {
	root, err := msg.Root()
	return StreamTest_push_Params{root.Struct()}, err
}

func (s StreamTest_push_Params) String() string {
	str, _ := text.Marshal(0xf838dca6c8721bdb, s.Struct)
	return str
}

func (s StreamTest_push_Params) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s StreamTest_push_Params) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s StreamTest_push_Params) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// StreamTest_push_Params_List is a list of StreamTest_push_Params.
type StreamTest_push_Params_List struct{ capnp.List }

// NewStreamTest_push_Params creates a new list of StreamTest_push_Params.
func NewStreamTest_push_Params_List(s *capnp.Segment, sz int32) (StreamTest_push_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return StreamTest_push_Params_List{l}, err
}

func (s StreamTest_push_Params_List) At(i int) StreamTest_push_Params {
	return StreamTest_push_Params{s.List.Struct(i)}
}

func (s StreamTest_push_Params_List) Set(i int, v StreamTest_push_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s StreamTest_push_Params_List) String() string {
	str, _ := text.MarshalList(0xf838dca6c8721bdb, s.List)
	return str
}

// StreamTest_push_Params_Future is a wrapper for a StreamTest_push_Params promised by a client call.
type StreamTest_push_Params_Future struct{ *capnp.Future }

func (p StreamTest_push_Params_Future) Struct() (StreamTest_push_Params, error) {
	s, err := p.Future.Struct()
	return StreamTest_push_Params{s}, err
}

type CapArgsTest struct{ Client *capnp.Client }

// CapArgsTest_TypeID is the unique identifier for the type CapArgsTest.
const CapArgsTest_TypeID = 0xb86bce7f916a10cc

func (c CapArgsTest) Call(ctx context.Context, params func(CapArgsTest_call_Params) error) (CapArgsTest_call_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb86bce7f916a10cc,
			MethodID:      0,
			InterfaceName: "test.capnp:CapArgsTest",
			MethodName:    "call",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapArgsTest_call_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return CapArgsTest_call_Results_Future{Future: ans.Future()}, release
}

func (c CapArgsTest) AddRef() CapArgsTest {
	return CapArgsTest{
		Client: c.Client.AddRef(),
	}
}

func (c CapArgsTest) Release() {
	c.Client.Release()
}

// A CapArgsTest_Server is a CapArgsTest with a local implementation.
type CapArgsTest_Server interface {
	Call(context.Context, CapArgsTest_call) error
}

// CapArgsTest_NewServer creates a new Server from an implementation of CapArgsTest_Server.
func CapArgsTest_NewServer(s CapArgsTest_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapArgsTest_Methods(nil, s), s, c, policy)
}

// CapArgsTest_ServerToClient creates a new Client from an implementation of CapArgsTest_Server.
// The caller is responsible for calling Release on the returned Client.
func CapArgsTest_ServerToClient(s CapArgsTest_Server, policy *server.Policy) CapArgsTest {
	return CapArgsTest{Client: capnp.NewClient(CapArgsTest_NewServer(s, policy))}
}

// CapArgsTest_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapArgsTest_Methods(methods []server.Method, s CapArgsTest_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb86bce7f916a10cc,
			MethodID:      0,
			InterfaceName: "test.capnp:CapArgsTest",
			MethodName:    "call",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Call(ctx, CapArgsTest_call{call})
		},
	})

	return methods
}

// CapArgsTest_call holds the state for a server call to CapArgsTest.call.
// See server.Call for documentation.
type CapArgsTest_call struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapArgsTest_call) Args() CapArgsTest_call_Params {
	return CapArgsTest_call_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c CapArgsTest_call) AllocResults() (CapArgsTest_call_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapArgsTest_call_Results{Struct: r}, err
}

type CapArgsTest_call_Params struct{ capnp.Struct }

// CapArgsTest_call_Params_TypeID is the unique identifier for the type CapArgsTest_call_Params.
const CapArgsTest_call_Params_TypeID = 0x80087e4e698768a2

func NewCapArgsTest_call_Params(s *capnp.Segment) (CapArgsTest_call_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapArgsTest_call_Params{st}, err
}

func NewRootCapArgsTest_call_Params(s *capnp.Segment) (CapArgsTest_call_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapArgsTest_call_Params{st}, err
}

func ReadRootCapArgsTest_call_Params(msg *capnp.Message) (CapArgsTest_call_Params, error) {
	root, err := msg.Root()
	return CapArgsTest_call_Params{root.Struct()}, err
}

func (s CapArgsTest_call_Params) String() string {
	str, _ := text.Marshal(0x80087e4e698768a2, s.Struct)
	return str
}

func (s CapArgsTest_call_Params) Cap() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s CapArgsTest_call_Params) HasCap() bool {
	return s.Struct.HasPtr(0)
}

func (s CapArgsTest_call_Params) SetCap(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// CapArgsTest_call_Params_List is a list of CapArgsTest_call_Params.
type CapArgsTest_call_Params_List struct{ capnp.List }

// NewCapArgsTest_call_Params creates a new list of CapArgsTest_call_Params.
func NewCapArgsTest_call_Params_List(s *capnp.Segment, sz int32) (CapArgsTest_call_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return CapArgsTest_call_Params_List{l}, err
}

func (s CapArgsTest_call_Params_List) At(i int) CapArgsTest_call_Params {
	return CapArgsTest_call_Params{s.List.Struct(i)}
}

func (s CapArgsTest_call_Params_List) Set(i int, v CapArgsTest_call_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CapArgsTest_call_Params_List) String() string {
	str, _ := text.MarshalList(0x80087e4e698768a2, s.List)
	return str
}

// CapArgsTest_call_Params_Future is a wrapper for a CapArgsTest_call_Params promised by a client call.
type CapArgsTest_call_Params_Future struct{ *capnp.Future }

func (p CapArgsTest_call_Params_Future) Struct() (CapArgsTest_call_Params, error) {
	s, err := p.Future.Struct()
	return CapArgsTest_call_Params{s}, err
}

func (p CapArgsTest_call_Params_Future) Cap() *capnp.Future {
	return p.Future.Field(0, nil)
}

type CapArgsTest_call_Results struct{ capnp.Struct }

// CapArgsTest_call_Results_TypeID is the unique identifier for the type CapArgsTest_call_Results.
const CapArgsTest_call_Results_TypeID = 0x96fbc50dc2f0200d

func NewCapArgsTest_call_Results(s *capnp.Segment) (CapArgsTest_call_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapArgsTest_call_Results{st}, err
}

func NewRootCapArgsTest_call_Results(s *capnp.Segment) (CapArgsTest_call_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapArgsTest_call_Results{st}, err
}

func ReadRootCapArgsTest_call_Results(msg *capnp.Message) (CapArgsTest_call_Results, error) {
	root, err := msg.Root()
	return CapArgsTest_call_Results{root.Struct()}, err
}

func (s CapArgsTest_call_Results) String() string {
	str, _ := text.Marshal(0x96fbc50dc2f0200d, s.Struct)
	return str
}

// CapArgsTest_call_Results_List is a list of CapArgsTest_call_Results.
type CapArgsTest_call_Results_List struct{ capnp.List }

// NewCapArgsTest_call_Results creates a new list of CapArgsTest_call_Results.
func NewCapArgsTest_call_Results_List(s *capnp.Segment, sz int32) (CapArgsTest_call_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return CapArgsTest_call_Results_List{l}, err
}

func (s CapArgsTest_call_Results_List) At(i int) CapArgsTest_call_Results {
	return CapArgsTest_call_Results{s.List.Struct(i)}
}

func (s CapArgsTest_call_Results_List) Set(i int, v CapArgsTest_call_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CapArgsTest_call_Results_List) String() string {
	str, _ := text.MarshalList(0x96fbc50dc2f0200d, s.List)
	return str
}

// CapArgsTest_call_Results_Future is a wrapper for a CapArgsTest_call_Results promised by a client call.
type CapArgsTest_call_Results_Future struct{ *capnp.Future }

func (p CapArgsTest_call_Results_Future) Struct() (CapArgsTest_call_Results, error) {
	s, err := p.Future.Struct()
	return CapArgsTest_call_Results{s}, err
}

const schema_ef12a34b9807e19c = "x\xda|\x92?h\xd4P\x1c\xc7\xbf\xbf\xf7\x12\xd3\"" +
	"\xa1\xbe\xbc\xa2\xa0\x83\xb6T\x87\x0e\x87\xa5\x08*\xca\x9d" +
	"\x8a\xdc \x96D]DD\xc2\x19\xee\xaaw\xb9p\xc9" +
	"!8X\x17\xe9\xecR\xff \x0eU\xc4\x8eu\x12]" +
	"\xa4(8\x88\xe0$RE;8\xb8\xd4.B\x8b\xd4" +
	"H\xde5w\xc6;\xba\xe6\xfb\xcd\xe7}~\xbf\xf7\xf6" +
	"\x1f\xa5\x02\x1b\xd3\xa7u\xc0)\xe8[\xe2\xd9\xca\xf4\xe4" +
	"\xc4\x8d\xbe\x9b\x10;\x08\xd0\xc9\x00\xc6\xe7\xd8N\x02\xc9" +
	"y\x96\x07\xfd\xd9\xb7wqf\xfd\xcb-g\x90\x08\xd0" +
	"\x92\xf8\x03\x1bN\xe2OI\x1c\x9b{V\x16\xcc7\xbf" +
	"gZ\xff\xab|-\xc9\xb5\xf8\xdd\xb6+\xb7\xa7\xde_" +
	"}\x0e\xb1\x95\xc7\x0f\x96\x8c\xbb\xa7\x1eY?\x01\x92K" +
	"\xec\x85\xfc\xc1\x0c@~gEir\x03\x88\xbd\xc7\xcb" +
	"t\xe1\xe9\x91\x97]\xe5_\xec\x99\\W\xe55V\x94" +
	"C\xaa<\xd4\xff\xf5\xe1\xdc\xb7;\x1f\xf1\x8fT?W" +
	"\xce\x82'R\xd7\x97W\x17\xa2\xd7\xdaJ\x17m\x8c\xcf" +
	"\xcaC\x09C\x1e\xe0EyQ\xd1\x16w5\xde>\xf9" +
	"|p\x15b{{\x03'\xb9\x95\xd0N\xf3<\xce\xc7" +
	"\x91\x17F\xb9\x92\x1bp?8|\xc2\x0d\x8e5\xca\xe1" +
	"\xb9\xd6\xa7ju\xc4v\x1b.\xaf\x85\x8e\xc65@#" +
	"@\x98\xc3\x80\xd3\xc7\xc9\x19dd\x94\xdc\x80,\x8d\x83" +
	"\xc8\x02eH\xf6\xa4_\xb6\xeb~9\xe7\x95*\xf5\x89" +
	"fm\xe4\x8c\x176\x8dj\x94AY\x1d\x14\xf9\xa4\x83" +
	"\x91\xfe\x1f\xa6K(\xc5\xb4[\x94\xb6\xf2\xad\x9aM\xe4" +
	"h\\\x07\xdawO\xe9%\x0a1\x0a&tc !" +
	"\x15\xc8&\xcaP\xceF\x0d\xcf\xdd]\xcbB\xd2\xf5\x91" +
	"?\xff\xea\xda\xf8\xfdK\xf7\xda\x90\xa0\x19V\xb2\x90\x9e" +
	"s\xf7\xd8\xe0\xe6cSJ1\xea~\xb9#\x92\xbe\x0a" +
	"\xc2\xc6\x93\x15\xe2\xb8\x12\x99\xda8\xa9\xdbE\x0d\xa4\xe6" +
	"\xc9%\xb2J\xa5F\x19\x95\xd1\x8e\xca\xc0e7r\xc9" +
	"\x04#\x13\xf47\x00\x00\xff\xff\xbc\xeb\xe45"

func init() {
	schemas.Register(schema_ef12a34b9807e19c,
		0x80087e4e698768a2,
		0x85ddfd96db252600,
		0x96fbc50dc2f0200d,
		0xb86bce7f916a10cc,
		0xbb3ca85b01eea465,
		0xd797e0a99edf0921,
		0xf004c474c2f8ee7a,
		0xf838dca6c8721bdb)
}
