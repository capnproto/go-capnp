{{with .Annotations.Doc -}}
// {{.}}
{{end -}}
type {{.Node.Name}} capnp.Client

{{ template "_typeid" .Node }}

{{range .Methods -}}

func (c {{$.Node.Name}}) {{.Name|title}}(ctx {{$.G.Imports.Context}}.Context, params func({{$.G.RemoteNodeName .Params $.Node}}) error)
{{- if .IsStreaming }} error {
{{- else }} ({{$.G.RemoteNodeName .Results $.Node}}_Future, capnp.ReleaseFunc) {
{{ end }}
	s := capnp.Send{
		Method: capnp.Method{
			{{template "_interfaceMethod" .}}
		},
	}
	if params != nil {
		s.ArgsSize = {{$.G.ObjectSize .Params}}
		s.PlaceArgs = func(s capnp.Struct) error { return params({{$.G.RemoteNodeName .Params $.Node}}(s)) }
	}
{{ if .IsStreaming }}
	return capnp.Client(c).SendStreamCall(ctx, s)
{{ else }}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return {{$.G.RemoteNodeName .Results $.Node}}_Future{Future: ans.Future()}, release
{{ end }}
}

{{end}}

func (c {{$.Node.Name}}) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c {{$.Node.Name}}) String() string {
	return "{{$.Node.Name}}(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c {{$.Node.Name}}) AddRef() {{$.Node.Name}} {
	return {{$.Node.Name}}(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c {{$.Node.Name}}) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c {{$.Node.Name}}) Resolve(ctx {{$.G.Imports.Context}}.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c {{$.Node.Name}}) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func ({{$.Node.Name}}) DecodeFromPtr(p capnp.Ptr) {{$.Node.Name}} {
	return {{$.Node.Name}}(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c {{$.Node.Name}}) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c {{$.Node.Name}}) IsSame(other {{$.Node.Name}}) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c {{$.Node.Name}}) SetFlowLimiter(lim {{.G.Imports.FlowControl}}.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c {{$.Node.Name}}) GetFlowLimiter() {{.G.Imports.FlowControl}}.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}
