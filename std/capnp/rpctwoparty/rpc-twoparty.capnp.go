// Code generated by capnpc-go. DO NOT EDIT.

package rpctwoparty

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Side uint16

// Side_TypeID is the unique identifier for the type Side.
const Side_TypeID = 0x9fd69ebc87b9719c

// Values of Side.
const (
	Side_server Side = 0
	Side_client Side = 1
)

// String returns the enum's constant name.
func (c Side) String() string {
	switch c {
	case Side_server:
		return "server"
	case Side_client:
		return "client"

	default:
		return ""
	}
}

// SideFromString returns the enum value with a name,
// or the zero value if there's no such value.
func SideFromString(c string) Side {
	switch c {
	case "server":
		return Side_server
	case "client":
		return Side_client

	default:
		return 0
	}
}

type Side_List = capnp.EnumList[Side]

func NewSide_List(s *capnp.Segment, sz int32) (Side_List, error) {
	return capnp.NewEnumList[Side](s, sz)
}

type VatId capnp.Struct

// VatId_TypeID is the unique identifier for the type VatId.
const VatId_TypeID = 0xd20b909fee733a8e

func NewVatId(s *capnp.Segment) (VatId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return VatId(st), err
}

func NewRootVatId(s *capnp.Segment) (VatId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return VatId(st), err
}

func ReadRootVatId(msg *capnp.Message) (VatId, error) {
	root, err := msg.Root()
	return VatId(root.Struct()), err
}

func (s VatId) String() string {
	str, _ := text.Marshal(0xd20b909fee733a8e, capnp.Struct(s))
	return str
}

func (s VatId) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (VatId) DecodeFromPtr(p capnp.Ptr) VatId {
	return VatId(capnp.Struct{}.DecodeFromPtr(p))
}

func (s VatId) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s VatId) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s VatId) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s VatId) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s VatId) Side() Side {
	return Side(capnp.Struct(s).Uint16(0))
}

func (s VatId) SetSide(v Side) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// VatId_List is a list of VatId.
type VatId_List = capnp.StructList[VatId]

// NewVatId creates a new list of VatId.
func NewVatId_List(s *capnp.Segment, sz int32) (VatId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[VatId](l), err
}

// VatId_Future is a wrapper for a VatId promised by a client call.
type VatId_Future struct{ *capnp.Future }

func (f VatId_Future) Struct() (VatId, error) {
	p, err := f.Future.Ptr()
	return VatId(p.Struct()), err
}

type ProvisionId capnp.Struct

// ProvisionId_TypeID is the unique identifier for the type ProvisionId.
const ProvisionId_TypeID = 0xb88d09a9c5f39817

func NewProvisionId(s *capnp.Segment) (ProvisionId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ProvisionId(st), err
}

func NewRootProvisionId(s *capnp.Segment) (ProvisionId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ProvisionId(st), err
}

func ReadRootProvisionId(msg *capnp.Message) (ProvisionId, error) {
	root, err := msg.Root()
	return ProvisionId(root.Struct()), err
}

func (s ProvisionId) String() string {
	str, _ := text.Marshal(0xb88d09a9c5f39817, capnp.Struct(s))
	return str
}

func (s ProvisionId) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProvisionId) DecodeFromPtr(p capnp.Ptr) ProvisionId {
	return ProvisionId(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProvisionId) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProvisionId) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProvisionId) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProvisionId) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ProvisionId) JoinId() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s ProvisionId) SetJoinId(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// ProvisionId_List is a list of ProvisionId.
type ProvisionId_List = capnp.StructList[ProvisionId]

// NewProvisionId creates a new list of ProvisionId.
func NewProvisionId_List(s *capnp.Segment, sz int32) (ProvisionId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ProvisionId](l), err
}

// ProvisionId_Future is a wrapper for a ProvisionId promised by a client call.
type ProvisionId_Future struct{ *capnp.Future }

func (f ProvisionId_Future) Struct() (ProvisionId, error) {
	p, err := f.Future.Ptr()
	return ProvisionId(p.Struct()), err
}

type RecipientId capnp.Struct

// RecipientId_TypeID is the unique identifier for the type RecipientId.
const RecipientId_TypeID = 0x89f389b6fd4082c1

func NewRecipientId(s *capnp.Segment) (RecipientId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RecipientId(st), err
}

func NewRootRecipientId(s *capnp.Segment) (RecipientId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RecipientId(st), err
}

func ReadRootRecipientId(msg *capnp.Message) (RecipientId, error) {
	root, err := msg.Root()
	return RecipientId(root.Struct()), err
}

func (s RecipientId) String() string {
	str, _ := text.Marshal(0x89f389b6fd4082c1, capnp.Struct(s))
	return str
}

func (s RecipientId) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RecipientId) DecodeFromPtr(p capnp.Ptr) RecipientId {
	return RecipientId(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RecipientId) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RecipientId) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RecipientId) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RecipientId) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// RecipientId_List is a list of RecipientId.
type RecipientId_List = capnp.StructList[RecipientId]

// NewRecipientId creates a new list of RecipientId.
func NewRecipientId_List(s *capnp.Segment, sz int32) (RecipientId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[RecipientId](l), err
}

// RecipientId_Future is a wrapper for a RecipientId promised by a client call.
type RecipientId_Future struct{ *capnp.Future }

func (f RecipientId_Future) Struct() (RecipientId, error) {
	p, err := f.Future.Ptr()
	return RecipientId(p.Struct()), err
}

type ThirdPartyCapId capnp.Struct

// ThirdPartyCapId_TypeID is the unique identifier for the type ThirdPartyCapId.
const ThirdPartyCapId_TypeID = 0xb47f4979672cb59d

func NewThirdPartyCapId(s *capnp.Segment) (ThirdPartyCapId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ThirdPartyCapId(st), err
}

func NewRootThirdPartyCapId(s *capnp.Segment) (ThirdPartyCapId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ThirdPartyCapId(st), err
}

func ReadRootThirdPartyCapId(msg *capnp.Message) (ThirdPartyCapId, error) {
	root, err := msg.Root()
	return ThirdPartyCapId(root.Struct()), err
}

func (s ThirdPartyCapId) String() string {
	str, _ := text.Marshal(0xb47f4979672cb59d, capnp.Struct(s))
	return str
}

func (s ThirdPartyCapId) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ThirdPartyCapId) DecodeFromPtr(p capnp.Ptr) ThirdPartyCapId {
	return ThirdPartyCapId(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ThirdPartyCapId) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ThirdPartyCapId) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ThirdPartyCapId) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ThirdPartyCapId) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ThirdPartyCapId_List is a list of ThirdPartyCapId.
type ThirdPartyCapId_List = capnp.StructList[ThirdPartyCapId]

// NewThirdPartyCapId creates a new list of ThirdPartyCapId.
func NewThirdPartyCapId_List(s *capnp.Segment, sz int32) (ThirdPartyCapId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ThirdPartyCapId](l), err
}

// ThirdPartyCapId_Future is a wrapper for a ThirdPartyCapId promised by a client call.
type ThirdPartyCapId_Future struct{ *capnp.Future }

func (f ThirdPartyCapId_Future) Struct() (ThirdPartyCapId, error) {
	p, err := f.Future.Ptr()
	return ThirdPartyCapId(p.Struct()), err
}

type JoinKeyPart capnp.Struct

// JoinKeyPart_TypeID is the unique identifier for the type JoinKeyPart.
const JoinKeyPart_TypeID = 0x95b29059097fca83

func NewJoinKeyPart(s *capnp.Segment) (JoinKeyPart, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return JoinKeyPart(st), err
}

func NewRootJoinKeyPart(s *capnp.Segment) (JoinKeyPart, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return JoinKeyPart(st), err
}

func ReadRootJoinKeyPart(msg *capnp.Message) (JoinKeyPart, error) {
	root, err := msg.Root()
	return JoinKeyPart(root.Struct()), err
}

func (s JoinKeyPart) String() string {
	str, _ := text.Marshal(0x95b29059097fca83, capnp.Struct(s))
	return str
}

func (s JoinKeyPart) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JoinKeyPart) DecodeFromPtr(p capnp.Ptr) JoinKeyPart {
	return JoinKeyPart(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JoinKeyPart) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JoinKeyPart) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JoinKeyPart) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JoinKeyPart) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JoinKeyPart) JoinId() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s JoinKeyPart) SetJoinId(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s JoinKeyPart) PartCount() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s JoinKeyPart) SetPartCount(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s JoinKeyPart) PartNum() uint16 {
	return capnp.Struct(s).Uint16(6)
}

func (s JoinKeyPart) SetPartNum(v uint16) {
	capnp.Struct(s).SetUint16(6, v)
}

// JoinKeyPart_List is a list of JoinKeyPart.
type JoinKeyPart_List = capnp.StructList[JoinKeyPart]

// NewJoinKeyPart creates a new list of JoinKeyPart.
func NewJoinKeyPart_List(s *capnp.Segment, sz int32) (JoinKeyPart_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[JoinKeyPart](l), err
}

// JoinKeyPart_Future is a wrapper for a JoinKeyPart promised by a client call.
type JoinKeyPart_Future struct{ *capnp.Future }

func (f JoinKeyPart_Future) Struct() (JoinKeyPart, error) {
	p, err := f.Future.Ptr()
	return JoinKeyPart(p.Struct()), err
}

type JoinResult capnp.Struct

// JoinResult_TypeID is the unique identifier for the type JoinResult.
const JoinResult_TypeID = 0x9d263a3630b7ebee

func NewJoinResult(s *capnp.Segment) (JoinResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JoinResult(st), err
}

func NewRootJoinResult(s *capnp.Segment) (JoinResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JoinResult(st), err
}

func ReadRootJoinResult(msg *capnp.Message) (JoinResult, error) {
	root, err := msg.Root()
	return JoinResult(root.Struct()), err
}

func (s JoinResult) String() string {
	str, _ := text.Marshal(0x9d263a3630b7ebee, capnp.Struct(s))
	return str
}

func (s JoinResult) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JoinResult) DecodeFromPtr(p capnp.Ptr) JoinResult {
	return JoinResult(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JoinResult) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JoinResult) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JoinResult) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JoinResult) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JoinResult) JoinId() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s JoinResult) SetJoinId(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s JoinResult) Succeeded() bool {
	return capnp.Struct(s).Bit(32)
}

func (s JoinResult) SetSucceeded(v bool) {
	capnp.Struct(s).SetBit(32, v)
}

func (s JoinResult) Cap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s JoinResult) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JoinResult) SetCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// JoinResult_List is a list of JoinResult.
type JoinResult_List = capnp.StructList[JoinResult]

// NewJoinResult creates a new list of JoinResult.
func NewJoinResult_List(s *capnp.Segment, sz int32) (JoinResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JoinResult](l), err
}

// JoinResult_Future is a wrapper for a JoinResult promised by a client call.
type JoinResult_Future struct{ *capnp.Future }

func (f JoinResult_Future) Struct() (JoinResult, error) {
	p, err := f.Future.Ptr()
	return JoinResult(p.Struct()), err
}
func (p JoinResult_Future) Cap() capnp.Client {
	return p.Future.Field(0, nil).Client()
}

const schema_a184c7885cdaf2a1 = "x\xda|\x92\xcfk\xd4@\x14\xc7\xdfw&u\xb7\xe8" +
	"\xb2\xa4\xb3\"zQ\x04=\x88J\x8b\xa2\x90K\x16\x17" +
	"\xc1h\x91\x9d\xb5\x15\x0b\xf6\x10\x92\xa0\x916I\x93l" +
	"e\x0f\xb2\xa0\x82\xf6\xa0\xf4\"x\xb0\x96\x1e=\x89\xe2" +
	"\xaf\x82\x1e\x14D\xe8\xd1\x83\x07\xff\x05\xa1\x87\xf6\xb6 " +
	"\x91\x09\xd8\x95\xfd\xe1-y|\xdew>\xef\xcd\x8c\x9b" +
	"\xa8j\x13\xa5\xb6FL\x9e\x1e\xd9\x95}\xbe[\xfd\xfd" +
	"ni{\x89t\x81lm\xeb\xe7\xf5\x87\xdf\xee\xaf\x91" +
	"V \x12GXGL\xb0\x02\xf1\xec\xdeF{tf" +
	"\xf9\xf5\x13\x92\x02\xbdT\x89u\xc4~\xa6\xbe\xf6\xb2\x97" +
	"\x84l\xf3\xd7\xfb\xf13\xc6\xd1\x95\x1ev\x04\x0ay\xc5" +
	"\xb6\xc4\xa7\x1c^\xcf\xe1g\x0b\xeb\x0f>>\xff\xb1J" +
	"\xba`]\x96 \xa6\xf9\x171\xcb\x158\xc3\xcf\x12\xb2" +
	"\x95\xb7\xc7o\xb4\xac\xf6\x9b~\xcdS\xb3\xfc\x00\xc4<" +
	"W\x9e\xfb\x9en\x7f}1\xfa\xe8\xc3 O\x8bw\xc4" +
	"t\x9e(\xb9I\xc8\x1e\x1b\xc9\xe6\xea\xf2\xee\xef\x83\xd8" +
	"\x05\xbe!\xee\xe4l\x8b\x9bT\xcb\xe2\xc89\x91\xde\x0e" +
	"#f\xc7i\xeb\xa4cGAd4<\xc7\x8fL\xdf" +
	"\x0bR\xcb\xad\x03\x03\x99\x8b\xa1\x1f\\2\xbdV\xdd\x8e" +
	"\xd3: \xf7p\x8dH\x03\x91~\xde \x92U\x0e9" +
	"\xc9\xa0\x83U\xa0\x8aV\x83H^\xe0\x90S\x0c:\xe3" +
	"\x150\"]\x9e#\x92\x93\x1c\xf2\x1a\x83y+\xf4\x03" +
	"\xcbE\x91\x18\x8a\x84,\xb2\xe3\xb4\x166\x03B\x8a\x02" +
	"1\x14\x08mU\xbb\xdc\x9c\xff\xfb?\xd4\xabq\xd0K" +
	"\x9as\xff\xd5:\xd4\xaf\xa5Ts\xab\xc3\xc3\xad\x92\xa6" +
	"\xe3x\x9e\xeb\x11\\\x80\x18@(8v\x841\x8d\x13" +
	"06\xc4\xe9\x8a\xefz\xa4l\x8a\xf9\x01\xbaA\x04\xe8" +
	"\xa3\x06\x91\x99x\xf1\xa2\x17\x9b\xce\x9c\xda\xf6N3\xff" +
	"\xa7y\xea\xa6\x1f\xbbj\xcb\xad\x9a\x1d\xf1\xe1\x17R\x8f" +
	"\xc3E\xdfL\xfc0\xc8\x19\xa9\xedL^R\x93\x179" +
	"d\xa5\x7f\xa0AIW\xed\xd4r\x89zB\x8euC" +
	"\xca\x89\xefz(w\x9f8\x01e\xc2\x9f\x00\x00\x00\xff" +
	"\xff\xbe\xb4\xf3\xbd"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_a184c7885cdaf2a1,
		Nodes: []uint64{
			0x89f389b6fd4082c1,
			0x95b29059097fca83,
			0x9d263a3630b7ebee,
			0x9fd69ebc87b9719c,
			0xb47f4979672cb59d,
			0xb88d09a9c5f39817,
			0xd20b909fee733a8e,
		},
		Compressed: true,
	})
}
