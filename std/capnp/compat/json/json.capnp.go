// Code generated by capnpc-go. DO NOT EDIT.

package json

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
	strconv "strconv"
)

const Name_ = uint64(0xfa5b1fd61c2e7c3d)
const Flatten_ = uint64(0x82d3e852af0336bf)
const Discriminator_ = uint64(0xcfa794e8d19a0162)
const Base64_ = uint64(0xd7d879450a253e4b)
const Hex_ = uint64(0xf061e22f0ae5c7b5)
const Notification_ = uint64(0xa0a054dea32fd98c)

type Value capnp.Struct
type Value_Which uint16

const (
	Value_Which_null    Value_Which = 0
	Value_Which_boolean Value_Which = 1
	Value_Which_number  Value_Which = 2
	Value_Which_string_ Value_Which = 3
	Value_Which_array   Value_Which = 4
	Value_Which_object  Value_Which = 5
	Value_Which_call    Value_Which = 6
)

func (w Value_Which) String() string {
	const s = "nullbooleannumberstring_arrayobjectcall"
	switch w {
	case Value_Which_null:
		return s[0:4]
	case Value_Which_boolean:
		return s[4:11]
	case Value_Which_number:
		return s[11:17]
	case Value_Which_string_:
		return s[17:24]
	case Value_Which_array:
		return s[24:29]
	case Value_Which_object:
		return s[29:35]
	case Value_Which_call:
		return s[35:39]

	}
	return "Value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Value_TypeID is the unique identifier for the type Value.
const Value_TypeID = 0xa3fa7845f919dd83

func NewValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Value(st), err
}

func NewRootValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Value(st), err
}

func ReadRootValue(msg *capnp.Message) (Value, error) {
	root, err := msg.Root()
	return Value(root.Struct()), err
}

func (s Value) String() string {
	str, _ := text.Marshal(0xa3fa7845f919dd83, capnp.Struct(s))
	return str
}

func (s Value) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Value) DecodeFromPtr(p capnp.Ptr) Value {
	return Value(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Value) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Value) Which() Value_Which {
	return Value_Which(capnp.Struct(s).Uint16(0))
}
func (s Value) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Value) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Value) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Value) SetNull() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s Value) Boolean() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != boolean")
	}
	return capnp.Struct(s).Bit(16)
}

func (s Value) SetBoolean(v bool) {
	capnp.Struct(s).SetUint16(0, 1)
	capnp.Struct(s).SetBit(16, v)
}

func (s Value) Number() float64 {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != number")
	}
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Value) SetNumber(v float64) {
	capnp.Struct(s).SetUint16(0, 2)
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Value) String_() (string, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != string_")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Value) HasString_() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) String_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetString_(v string) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetText(0, v)
}

func (s Value) Array() (Value_List, error) {
	if capnp.Struct(s).Uint16(0) != 4 {
		panic("Which() != array")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Value_List(p.List()), err
}

func (s Value) HasArray() bool {
	if capnp.Struct(s).Uint16(0) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetArray(v Value_List) error {
	capnp.Struct(s).SetUint16(0, 4)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewArray sets the array field to a newly
// allocated Value_List, preferring placement in s's segment.
func (s Value) NewArray(n int32) (Value_List, error) {
	capnp.Struct(s).SetUint16(0, 4)
	l, err := NewValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Value_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Value) Object() (Value_Field_List, error) {
	if capnp.Struct(s).Uint16(0) != 5 {
		panic("Which() != object")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Value_Field_List(p.List()), err
}

func (s Value) HasObject() bool {
	if capnp.Struct(s).Uint16(0) != 5 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetObject(v Value_Field_List) error {
	capnp.Struct(s).SetUint16(0, 5)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewObject sets the object field to a newly
// allocated Value_Field_List, preferring placement in s's segment.
func (s Value) NewObject(n int32) (Value_Field_List, error) {
	capnp.Struct(s).SetUint16(0, 5)
	l, err := NewValue_Field_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Value_Field_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Value) Call() (Value_Call, error) {
	if capnp.Struct(s).Uint16(0) != 6 {
		panic("Which() != call")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Value_Call(p.Struct()), err
}

func (s Value) HasCall() bool {
	if capnp.Struct(s).Uint16(0) != 6 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetCall(v Value_Call) error {
	capnp.Struct(s).SetUint16(0, 6)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCall sets the call field to a newly
// allocated Value_Call struct, preferring placement in s's segment.
func (s Value) NewCall() (Value_Call, error) {
	capnp.Struct(s).SetUint16(0, 6)
	ss, err := NewValue_Call(capnp.Struct(s).Segment())
	if err != nil {
		return Value_Call{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Value_List is a list of Value.
type Value_List = capnp.StructList[Value]

// NewValue creates a new list of Value.
func NewValue_List(s *capnp.Segment, sz int32) (Value_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[Value](l), err
}

// Value_Future is a wrapper for a Value promised by a client call.
type Value_Future struct{ *capnp.Future }

func (f Value_Future) Struct() (Value, error) {
	p, err := f.Future.Ptr()
	return Value(p.Struct()), err
}
func (p Value_Future) Call() Value_Call_Future {
	return Value_Call_Future{Future: p.Future.Field(0, nil)}
}

type Value_Field capnp.Struct

// Value_Field_TypeID is the unique identifier for the type Value_Field.
const Value_Field_TypeID = 0xe31026e735d69ddf

func NewValue_Field(s *capnp.Segment) (Value_Field, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Value_Field(st), err
}

func NewRootValue_Field(s *capnp.Segment) (Value_Field, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Value_Field(st), err
}

func ReadRootValue_Field(msg *capnp.Message) (Value_Field, error) {
	root, err := msg.Root()
	return Value_Field(root.Struct()), err
}

func (s Value_Field) String() string {
	str, _ := text.Marshal(0xe31026e735d69ddf, capnp.Struct(s))
	return str
}

func (s Value_Field) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Value_Field) DecodeFromPtr(p capnp.Ptr) Value_Field {
	return Value_Field(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Value_Field) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Value_Field) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Value_Field) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Value_Field) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Value_Field) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Value_Field) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Value_Field) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Value_Field) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Value_Field) Value() (Value, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Value(p.Struct()), err
}

func (s Value_Field) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Value_Field) SetValue(v Value) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewValue sets the value field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s Value_Field) NewValue() (Value, error) {
	ss, err := NewValue(capnp.Struct(s).Segment())
	if err != nil {
		return Value{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Value_Field_List is a list of Value_Field.
type Value_Field_List = capnp.StructList[Value_Field]

// NewValue_Field creates a new list of Value_Field.
func NewValue_Field_List(s *capnp.Segment, sz int32) (Value_Field_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Value_Field](l), err
}

// Value_Field_Future is a wrapper for a Value_Field promised by a client call.
type Value_Field_Future struct{ *capnp.Future }

func (f Value_Field_Future) Struct() (Value_Field, error) {
	p, err := f.Future.Ptr()
	return Value_Field(p.Struct()), err
}
func (p Value_Field_Future) Value() Value_Future {
	return Value_Future{Future: p.Future.Field(1, nil)}
}

type Value_Call capnp.Struct

// Value_Call_TypeID is the unique identifier for the type Value_Call.
const Value_Call_TypeID = 0xa0d9f6eca1c93d48

func NewValue_Call(s *capnp.Segment) (Value_Call, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Value_Call(st), err
}

func NewRootValue_Call(s *capnp.Segment) (Value_Call, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Value_Call(st), err
}

func ReadRootValue_Call(msg *capnp.Message) (Value_Call, error) {
	root, err := msg.Root()
	return Value_Call(root.Struct()), err
}

func (s Value_Call) String() string {
	str, _ := text.Marshal(0xa0d9f6eca1c93d48, capnp.Struct(s))
	return str
}

func (s Value_Call) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Value_Call) DecodeFromPtr(p capnp.Ptr) Value_Call {
	return Value_Call(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Value_Call) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Value_Call) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Value_Call) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Value_Call) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Value_Call) Function() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Value_Call) HasFunction() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Value_Call) FunctionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Value_Call) SetFunction(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Value_Call) Params() (Value_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Value_List(p.List()), err
}

func (s Value_Call) HasParams() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Value_Call) SetParams(v Value_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewParams sets the params field to a newly
// allocated Value_List, preferring placement in s's segment.
func (s Value_Call) NewParams(n int32) (Value_List, error) {
	l, err := NewValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Value_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Value_Call_List is a list of Value_Call.
type Value_Call_List = capnp.StructList[Value_Call]

// NewValue_Call creates a new list of Value_Call.
func NewValue_Call_List(s *capnp.Segment, sz int32) (Value_Call_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Value_Call](l), err
}

// Value_Call_Future is a wrapper for a Value_Call promised by a client call.
type Value_Call_Future struct{ *capnp.Future }

func (f Value_Call_Future) Struct() (Value_Call, error) {
	p, err := f.Future.Ptr()
	return Value_Call(p.Struct()), err
}

type FlattenOptions capnp.Struct

// FlattenOptions_TypeID is the unique identifier for the type FlattenOptions.
const FlattenOptions_TypeID = 0xc4df13257bc2ea61

func NewFlattenOptions(s *capnp.Segment) (FlattenOptions, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FlattenOptions(st), err
}

func NewRootFlattenOptions(s *capnp.Segment) (FlattenOptions, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FlattenOptions(st), err
}

func ReadRootFlattenOptions(msg *capnp.Message) (FlattenOptions, error) {
	root, err := msg.Root()
	return FlattenOptions(root.Struct()), err
}

func (s FlattenOptions) String() string {
	str, _ := text.Marshal(0xc4df13257bc2ea61, capnp.Struct(s))
	return str
}

func (s FlattenOptions) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FlattenOptions) DecodeFromPtr(p capnp.Ptr) FlattenOptions {
	return FlattenOptions(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FlattenOptions) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FlattenOptions) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FlattenOptions) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FlattenOptions) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FlattenOptions) Prefix() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s FlattenOptions) HasPrefix() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s FlattenOptions) PrefixBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s FlattenOptions) SetPrefix(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// FlattenOptions_List is a list of FlattenOptions.
type FlattenOptions_List = capnp.StructList[FlattenOptions]

// NewFlattenOptions creates a new list of FlattenOptions.
func NewFlattenOptions_List(s *capnp.Segment, sz int32) (FlattenOptions_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[FlattenOptions](l), err
}

// FlattenOptions_Future is a wrapper for a FlattenOptions promised by a client call.
type FlattenOptions_Future struct{ *capnp.Future }

func (f FlattenOptions_Future) Struct() (FlattenOptions, error) {
	p, err := f.Future.Ptr()
	return FlattenOptions(p.Struct()), err
}

type DiscriminatorOptions capnp.Struct

// DiscriminatorOptions_TypeID is the unique identifier for the type DiscriminatorOptions.
const DiscriminatorOptions_TypeID = 0xc2f8c20c293e5319

func NewDiscriminatorOptions(s *capnp.Segment) (DiscriminatorOptions, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DiscriminatorOptions(st), err
}

func NewRootDiscriminatorOptions(s *capnp.Segment) (DiscriminatorOptions, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DiscriminatorOptions(st), err
}

func ReadRootDiscriminatorOptions(msg *capnp.Message) (DiscriminatorOptions, error) {
	root, err := msg.Root()
	return DiscriminatorOptions(root.Struct()), err
}

func (s DiscriminatorOptions) String() string {
	str, _ := text.Marshal(0xc2f8c20c293e5319, capnp.Struct(s))
	return str
}

func (s DiscriminatorOptions) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DiscriminatorOptions) DecodeFromPtr(p capnp.Ptr) DiscriminatorOptions {
	return DiscriminatorOptions(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DiscriminatorOptions) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DiscriminatorOptions) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DiscriminatorOptions) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DiscriminatorOptions) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DiscriminatorOptions) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DiscriminatorOptions) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DiscriminatorOptions) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DiscriminatorOptions) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s DiscriminatorOptions) ValueName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s DiscriminatorOptions) HasValueName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s DiscriminatorOptions) ValueNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s DiscriminatorOptions) SetValueName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// DiscriminatorOptions_List is a list of DiscriminatorOptions.
type DiscriminatorOptions_List = capnp.StructList[DiscriminatorOptions]

// NewDiscriminatorOptions creates a new list of DiscriminatorOptions.
func NewDiscriminatorOptions_List(s *capnp.Segment, sz int32) (DiscriminatorOptions_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[DiscriminatorOptions](l), err
}

// DiscriminatorOptions_Future is a wrapper for a DiscriminatorOptions promised by a client call.
type DiscriminatorOptions_Future struct{ *capnp.Future }

func (f DiscriminatorOptions_Future) Struct() (DiscriminatorOptions, error) {
	p, err := f.Future.Ptr()
	return DiscriminatorOptions(p.Struct()), err
}

const schema_8ef99297a43a5e34 = "x\xda\x8c\x94_h\x1cU\x18\xc5\xbfs\xef\xdc4f" +
	"w\xcd\x0e\xb3/\x85\x96\xf5\xc1\xaa-\x9a6i,\xba" +
	"\xd0\xae\xd8\xa6\x14E\xdd\xdb\x88/\xa2pw;\xd1)" +
	"\xb3\xb3\xcb\xec\xae&\xfeA\xac\xbeT\xc4?E\x11\x0a" +
	"B\xa4\x82\x8f\x8aXPi\xb1\x0d\x09\x1a\x11$\xda\xd6" +
	"\x06\xac\x11E\x0c\xa2PD\xc5D\xeb\x95;\xd3fg" +
	"7\x06|[\xee\xfd\xed\xb9\xe7;\xdfa\xb6\xfd\x8a\xdb" +
	"\xac\xc1\xcc\x82 &\xf7\x88\x1e\xfd\xd1\x0e\xfe\xf6\xfe\xc5" +
	"/\x0f\x91L\x89o\xf5\xf0\x83\x857_;\xb2\xf4\x02" +
	"\x11\x9c\xb3\xec\xa8s\x81\xad#\x1a=\xcf8\x08\xfa\xf9" +
	"\xf9\xad\xc7\xbe\xb9wr\x92^N\x09\xd6\x81\xce\xb2)" +
	"g.B?\x8b\xd1};g\xdf\xf8\xf9\x8f\xf9I\xb2" +
	"m\xe8g.\xac_\x1a\x19_>F\xc2 \xceI\xf6" +
	"\xae3\x13\xfd:\xcd\x1e\xa5\xc4\xb5L!!;\x82u" +
	"\x86\x19\xe4\xcf9\xb7\xf2\xeb\x89\xb6\xdf\xc5_4\xd2\xeb" +
	"GwmNO\xfd9Ev\x0am:\x92\xde\xfe\xbb" +
	"\xc5\xe0@\x98\xff]\xb2\x8c\xb6\xfai\xea\xf1M\xce\xc2" +
	"t\x17\x0cC< \xbep\xbc\x88uE\x91\xa0\xcb8" +
	":\xb7\xf8\xca[\x9f\x9b$J\x1d\xe3\x1d\x16\x9f:\xaf" +
	"\x1ar\xf4%\x11\x8dw\xe7\xaeM}#\x13\xe7\xbf2" +
	"\xe85\x1d\xe8\xd3\xe2\x88s8B\x9f\x8d\xd1\x85\xd7\xcf" +
	"\xdd\xfc\xe3u\xd9\xef\xff+\x89\x96\xf8\xd0y2r0" +
	"!\x8c\xdb\xe3\x1f\xff\xd0\xb7\xf5;uq\xb5\xecY\xf1" +
	"\x983\x1f\xc9\x9e\x89ew>1\xb0\xe1\\\xfe\xfee" +
	"\x9aK\x89\xc5\xcee\xcc\x88C\xcel\xc4N\x1bv\xb7" +
	">\xd8\xa8\x05\x03\x15UGP/\x8c\xf9\xaa\xd9\xe4n" +
	"P\x02\x90m\xc7CX\xa1XP/\x04\xb5\xa67\xe6" +
	"UT\xd3\xab\x05T\x02\x88w\x88\xdc\xa7\xfc\x96\x9b\x1f" +
	"\xd8\xad|\xbf\x04\xc8^n\x11Y \xb27\xdfA$" +
	"o\xe0\x90\xc3\x0c6\x90\x839\x1c,\x10\xc9\x1b9\xe4" +
	">\x06=\xd6\x0a*\x91*\x11\xd2\xc4\x90&\x14\xeb*" +
	"T\xd5\x06\xae&\x94\xb8q\xb5\x92\x12\xc1\x1c\xae~\x9a" +
	"H\xf6\"\x19\xedUC\x89\xc6\x89-\xf9\xbd\x9e\xeb\x1f" +
	"\xe87\xfe\xe4\x06n\xa5\xb5\x8e\xdc\x1d\xdfB$\xdf\xe1" +
	"\x90'\x186\xe2\x1f\x9d\x8d\xfd}p;\x91|\x8fC" +
	"\x9eb\xd8\xc8.i\xe4\xc0\x88\xec\x93\xc6\xf6\xfb\x1cr" +
	"\x9a!\xc3\xff\xd69p\"\xfb\xb49=\xc1!?a" +
	"\xc8X\x7f\xe9\x1c,\"{f\x88H\x9e\xe2\x90_3" +
	"d\xc4\xb2\xceA\x10\xd9\xf3\x86=\xc3!/2dz" +
	"\x96t\x0e=D\xf6/\xc6\xc5\"\x87\xfc\x8d\xa1?h" +
	"\xf9>\xf5<U\xae\xd5|W\x05\x001\x80P\x0cZ" +
	"\xd5\xb2\x1b\"E\x0c)B\xb1\xd1\x0c\xbd\xe0\xa1+y" +
	"\xe5U\x18\xaa\x895\xe3*\xd6\xca\x07\xddJ\xb3}\xbf" +
	"\x12S|\xdf_Q\xbe\x8fl;0\x02\xb2\x89\x94y" +
	"P/\xec\xf1\x1a\x95\xd0\xabz\x81j\xd6\xc2{\xeaf" +
	"a\x0d\xeaZ\xb5\x19\xe3Z\x0e\xb9-\xb1\xea\x9b\xf6_" +
	"^\xf5-f6Uu\xafx\xd6\x8f\x98\xbd\xdd\xad\xaa" +
	"\x84\xf6Y\xb2q{M/\xdd ~\x0b\x0d\xf3\x96\x15" +
	"\xbf\x05\xd8\x19\x13d/\x87\xcc1\x14\xeb\xa1;\xe6\x8d" +
	"_\x16!\x1b}D\x1dJ\x07\x92\xde\x89\xe2\xa2\xaf|" +
	"4\xba\xeaTV\x0dw\x07\x86\xd7\xa8xq *\xd2" +
	"\xff\x19|\xa8]\xfc\x8e\xc1\xf3\xd1\xe0][J\xc6M" +
	"\xc5\xa0^x\xd8\x1d_m\xc1\xc8D\xf6\xd3\xc4\xfe\x0d" +
	"\x00\x00\xff\xff\xf1\x88\x9aX"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_8ef99297a43a5e34,
		Nodes: []uint64{
			0x82d3e852af0336bf,
			0xa0a054dea32fd98c,
			0xa0d9f6eca1c93d48,
			0xa3fa7845f919dd83,
			0xc2f8c20c293e5319,
			0xc4df13257bc2ea61,
			0xcfa794e8d19a0162,
			0xd7d879450a253e4b,
			0xe31026e735d69ddf,
			0xf061e22f0ae5c7b5,
			0xfa5b1fd61c2e7c3d,
		},
		Compressed: true,
	})
}
