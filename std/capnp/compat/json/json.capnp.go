// Code generated by capnpc-go. DO NOT EDIT.

package json

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
	strconv "strconv"
)

const Name_ = uint64(0xfa5b1fd61c2e7c3d)
const Flatten_ = uint64(0x82d3e852af0336bf)
const Discriminator_ = uint64(0xcfa794e8d19a0162)
const Base64_ = uint64(0xd7d879450a253e4b)
const Hex_ = uint64(0xf061e22f0ae5c7b5)
const Notification_ = uint64(0xa0a054dea32fd98c)

type Value capnp.Struct
type Value_Which uint16

const (
	Value_Which_null    Value_Which = 0
	Value_Which_boolean Value_Which = 1
	Value_Which_number  Value_Which = 2
	Value_Which_string_ Value_Which = 3
	Value_Which_array   Value_Which = 4
	Value_Which_object  Value_Which = 5
	Value_Which_call    Value_Which = 6
	Value_Which_raw     Value_Which = 7
)

func (w Value_Which) String() string {
	const s = "nullbooleannumberstring_arrayobjectcallraw"
	switch w {
	case Value_Which_null:
		return s[0:4]
	case Value_Which_boolean:
		return s[4:11]
	case Value_Which_number:
		return s[11:17]
	case Value_Which_string_:
		return s[17:24]
	case Value_Which_array:
		return s[24:29]
	case Value_Which_object:
		return s[29:35]
	case Value_Which_call:
		return s[35:39]
	case Value_Which_raw:
		return s[39:42]

	}
	return "Value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Value_TypeID is the unique identifier for the type Value.
const Value_TypeID = 0xa3fa7845f919dd83

func NewValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Value(st), err
}

func NewRootValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Value(st), err
}

func ReadRootValue(msg *capnp.Message) (Value, error) {
	root, err := msg.Root()
	return Value(root.Struct()), err
}

func (s Value) String() string {
	str, _ := text.Marshal(0xa3fa7845f919dd83, capnp.Struct(s))
	return str
}

func (s Value) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Value) DecodeFromPtr(p capnp.Ptr) Value {
	return Value(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Value) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Value) Which() Value_Which {
	return Value_Which(capnp.Struct(s).Uint16(0))
}
func (s Value) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Value) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Value) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Value) SetNull() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s Value) Boolean() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != boolean")
	}
	return capnp.Struct(s).Bit(16)
}

func (s Value) SetBoolean(v bool) {
	capnp.Struct(s).SetUint16(0, 1)
	capnp.Struct(s).SetBit(16, v)
}

func (s Value) Number() float64 {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != number")
	}
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Value) SetNumber(v float64) {
	capnp.Struct(s).SetUint16(0, 2)
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Value) String_() (string, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != string_")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Value) HasString_() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) String_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetString_(v string) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetText(0, v)
}

func (s Value) Array() (Value_List, error) {
	if capnp.Struct(s).Uint16(0) != 4 {
		panic("Which() != array")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Value_List(p.List()), err
}

func (s Value) HasArray() bool {
	if capnp.Struct(s).Uint16(0) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetArray(v Value_List) error {
	capnp.Struct(s).SetUint16(0, 4)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewArray sets the array field to a newly
// allocated Value_List, preferring placement in s's segment.
func (s Value) NewArray(n int32) (Value_List, error) {
	capnp.Struct(s).SetUint16(0, 4)
	l, err := NewValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Value_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Value) Object() (Value_Field_List, error) {
	if capnp.Struct(s).Uint16(0) != 5 {
		panic("Which() != object")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Value_Field_List(p.List()), err
}

func (s Value) HasObject() bool {
	if capnp.Struct(s).Uint16(0) != 5 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetObject(v Value_Field_List) error {
	capnp.Struct(s).SetUint16(0, 5)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewObject sets the object field to a newly
// allocated Value_Field_List, preferring placement in s's segment.
func (s Value) NewObject(n int32) (Value_Field_List, error) {
	capnp.Struct(s).SetUint16(0, 5)
	l, err := NewValue_Field_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Value_Field_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Value) Call() (Value_Call, error) {
	if capnp.Struct(s).Uint16(0) != 6 {
		panic("Which() != call")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Value_Call(p.Struct()), err
}

func (s Value) HasCall() bool {
	if capnp.Struct(s).Uint16(0) != 6 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetCall(v Value_Call) error {
	capnp.Struct(s).SetUint16(0, 6)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCall sets the call field to a newly
// allocated Value_Call struct, preferring placement in s's segment.
func (s Value) NewCall() (Value_Call, error) {
	capnp.Struct(s).SetUint16(0, 6)
	ss, err := NewValue_Call(capnp.Struct(s).Segment())
	if err != nil {
		return Value_Call{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Value) Raw() (string, error) {
	if capnp.Struct(s).Uint16(0) != 7 {
		panic("Which() != raw")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Value) HasRaw() bool {
	if capnp.Struct(s).Uint16(0) != 7 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) RawBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetRaw(v string) error {
	capnp.Struct(s).SetUint16(0, 7)
	return capnp.Struct(s).SetText(0, v)
}

// Value_List is a list of Value.
type Value_List = capnp.StructList[Value]

// NewValue creates a new list of Value.
func NewValue_List(s *capnp.Segment, sz int32) (Value_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[Value](l), err
}

// Value_Future is a wrapper for a Value promised by a client call.
type Value_Future struct{ *capnp.Future }

func (f Value_Future) Struct() (Value, error) {
	p, err := f.Future.Ptr()
	return Value(p.Struct()), err
}
func (p Value_Future) Call() Value_Call_Future {
	return Value_Call_Future{Future: p.Future.Field(0, nil)}
}

type Value_Field capnp.Struct

// Value_Field_TypeID is the unique identifier for the type Value_Field.
const Value_Field_TypeID = 0xe31026e735d69ddf

func NewValue_Field(s *capnp.Segment) (Value_Field, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Value_Field(st), err
}

func NewRootValue_Field(s *capnp.Segment) (Value_Field, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Value_Field(st), err
}

func ReadRootValue_Field(msg *capnp.Message) (Value_Field, error) {
	root, err := msg.Root()
	return Value_Field(root.Struct()), err
}

func (s Value_Field) String() string {
	str, _ := text.Marshal(0xe31026e735d69ddf, capnp.Struct(s))
	return str
}

func (s Value_Field) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Value_Field) DecodeFromPtr(p capnp.Ptr) Value_Field {
	return Value_Field(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Value_Field) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Value_Field) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Value_Field) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Value_Field) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Value_Field) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Value_Field) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Value_Field) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Value_Field) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Value_Field) Value() (Value, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Value(p.Struct()), err
}

func (s Value_Field) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Value_Field) SetValue(v Value) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewValue sets the value field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s Value_Field) NewValue() (Value, error) {
	ss, err := NewValue(capnp.Struct(s).Segment())
	if err != nil {
		return Value{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Value_Field_List is a list of Value_Field.
type Value_Field_List = capnp.StructList[Value_Field]

// NewValue_Field creates a new list of Value_Field.
func NewValue_Field_List(s *capnp.Segment, sz int32) (Value_Field_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Value_Field](l), err
}

// Value_Field_Future is a wrapper for a Value_Field promised by a client call.
type Value_Field_Future struct{ *capnp.Future }

func (f Value_Field_Future) Struct() (Value_Field, error) {
	p, err := f.Future.Ptr()
	return Value_Field(p.Struct()), err
}
func (p Value_Field_Future) Value() Value_Future {
	return Value_Future{Future: p.Future.Field(1, nil)}
}

type Value_Call capnp.Struct

// Value_Call_TypeID is the unique identifier for the type Value_Call.
const Value_Call_TypeID = 0xa0d9f6eca1c93d48

func NewValue_Call(s *capnp.Segment) (Value_Call, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Value_Call(st), err
}

func NewRootValue_Call(s *capnp.Segment) (Value_Call, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Value_Call(st), err
}

func ReadRootValue_Call(msg *capnp.Message) (Value_Call, error) {
	root, err := msg.Root()
	return Value_Call(root.Struct()), err
}

func (s Value_Call) String() string {
	str, _ := text.Marshal(0xa0d9f6eca1c93d48, capnp.Struct(s))
	return str
}

func (s Value_Call) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Value_Call) DecodeFromPtr(p capnp.Ptr) Value_Call {
	return Value_Call(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Value_Call) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Value_Call) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Value_Call) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Value_Call) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Value_Call) Function() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Value_Call) HasFunction() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Value_Call) FunctionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Value_Call) SetFunction(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Value_Call) Params() (Value_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Value_List(p.List()), err
}

func (s Value_Call) HasParams() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Value_Call) SetParams(v Value_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewParams sets the params field to a newly
// allocated Value_List, preferring placement in s's segment.
func (s Value_Call) NewParams(n int32) (Value_List, error) {
	l, err := NewValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Value_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Value_Call_List is a list of Value_Call.
type Value_Call_List = capnp.StructList[Value_Call]

// NewValue_Call creates a new list of Value_Call.
func NewValue_Call_List(s *capnp.Segment, sz int32) (Value_Call_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Value_Call](l), err
}

// Value_Call_Future is a wrapper for a Value_Call promised by a client call.
type Value_Call_Future struct{ *capnp.Future }

func (f Value_Call_Future) Struct() (Value_Call, error) {
	p, err := f.Future.Ptr()
	return Value_Call(p.Struct()), err
}

type FlattenOptions capnp.Struct

// FlattenOptions_TypeID is the unique identifier for the type FlattenOptions.
const FlattenOptions_TypeID = 0xc4df13257bc2ea61

func NewFlattenOptions(s *capnp.Segment) (FlattenOptions, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FlattenOptions(st), err
}

func NewRootFlattenOptions(s *capnp.Segment) (FlattenOptions, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FlattenOptions(st), err
}

func ReadRootFlattenOptions(msg *capnp.Message) (FlattenOptions, error) {
	root, err := msg.Root()
	return FlattenOptions(root.Struct()), err
}

func (s FlattenOptions) String() string {
	str, _ := text.Marshal(0xc4df13257bc2ea61, capnp.Struct(s))
	return str
}

func (s FlattenOptions) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FlattenOptions) DecodeFromPtr(p capnp.Ptr) FlattenOptions {
	return FlattenOptions(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FlattenOptions) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FlattenOptions) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FlattenOptions) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FlattenOptions) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FlattenOptions) Prefix() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s FlattenOptions) HasPrefix() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s FlattenOptions) PrefixBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s FlattenOptions) SetPrefix(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// FlattenOptions_List is a list of FlattenOptions.
type FlattenOptions_List = capnp.StructList[FlattenOptions]

// NewFlattenOptions creates a new list of FlattenOptions.
func NewFlattenOptions_List(s *capnp.Segment, sz int32) (FlattenOptions_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[FlattenOptions](l), err
}

// FlattenOptions_Future is a wrapper for a FlattenOptions promised by a client call.
type FlattenOptions_Future struct{ *capnp.Future }

func (f FlattenOptions_Future) Struct() (FlattenOptions, error) {
	p, err := f.Future.Ptr()
	return FlattenOptions(p.Struct()), err
}

type DiscriminatorOptions capnp.Struct

// DiscriminatorOptions_TypeID is the unique identifier for the type DiscriminatorOptions.
const DiscriminatorOptions_TypeID = 0xc2f8c20c293e5319

func NewDiscriminatorOptions(s *capnp.Segment) (DiscriminatorOptions, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DiscriminatorOptions(st), err
}

func NewRootDiscriminatorOptions(s *capnp.Segment) (DiscriminatorOptions, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DiscriminatorOptions(st), err
}

func ReadRootDiscriminatorOptions(msg *capnp.Message) (DiscriminatorOptions, error) {
	root, err := msg.Root()
	return DiscriminatorOptions(root.Struct()), err
}

func (s DiscriminatorOptions) String() string {
	str, _ := text.Marshal(0xc2f8c20c293e5319, capnp.Struct(s))
	return str
}

func (s DiscriminatorOptions) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DiscriminatorOptions) DecodeFromPtr(p capnp.Ptr) DiscriminatorOptions {
	return DiscriminatorOptions(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DiscriminatorOptions) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DiscriminatorOptions) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DiscriminatorOptions) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DiscriminatorOptions) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DiscriminatorOptions) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DiscriminatorOptions) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DiscriminatorOptions) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DiscriminatorOptions) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s DiscriminatorOptions) ValueName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s DiscriminatorOptions) HasValueName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s DiscriminatorOptions) ValueNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s DiscriminatorOptions) SetValueName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// DiscriminatorOptions_List is a list of DiscriminatorOptions.
type DiscriminatorOptions_List = capnp.StructList[DiscriminatorOptions]

// NewDiscriminatorOptions creates a new list of DiscriminatorOptions.
func NewDiscriminatorOptions_List(s *capnp.Segment, sz int32) (DiscriminatorOptions_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[DiscriminatorOptions](l), err
}

// DiscriminatorOptions_Future is a wrapper for a DiscriminatorOptions promised by a client call.
type DiscriminatorOptions_Future struct{ *capnp.Future }

func (f DiscriminatorOptions_Future) Struct() (DiscriminatorOptions, error) {
	p, err := f.Future.Ptr()
	return DiscriminatorOptions(p.Struct()), err
}

const schema_8ef99297a43a5e34 = "x\xda\x8cT]h[e\x18~\x9e\xef\xcb\x97vM" +
	"bs8\xf1b\xe0\xc8\x10\xa7\xaeh\xb7vu\xb8@" +
	"\x17q\xeb\x18\x8a\x9a\xaf\x11o\x04\xe1$;\xd5\x8c\x93" +
	"\x93\x90\xa4\xaeSA\x98w\"\x82C\x10\x07B\xc7\x14" +
	"/Ea\x17\x0aC-\x961\x19h\xd4\xcd\x16V;" +
	"\xff\xb0\x88\x17\xbbQ\xda\xfas\xe4;\xd9\xf2\xd3:\xf0" +
	"\xee\xf0\xbd\x0f\xcf\xfb\xbc\xcf\xfb\xbcg7\xc5\x03\x91\x91" +
	"\xc4\xb2\x82\xd0\x07U4\xf8x\xaf|or\xe5\xeb\x13" +
	"\xd01u5\x18{*\xf3\xf6\x1b'\xd7^\x05h_" +
	"\x12\xa7\xec%\xd1\x07\xe4\x17\x84$\x18\xbc\xb2\xb8\xeb\xcc" +
	"w\x8f\xcf\xce\xe2\xb5\x98\x12=\xd0\x0bb\xcen\x86\xd0" +
	"\x8b-\xe8\xe1\xf1\x0b\xa7\x7f\xfbcq\x16\x96\xc5\xe0\xa5" +
	"\xa5\xadk\x133\xebg\xa0\x0c\xc4>'>\xb0\xe7\xc3" +
	"\xafO\xc51t\x95u\x8c]\xb4\x13\xec\xeb\x07\xec\x11" +
	"\xf9\xb2\xbdO\xde\x05\xecyD\x9e7\xd4[\xf3\xfbw" +
	"\xc6\xe7V\xe7`\xc5\xd8A\x87\xd4{F\x94\xa0=\xae" +
	"\x0c\xf7>e\xb8\x9d_\xe7\x9e\xdfa/\x7f\xb6\x01L" +
	"\x83xS}e\xbf\x13bO\xab,\x18\x14x\xaa\xb9" +
	"\xf2\xfa\xbb_\x18'r=\xe3\xcd\xab\xcf\xed\xa6\x0a\xc7" +
	"S\xe1x\x0f\xef\xdf10q|\xe1[\x03\xdd\xde\x03" +
	"=\xa7N\xda\xf3!\xf4\x93\x16t\xf9\xad\xcb\xf7\xfdr" +
	"g\xf2\xc7\xffr\xe2}\xf5\x91\xfda\xa8\xe0l\xa8\xf6" +
	"\xec\xf9\x9f\x07v\xfd\xe0\\\xdbLkE\x9f\xb3o\x8d" +
	"\x1a\xdad4\xa4\x1d\x7fa\xf8\xb6\xcb\xe9'\xd7\xd1\x8c" +
	"\xa9\x95\xdee0z\xc2V\x06;i\xa0\x07\x82\xa3\xf5" +
	"\x8a?\\t\xaa\xf4\xab\x99)\xcfi4\xa4\xeb\xe7H" +
	"&;\xee\x80m\x94\xf0\xab\x19\xbf\xd2(M\x95\x8aN" +
	"\xa3T\xf1\x91#!{H\x9ep\xbci7=|\xc0" +
	"\xf1\xbc\x1c\xa9\xfbe\x04\x88\x10\xb0v>\x04\xe8\xbb%" +
	"\xf5\x98\xa0E\xa6h\x1eG2\x80\xbeGR\x1f\x16\x0c" +
	"\xa6\xa6\xfdb\xc8\x0a0\x0e\xc18\x98\xad:5\xa7\\" +
	"\xe7-`N\x1aUm\x93@\xf3\xb8\xb95\xa0\xfb\xd9" +
	"\xed\xec\x96\xd1\xae\xc0\xa9\xa1\xf4\xa1\x92\xeb\x1d\x194\xfa" +
	"\xf4v\x19\x89\x07A\xa8\xae9\x04\xe8\x8b\x92zAp" +
	"\x1b\xff\x09\x92-}\x97\x1e\x04\xf4\x97\x92\xfa\x8a\xe06" +
	"\xf1w\xc0\x14\x05`-\x1a\xd9\xdfH\xea\xab\x82\x09\xf9" +
	"W\x90\xa2\x04\xac%\xf3\xba \xa9\x7f\x12LD\xfe\x0c" +
	"R\x8c\x00\xd6\xf7\xa3\x80\xbe\"\xa9W\x05\x13j=H" +
	"Q\x01\xd6\xef\x06{M2\x1f\xa7`\"\xba\x16\xa4\x18" +
	"\x05\xec-\x1c\x02\xf2\x11J\xe6\x93\xa6\xd0\xb7\x1a\xa4\xc2" +
	"<&x;\x90\xef7\x85\x14\x05\x07\xfdi\xcfC\xf4" +
	"\xc5B\xa5\xe2\xb9\x8eOB\x90`\xd6\x9f.\x17\xdc\x1a" +
	"c\x10\x8c\x81\xd9z\xa3V\xf2\x9f\xbeaf\xda\xa9\xd5" +
	"\x9c\xe37\xf52[)\x1cu\x8b\x8dN\xbd\xeda\xab" +
	">Xt<\x8f\xc9\x8e\x9b \x93`_\xcd9v\xa3" +
	"C{\x1d\xd2\xaff\x0e\x96\xea\xc5Z\xa9\\\xf2\x9dF" +
	"\xa5\xf6X\xd5l\xb6\x8e\x0d\x990\xae\xdf!\xa9ww" +
	"e\xe2\xde\xc9\xeb\x99\xb8\xdf\xcc\xe9\x94\xdd6\xfb\xb3f" +
	"\xc1\x8f:e\xd0\xdd\xd4\xd1D\xf3\x90\x09\xb0\xeb\xb7z" +
	"\xb1nzEZ\xbdH+a\x1c\xef\x97\xd4)\xc1l" +
	"\xb5\xe6N\x95f\xae\x93\xc0\xe2\x00\xd0\xc3t\xa4[;" +
	"\xd0\xba\x88\xf6\xcfeC\xee\x0aN\xdd\xdd\xcb\xb1\x9b\xdc" +
	"Bv8L\xdc\xff\x19|\xb4s!=\x83\xa7\xc3\xc1" +
	"7l,\xd9\xa5\x02Y\xbf\x9ay\xc6\x9d\xd9,\xc1\xd0" +
	"\x84\xf2\xe3\x10\xff\x06\x00\x00\xff\xff\xb9?\x99\x93"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_8ef99297a43a5e34,
		Nodes: []uint64{
			0x82d3e852af0336bf,
			0xa0a054dea32fd98c,
			0xa0d9f6eca1c93d48,
			0xa3fa7845f919dd83,
			0xc2f8c20c293e5319,
			0xc4df13257bc2ea61,
			0xcfa794e8d19a0162,
			0xd7d879450a253e4b,
			0xe31026e735d69ddf,
			0xf061e22f0ae5c7b5,
			0xfa5b1fd61c2e7c3d,
		},
		Compressed: true,
	})
}
